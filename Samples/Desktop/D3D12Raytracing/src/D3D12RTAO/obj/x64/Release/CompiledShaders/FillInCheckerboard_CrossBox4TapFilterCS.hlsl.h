#if 0
;
; Note: shader requires additional functionality:
;       Typed UAV Load Additional Formats
;
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Pipeline Runtime Information: 
;
;
;
; Buffer Definitions:
;
; cbuffer cb
; {
;
;   struct cb
;   {
;
;       struct struct.CalculateMeanVarianceConstantBuffer
;       {
;
;           uint2 textureDim;                         ; Offset:    0
;           uint kernelWidth;                         ; Offset:    8
;           uint kernelRadius;                        ; Offset:   12
;           int doCheckerboardSampling;               ; Offset:   16
;           int areEvenPixelsActive;                  ; Offset:   20
;           uint pixelStepY;                          ; Offset:   24
;           float padding;                            ; Offset:   28
;       
;       } cb                                          ; Offset:    0
;
;   
;   } cb                                              ; Offset:    0 Size:    32
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; cb                                cbuffer      NA          NA     CB0            cb0     1
; g_inOutValues                         UAV     f32          2d      U0             u0     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%"class.RWTexture2D<vector<float, 2> >" = type { <2 x float> }
%cb = type { %struct.CalculateMeanVarianceConstantBuffer }
%struct.CalculateMeanVarianceConstantBuffer = type { <2 x i32>, i32, i32, i32, i32, i32, float }
%dx.types.Handle = type { i8* }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%"class.RWTexture2D<vector<float, 4> >" = type { <4 x float> }

@"\01?g_inOutValues@@3V?$RWTexture2D@V?$vector@M$01@@@@A" = external constant %"class.RWTexture2D<vector<float, 2> >", align 4
@cb = external constant %cb

define void @main() {
.preheader:
  %g_inOutValues_UAV_2d = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %cb_cbuffer = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %0 = call i32 @dx.op.threadId.i32(i32 93, i32 0)  ; ThreadId(component)
  %1 = call i32 @dx.op.threadId.i32(i32 93, i32 1)  ; ThreadId(component)
  %2 = shl i32 %1, 1
  %3 = add nsw i32 %2, %0
  %4 = and i32 %3, 1
  %5 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %cb_cbuffer, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %6 = extractvalue %dx.types.CBufRet.i32 %5, 1
  %7 = xor i32 %4, 1
  %8 = icmp eq i32 %6, %7
  %.i1 = zext i1 %8 to i32
  %.i141 = or i32 %.i1, %2
  %.i042 = add i32 %0, -1
  %TextureLoad34 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %g_inOutValues_UAV_2d, i32 undef, i32 %.i042, i32 %.i141, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %9 = extractvalue %dx.types.ResRet.f32 %TextureLoad34, 0
  %10 = extractvalue %dx.types.ResRet.f32 %TextureLoad34, 1
  %.i145 = add i32 %.i141, -1
  %TextureLoad33 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %g_inOutValues_UAV_2d, i32 undef, i32 %0, i32 %.i145, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %11 = extractvalue %dx.types.ResRet.f32 %TextureLoad33, 0
  %12 = extractvalue %dx.types.ResRet.f32 %TextureLoad33, 1
  %.i046 = add i32 %0, 1
  %TextureLoad32 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %g_inOutValues_UAV_2d, i32 undef, i32 %.i046, i32 %.i141, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %13 = extractvalue %dx.types.ResRet.f32 %TextureLoad32, 0
  %14 = extractvalue %dx.types.ResRet.f32 %TextureLoad32, 1
  %.i149 = add i32 %.i141, 1
  %TextureLoad = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %g_inOutValues_UAV_2d, i32 undef, i32 %0, i32 %.i149, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %15 = extractvalue %dx.types.ResRet.f32 %TextureLoad, 0
  %16 = extractvalue %dx.types.ResRet.f32 %TextureLoad, 1
  %.i050 = fcmp fast une float %9, -1.000000e+00
  %.i151 = fcmp fast une float %11, -1.000000e+00
  %.i2 = fcmp fast une float %13, -1.000000e+00
  %.i3 = fcmp fast une float %15, -1.000000e+00
  %.i052 = uitofp i1 %.i050 to float
  %.i153 = uitofp i1 %.i151 to float
  %.i254 = uitofp i1 %.i2 to float
  %.i355 = uitofp i1 %.i3 to float
  %17 = call float @dx.op.dot4.f32(i32 56, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float %.i052, float %.i153, float %.i254, float %.i355)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %18 = fcmp fast ogt float %17, 0x3F50624DE0000000
  %19 = fmul fast float %.i052, %9
  %FMad39 = call float @dx.op.tertiary.f32(i32 46, float %.i153, float %11, float %19)  ; FMad(a,b,c)
  %FMad38 = call float @dx.op.tertiary.f32(i32 46, float %.i254, float %13, float %FMad39)  ; FMad(a,b,c)
  %FMad37 = call float @dx.op.tertiary.f32(i32 46, float %.i355, float %15, float %FMad38)  ; FMad(a,b,c)
  %20 = fmul fast float %.i052, %10
  %FMad36 = call float @dx.op.tertiary.f32(i32 46, float %.i153, float %12, float %20)  ; FMad(a,b,c)
  %FMad35 = call float @dx.op.tertiary.f32(i32 46, float %.i254, float %14, float %FMad36)  ; FMad(a,b,c)
  %FMad = call float @dx.op.tertiary.f32(i32 46, float %.i355, float %16, float %FMad35)  ; FMad(a,b,c)
  %.i056 = fdiv fast float %FMad37, %17
  %.i157 = fdiv fast float %FMad, %17
  %.i058 = select i1 %18, float %.i056, float -1.000000e+00
  %.i159 = select i1 %18, float %.i157, float -1.000000e+00
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %g_inOutValues_UAV_2d, i32 %0, i32 %.i141, i32 undef, float %.i058, float %.i159, float %.i058, float %.i058, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadId.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind
declare void @dx.op.textureStore.f32(i32, %dx.types.Handle, i32, i32, i32, float, float, float, float, i8) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #1

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.typeAnnotations = !{!10, !24}
!dx.entryPoints = !{!28}

!0 = !{!"dxc 1.2"}
!1 = !{i32 1, i32 3}
!2 = !{i32 1, i32 4}
!3 = !{!"cs", i32 6, i32 3}
!4 = !{null, !5, !8, null}
!5 = !{!6}
!6 = !{i32 0, %"class.RWTexture2D<vector<float, 2> >"* undef, !"g_inOutValues", i32 0, i32 0, i32 1, i32 2, i1 false, i1 false, i1 false, !7}
!7 = !{i32 0, i32 9}
!8 = !{!9}
!9 = !{i32 0, %cb* undef, !"cb", i32 0, i32 0, i32 1, i32 32, null}
!10 = !{i32 0, %"class.RWTexture2D<vector<float, 2> >" undef, !11, %"class.RWTexture2D<vector<float, 4> >" undef, !13, %struct.CalculateMeanVarianceConstantBuffer undef, !14, %cb undef, !22}
!11 = !{i32 8, !12}
!12 = !{i32 6, !"h", i32 3, i32 0, i32 7, i32 9}
!13 = !{i32 16, !12}
!14 = !{i32 32, !15, !16, !17, !18, !19, !20, !21}
!15 = !{i32 6, !"textureDim", i32 3, i32 0, i32 7, i32 5}
!16 = !{i32 6, !"kernelWidth", i32 3, i32 8, i32 7, i32 5}
!17 = !{i32 6, !"kernelRadius", i32 3, i32 12, i32 7, i32 5}
!18 = !{i32 6, !"doCheckerboardSampling", i32 3, i32 16, i32 7, i32 4}
!19 = !{i32 6, !"areEvenPixelsActive", i32 3, i32 20, i32 7, i32 4}
!20 = !{i32 6, !"pixelStepY", i32 3, i32 24, i32 7, i32 5}
!21 = !{i32 6, !"padding", i32 3, i32 28, i32 7, i32 9}
!22 = !{i32 32, !23}
!23 = !{i32 6, !"cb", i32 3, i32 0}
!24 = !{i32 1, void ()* @main, !25}
!25 = !{!26}
!26 = !{i32 0, !27, !27}
!27 = !{}
!28 = !{void ()* @main, !"main", null, !4, !29}
!29 = !{i32 0, i64 8192, i32 4, !30}
!30 = !{i32 8, i32 8, i32 1}

#endif

const unsigned char g_pFillInCheckerboard_CrossBox4TapFilterCS[] = {
  0x44, 0x58, 0x42, 0x43, 0xce, 0x72, 0xf5, 0x5f, 0x92, 0x7b, 0xe5, 0x47,
  0xc5, 0xac, 0x3c, 0x16, 0x57, 0x00, 0x0e, 0x53, 0x01, 0x00, 0x00, 0x00,
  0x08, 0x0b, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00,
  0x44, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00,
  0xc8, 0x00, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x4f, 0x53, 0x47, 0x31, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x50, 0x53, 0x56, 0x30, 0x5c, 0x00, 0x00, 0x00,
  0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4c,
  0x38, 0x0a, 0x00, 0x00, 0x63, 0x00, 0x05, 0x00, 0x8e, 0x02, 0x00, 0x00,
  0x44, 0x58, 0x49, 0x4c, 0x03, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x20, 0x0a, 0x00, 0x00, 0x42, 0x43, 0xc0, 0xde, 0x21, 0x0c, 0x00, 0x00,
  0x85, 0x02, 0x00, 0x00, 0x0b, 0x82, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91, 0x41, 0xc8, 0x04, 0x49,
  0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0c, 0x25, 0x05, 0x08, 0x19,
  0x1e, 0x04, 0x8b, 0x62, 0x80, 0x18, 0x45, 0x02, 0x42, 0x92, 0x0b, 0x42,
  0xc4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4b, 0x0a, 0x32, 0x62, 0x88,
  0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xa5, 0x00, 0x19, 0x32, 0x42,
  0xe4, 0x48, 0x0e, 0x90, 0x11, 0x23, 0xc4, 0x50, 0x41, 0x51, 0x81, 0x8c,
  0xe1, 0x83, 0xe5, 0x8a, 0x04, 0x31, 0x46, 0x06, 0x51, 0x18, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x1b, 0x8c, 0xe0, 0xff, 0xff, 0xff, 0xff, 0x07,
  0x40, 0x02, 0xa8, 0x0d, 0x86, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x03, 0x20,
  0x01, 0xd5, 0x06, 0x62, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x01, 0x90, 0x00,
  0x49, 0x18, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x82, 0x60, 0x42,
  0x20, 0x4c, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00, 0x89, 0x20, 0x00, 0x00,
  0x56, 0x00, 0x00, 0x00, 0x32, 0x22, 0x88, 0x09, 0x20, 0x64, 0x85, 0x04,
  0x13, 0x23, 0xa4, 0x84, 0x04, 0x13, 0x23, 0xe3, 0x84, 0xa1, 0x90, 0x14,
  0x12, 0x4c, 0x8c, 0x8c, 0x0b, 0x84, 0xc4, 0x4c, 0x10, 0x90, 0xc1, 0x0c,
  0xc0, 0x30, 0x82, 0x00, 0xcc, 0x44, 0x06, 0xe3, 0xc0, 0x0e, 0xe1, 0x30,
  0x0f, 0xf3, 0xe0, 0x06, 0xb2, 0x70, 0x0b, 0xb4, 0x50, 0x0e, 0xf8, 0x40,
  0x0f, 0xf5, 0x20, 0x0f, 0xe5, 0x20, 0x07, 0xa4, 0xc0, 0x07, 0xf6, 0x50,
  0x0e, 0xe3, 0x40, 0x0f, 0xef, 0x20, 0x0f, 0x7c, 0x60, 0x0e, 0xec, 0xf0,
  0x0e, 0xe1, 0x40, 0x0f, 0x6c, 0x00, 0x06, 0x72, 0xe0, 0x07, 0x60, 0xe0,
  0x07, 0x28, 0x08, 0x48, 0x98, 0x23, 0x00, 0x83, 0x61, 0x04, 0x81, 0x38,
  0x35, 0x90, 0xa6, 0x88, 0x12, 0x26, 0x9f, 0x03, 0x16, 0x81, 0x5a, 0x80,
  0x89, 0x30, 0x09, 0xa0, 0x79, 0x81, 0x08, 0x01, 0x1a, 0x81, 0xe0, 0x9c,
  0x46, 0x9a, 0x80, 0x66, 0xda, 0xa8, 0xa2, 0x20, 0x22, 0x74, 0x14, 0x04,
  0x41, 0x10, 0x04, 0x70, 0x82, 0x10, 0xa0, 0xc0, 0xa0, 0x63, 0x04, 0xa0,
  0x04, 0x09, 0x29, 0x65, 0x20, 0x08, 0x82, 0x98, 0xa3, 0x86, 0xcb, 0x9f,
  0xb0, 0x87, 0x90, 0x7c, 0x6e, 0xa3, 0x8a, 0x95, 0x98, 0x7c, 0xe4, 0xb6,
  0x11, 0x41, 0x10, 0x04, 0x31, 0x47, 0x80, 0xd0, 0x73, 0xcf, 0x70, 0xf9,
  0x13, 0xf6, 0x10, 0x92, 0x1f, 0x02, 0xcd, 0xb0, 0x10, 0x28, 0x80, 0x0a,
  0xe1, 0x10, 0x11, 0x41, 0xd2, 0x4d, 0xc3, 0xe5, 0x4f, 0xd8, 0x43, 0x48,
  0xfe, 0x4a, 0x48, 0x2b, 0x31, 0xf9, 0xc5, 0x6d, 0xa3, 0x02, 0x00, 0x00,
  0x80, 0x28, 0x0a, 0x45, 0x44, 0x04, 0x41, 0x10, 0x04, 0x41, 0x50, 0x55,
  0x96, 0x84, 0x88, 0x08, 0x82, 0x00, 0x00, 0x00, 0x78, 0xe8, 0x2a, 0x0a,
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x56, 0x0a, 0x80, 0x00,
  0x00, 0x80, 0xb6, 0x39, 0x82, 0xa0, 0x18, 0x11, 0xf1, 0x10, 0x44, 0x47,
  0xde, 0x40, 0xc0, 0x30, 0x02, 0x01, 0xcc, 0x44, 0x06, 0xe3, 0xc0, 0x0e,
  0xe1, 0x30, 0x0f, 0xf3, 0xe0, 0x06, 0xb2, 0x70, 0x0b, 0xb4, 0x50, 0x0e,
  0xf8, 0x40, 0x0f, 0xf5, 0x20, 0x0f, 0xe5, 0x20, 0x07, 0xa4, 0xc0, 0x07,
  0xf6, 0x50, 0x0e, 0xe3, 0x40, 0x0f, 0xef, 0x20, 0x0f, 0x7c, 0x60, 0x0e,
  0xec, 0xf0, 0x0e, 0xe1, 0x40, 0x0f, 0x6c, 0x00, 0x06, 0x74, 0xe0, 0x07,
  0x60, 0xe0, 0x07, 0x28, 0x08, 0xe7, 0x08, 0x40, 0x01, 0x00, 0x00, 0x00,
  0x13, 0x14, 0x72, 0xc0, 0x87, 0x74, 0x60, 0x87, 0x36, 0x68, 0x87, 0x79,
  0x68, 0x03, 0x72, 0xc0, 0x87, 0x0d, 0xaf, 0x50, 0x0e, 0x6d, 0xd0, 0x0e,
  0x7a, 0x50, 0x0e, 0x6d, 0x00, 0x0f, 0x7a, 0x30, 0x07, 0x72, 0xa0, 0x07,
  0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x71, 0xa0, 0x07, 0x73, 0x20, 0x07,
  0x6d, 0x90, 0x0e, 0x78, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e,
  0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x30, 0x07,
  0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x76, 0x40, 0x07,
  0x7a, 0x60, 0x07, 0x74, 0xd0, 0x06, 0xe6, 0x10, 0x07, 0x76, 0xa0, 0x07,
  0x73, 0x20, 0x07, 0x6d, 0x60, 0x0e, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07,
  0x72, 0xd0, 0x06, 0xe6, 0x60, 0x07, 0x74, 0xa0, 0x07, 0x76, 0x40, 0x07,
  0x6d, 0xe0, 0x0e, 0x78, 0xa0, 0x07, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07,
  0x72, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x3a, 0x0f, 0x64, 0x90, 0x21, 0x23,
  0x45, 0x44, 0x00, 0x6a, 0x00, 0xc0, 0xfc, 0x00, 0x00, 0x86, 0x3c, 0x0a,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x79,
  0x18, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18,
  0xf2, 0x48, 0x40, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x30, 0xe4, 0xa9, 0x80, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x60, 0xc8, 0x73, 0x01, 0x01, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xc0, 0x90, 0x27, 0x03, 0x02, 0x20, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x80, 0x21, 0xcf, 0x06, 0x04, 0x40, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x1e, 0x0f, 0x08, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb2, 0x40, 0x12, 0x00, 0x00, 0x00,
  0x32, 0x1e, 0x98, 0x18, 0x19, 0x11, 0x4c, 0x90, 0x8c, 0x09, 0x26, 0x47,
  0xc6, 0x04, 0x43, 0x1a, 0x0b, 0x10, 0x30, 0x80, 0xba, 0x11, 0x00, 0x22,
  0x4a, 0xa0, 0x0c, 0x0a, 0xa1, 0x18, 0x46, 0x00, 0x8a, 0xa0, 0x24, 0x0a,
  0xa8, 0x20, 0xca, 0xa1, 0x40, 0x4a, 0xa1, 0x30, 0x0a, 0xa5, 0x60, 0x0a,
  0x87, 0x8c, 0x19, 0x00, 0x3a, 0x66, 0x00, 0x08, 0x99, 0x01, 0xa0, 0x61,
  0x06, 0x80, 0xc4, 0x19, 0x00, 0x12, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x79, 0x18, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x1a, 0x03, 0x4c, 0x90,
  0x46, 0x02, 0x13, 0xc4, 0x83, 0x0c, 0x6f, 0x0c, 0x24, 0xc6, 0x45, 0x66,
  0x43, 0x10, 0x4c, 0x10, 0x08, 0x66, 0x82, 0x40, 0x34, 0x1b, 0x84, 0x81,
  0x98, 0x20, 0x10, 0xce, 0x06, 0x61, 0x30, 0x28, 0x8c, 0xcd, 0x4d, 0x10,
  0x88, 0x67, 0xc3, 0x80, 0x24, 0xc4, 0x04, 0x81, 0x80, 0x26, 0x08, 0xc3,
  0xc7, 0xe6, 0xec, 0x2b, 0xcd, 0xed, 0xa9, 0x8e, 0xce, 0x2a, 0x8c, 0xad,
  0xae, 0x6c, 0x6e, 0x82, 0x40, 0x44, 0x13, 0x84, 0x6e, 0x99, 0x20, 0x10,
  0xd2, 0x06, 0x61, 0x81, 0x36, 0x2c, 0x0b, 0xd3, 0x2c, 0xcb, 0xe0, 0x3c,
  0xcf, 0x13, 0x6d, 0x08, 0xa4, 0x09, 0x02, 0xe2, 0x51, 0x18, 0x13, 0x9b,
  0x20, 0x10, 0xd3, 0x06, 0x64, 0xa1, 0xaa, 0x65, 0x19, 0x2c, 0x60, 0x43,
  0x70, 0x6d, 0x20, 0x80, 0x09, 0x03, 0x26, 0x08, 0x42, 0x18, 0x4c, 0x10,
  0x08, 0x8a, 0x01, 0xda, 0x04, 0x81, 0xa8, 0x36, 0x18, 0x09, 0x47, 0x2c,
  0x1d, 0xb4, 0x41, 0xd8, 0xbc, 0x09, 0x82, 0x18, 0x80, 0xc1, 0x04, 0x81,
  0xb0, 0x36, 0x08, 0x61, 0xe0, 0x4d, 0x10, 0x0c, 0x8e, 0x0a, 0x5d, 0x19,
  0x1e, 0x5d, 0x9d, 0x5c, 0x19, 0x51, 0x5a, 0xdb, 0x04, 0x81, 0xb8, 0x36,
  0x18, 0x09, 0x19, 0x10, 0x4b, 0x57, 0x06, 0x5c, 0xd6, 0xca, 0xe4, 0xdc,
  0xca, 0xd8, 0xae, 0xd2, 0xc8, 0xe8, 0xd0, 0x36, 0x18, 0xc9, 0x19, 0x10,
  0x5b, 0x57, 0x06, 0x64, 0xd6, 0xca, 0xe4, 0xdc, 0xca, 0xd8, 0xa4, 0xc2,
  0xc8, 0xd2, 0xea, 0xe6, 0x26, 0x08, 0x04, 0xb6, 0xc1, 0x48, 0xd2, 0x80,
  0x50, 0x83, 0xae, 0x0c, 0x68, 0x91, 0xbd, 0x0d, 0xa1, 0x95, 0x8d, 0xad,
  0x95, 0xc9, 0x89, 0xbd, 0x85, 0xc9, 0x91, 0x4d, 0x85, 0xb5, 0xc1, 0xb1,
  0xa5, 0xb9, 0x9d, 0x6d, 0x30, 0x12, 0x36, 0x20, 0xc2, 0xa0, 0x33, 0x38,
  0x85, 0xc9, 0x95, 0x15, 0xd9, 0x95, 0xb9, 0x41, 0xa5, 0xe1, 0x95, 0xb1,
  0xcd, 0x05, 0x8d, 0xd1, 0xa5, 0xd9, 0x95, 0x4d, 0x10, 0x88, 0x6c, 0x83,
  0x91, 0xb8, 0x01, 0xf1, 0x06, 0x9d, 0x41, 0x05, 0x2e, 0x0d, 0xaf, 0x8c,
  0x6d, 0x8a, 0xae, 0x0c, 0x2e, 0x6b, 0x82, 0x40, 0x68, 0x1b, 0x8c, 0x24,
  0x0e, 0x08, 0x39, 0xe8, 0xca, 0x80, 0x07, 0x5c, 0x18, 0x19, 0x59, 0x9a,
  0xdb, 0xd9, 0x04, 0x81, 0xd8, 0x36, 0x18, 0x09, 0x1d, 0x10, 0x75, 0xd0,
  0x41, 0x1b, 0x10, 0xcb, 0x0c, 0xd0, 0x60, 0x0d, 0xda, 0x00, 0x0e, 0xe6,
  0xc0, 0x0e, 0x26, 0x08, 0x47, 0xb7, 0x81, 0x48, 0x2a, 0x62, 0xd9, 0x20,
  0x58, 0x79, 0xb0, 0x21, 0x59, 0xb4, 0x0f, 0x0c, 0xc4, 0x60, 0x0c, 0xee,
  0x00, 0x0f, 0xf4, 0x60, 0x82, 0xb0, 0x08, 0x1b, 0x80, 0x0d, 0xc3, 0xd2,
  0x07, 0x7d, 0xb0, 0x21, 0xf0, 0x83, 0x0d, 0xc3, 0xc0, 0x07, 0x7f, 0x40,
  0xa2, 0x2d, 0x2c, 0xcd, 0x6d, 0x82, 0x30, 0x06, 0xca, 0x86, 0x61, 0xdb,
  0x86, 0x0d, 0xc4, 0x22, 0x0a, 0xc6, 0x28, 0x6c, 0x28, 0xf8, 0x20, 0x14,
  0x80, 0x8c, 0x14, 0xaa, 0xb0, 0xb1, 0xd9, 0xb5, 0xb9, 0xa4, 0x91, 0x95,
  0xb9, 0xd1, 0x4d, 0x09, 0x82, 0x2a, 0x64, 0x78, 0x2e, 0x76, 0x65, 0x72,
  0x73, 0x69, 0x6f, 0x6e, 0x53, 0x02, 0xa2, 0x09, 0x19, 0x9e, 0x8b, 0x5d,
  0x18, 0x9b, 0x5d, 0x99, 0xdc, 0x94, 0xc0, 0xa8, 0x43, 0x86, 0xe7, 0x32,
  0x87, 0x16, 0x46, 0x56, 0x26, 0xd7, 0xf4, 0x46, 0x56, 0xc6, 0x36, 0x25,
  0x48, 0xca, 0x90, 0xe1, 0xb9, 0xc8, 0x95, 0xcd, 0xbd, 0xd5, 0xc9, 0x8d,
  0x95, 0xcd, 0x4d, 0x09, 0xb0, 0x4a, 0x64, 0x78, 0x2e, 0x74, 0x79, 0x70,
  0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
  0x53, 0x04, 0x3d, 0xf8, 0x83, 0x3a, 0x64, 0x78, 0x2e, 0x65, 0x6e, 0x74,
  0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x53, 0x02, 0x52, 0x00,
  0x79, 0x18, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x33, 0x08, 0x80, 0x1c,
  0xc4, 0xe1, 0x1c, 0x66, 0x14, 0x01, 0x3d, 0x88, 0x43, 0x38, 0x84, 0xc3,
  0x8c, 0x42, 0x80, 0x07, 0x79, 0x78, 0x07, 0x73, 0x98, 0x71, 0x0c, 0xe6,
  0x00, 0x0f, 0xed, 0x10, 0x0e, 0xf4, 0x80, 0x0e, 0x33, 0x0c, 0x42, 0x1e,
  0xc2, 0xc1, 0x1d, 0xce, 0xa1, 0x1c, 0x66, 0x30, 0x05, 0x3d, 0x88, 0x43,
  0x38, 0x84, 0x83, 0x1b, 0xcc, 0x03, 0x3d, 0xc8, 0x43, 0x3d, 0x8c, 0x03,
  0x3d, 0xcc, 0x78, 0x8c, 0x74, 0x70, 0x07, 0x7b, 0x08, 0x07, 0x79, 0x48,
  0x87, 0x70, 0x70, 0x07, 0x7a, 0x70, 0x03, 0x76, 0x78, 0x87, 0x70, 0x20,
  0x87, 0x19, 0xcc, 0x11, 0x0e, 0xec, 0x90, 0x0e, 0xe1, 0x30, 0x0f, 0x6e,
  0x30, 0x0f, 0xe3, 0xf0, 0x0e, 0xf0, 0x50, 0x0e, 0x33, 0x10, 0xc4, 0x1d,
  0xde, 0x21, 0x1c, 0xd8, 0x21, 0x1d, 0xc2, 0x61, 0x1e, 0x66, 0x30, 0x89,
  0x3b, 0xbc, 0x83, 0x3b, 0xd0, 0x43, 0x39, 0xb4, 0x03, 0x3c, 0xbc, 0x83,
  0x3c, 0x84, 0x03, 0x3b, 0xcc, 0xf0, 0x14, 0x76, 0x60, 0x07, 0x7b, 0x68,
  0x07, 0x37, 0x68, 0x87, 0x72, 0x68, 0x07, 0x37, 0x80, 0x87, 0x70, 0x90,
  0x87, 0x70, 0x60, 0x07, 0x76, 0x28, 0x07, 0x76, 0xf8, 0x05, 0x76, 0x78,
  0x87, 0x77, 0x80, 0x87, 0x5f, 0x08, 0x87, 0x71, 0x18, 0x87, 0x72, 0x98,
  0x87, 0x79, 0x98, 0x81, 0x2c, 0xee, 0xf0, 0x0e, 0xee, 0xe0, 0x0e, 0xf5,
  0xc0, 0x0e, 0xec, 0x30, 0x03, 0x62, 0xc8, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c,
  0xcc, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xdc, 0x61, 0x1c, 0xca, 0x21, 0x1c,
  0xc4, 0x81, 0x1d, 0xca, 0x61, 0x06, 0xd6, 0x90, 0x43, 0x39, 0xc8, 0x43,
  0x39, 0x98, 0x43, 0x39, 0xc8, 0x43, 0x39, 0xb8, 0xc3, 0x38, 0x94, 0x43,
  0x38, 0x88, 0x03, 0x3b, 0x94, 0xc3, 0x2f, 0xbc, 0x83, 0x3c, 0xfc, 0x82,
  0x3b, 0xd4, 0x03, 0x3b, 0xb0, 0xc3, 0x0c, 0xc5, 0x61, 0x07, 0x76, 0xb0,
  0x87, 0x76, 0x70, 0x03, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87, 0x19, 0xd9,
  0x43, 0x0e, 0xf8, 0xe0, 0x06, 0xe8, 0xc0, 0x0e, 0x6e, 0x20, 0x0f, 0xe5,
  0x30, 0x0f, 0xef, 0x50, 0x0f, 0xf2, 0x30, 0x0e, 0xe5, 0xe0, 0x06, 0xe1,
  0x40, 0x0f, 0xf4, 0x20, 0x0f, 0xe9, 0x20, 0x0e, 0xf5, 0x40, 0x0f, 0xe5,
  0x00, 0x00, 0x00, 0x00, 0x71, 0x20, 0x00, 0x00, 0x2d, 0x00, 0x00, 0x00,
  0x05, 0x40, 0x07, 0x81, 0xdf, 0xf9, 0x9b, 0x76, 0x3f, 0xeb, 0x74, 0x6b,
  0x98, 0x5d, 0x2f, 0xcf, 0x81, 0xc0, 0x99, 0xf5, 0x47, 0x92, 0x5e, 0xa9,
  0x65, 0x3c, 0xbd, 0x2e, 0x2f, 0xcb, 0x88, 0x40, 0xeb, 0x8f, 0x64, 0x2f,
  0x8f, 0xe9, 0x6f, 0x39, 0xb0, 0x49, 0x82, 0xc5, 0x80, 0x40, 0x20, 0x30,
  0x68, 0x08, 0xd2, 0x70, 0xf9, 0xce, 0xe3, 0x4f, 0x44, 0x34, 0x21, 0x40,
  0x84, 0xf9, 0xc5, 0x6d, 0x1b, 0xc1, 0x36, 0x5c, 0xbe, 0xf3, 0xf8, 0x42,
  0x40, 0x15, 0x05, 0x11, 0x95, 0x0e, 0x30, 0x94, 0x84, 0x01, 0x08, 0x98,
  0x8f, 0xdc, 0xb6, 0x19, 0x58, 0xc3, 0xe5, 0x3b, 0x8f, 0x3f, 0x11, 0xd7,
  0x44, 0x45, 0x04, 0x3b, 0x39, 0x11, 0xe1, 0x17, 0xb7, 0x6d, 0x09, 0xd2,
  0x70, 0xf9, 0xce, 0xe3, 0x0b, 0x11, 0x01, 0x4c, 0x44, 0x08, 0x34, 0xc3,
  0x42, 0xd8, 0x80, 0x34, 0x5c, 0xbe, 0xf3, 0xf8, 0xd3, 0x11, 0x11, 0xc0,
  0x20, 0x0e, 0x3e, 0x72, 0xdb, 0x56, 0x50, 0x0d, 0x97, 0xef, 0x3c, 0xfe,
  0x44, 0x5c, 0x13, 0x15, 0x11, 0xa5, 0x03, 0x0c, 0x7e, 0x71, 0xdb, 0x26,
  0x40, 0x30, 0x00, 0xd2, 0x58, 0x80, 0x20, 0x04, 0x76, 0xe0, 0x0c, 0x97,
  0xef, 0x3c, 0xfe, 0xe0, 0x4c, 0xb8, 0x5f, 0xdc, 0x36, 0x00, 0x00, 0x00,
  0x61, 0x20, 0x00, 0x00, 0xa9, 0x00, 0x00, 0x00, 0x13, 0x04, 0x41, 0x2c,
  0x10, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0xf4, 0x94, 0x47, 0x11,
  0x94, 0x00, 0x11, 0x33, 0x00, 0xc5, 0x55, 0x84, 0x01, 0x25, 0x57, 0xba,
  0x01, 0x35, 0x50, 0x76, 0x05, 0x57, 0x86, 0x01, 0x04, 0x8c, 0x11, 0xbc,
  0x33, 0x69, 0xa2, 0xdd, 0x18, 0x01, 0x08, 0x82, 0x20, 0xfe, 0x8d, 0x11,
  0x80, 0x20, 0x08, 0xe2, 0xbf, 0x00, 0x00, 0x00, 0x23, 0x06, 0x09, 0x00,
  0x82, 0x60, 0xe0, 0xa1, 0x41, 0xd2, 0x84, 0x41, 0x18, 0x98, 0xc1, 0x88,
  0x41, 0x02, 0x80, 0x20, 0x18, 0x78, 0x69, 0xa0, 0x3c, 0x62, 0x20, 0x06,
  0x67, 0x30, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0x0c, 0x1c, 0x28, 0x63,
  0x30, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0x4c, 0x1c, 0x2c, 0x68, 0x50,
  0x41, 0x1a, 0x9c, 0x05, 0x03, 0x08, 0x2a, 0x58, 0x03, 0x1d, 0x31, 0x38,
  0x00, 0x10, 0x04, 0x03, 0x89, 0x0e, 0x1a, 0x83, 0x0d, 0x46, 0x13, 0x82,
  0xa0, 0x06, 0x37, 0xe0, 0xe1, 0x06, 0x21, 0x00, 0x83, 0x0b, 0x88, 0xa8,
  0x00, 0xd9, 0x5a, 0x28, 0x18, 0x31, 0x68, 0x00, 0x10, 0x04, 0x83, 0x4a,
  0x0f, 0x30, 0x47, 0x0b, 0x04, 0x4d, 0xd3, 0xb4, 0xd1, 0x84, 0x00, 0x18,
  0x4d, 0x10, 0x82, 0x2a, 0x30, 0x18, 0x31, 0x68, 0x00, 0x10, 0x04, 0x83,
  0xca, 0x0f, 0x38, 0xc9, 0x83, 0x02, 0xcf, 0xf3, 0xbc, 0xd1, 0x84, 0x00,
  0x18, 0x4d, 0x10, 0x82, 0x9a, 0xf4, 0x00, 0x46, 0x0c, 0x1a, 0x00, 0x04,
  0xc1, 0xa0, 0x12, 0x05, 0x30, 0xb0, 0xc4, 0x20, 0x50, 0xc4, 0x40, 0x0c,
  0xc4, 0x40, 0x0c, 0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0xaa, 0xf1,
  0x03, 0x18, 0x31, 0x68, 0x00, 0x10, 0x04, 0x83, 0xca, 0x14, 0xc8, 0x40,
  0x33, 0x03, 0x2c, 0x30, 0x03, 0x33, 0x30, 0x03, 0x33, 0x18, 0x4d, 0x08,
  0x80, 0xd1, 0x04, 0x21, 0x18, 0x8e, 0x70, 0x3c, 0xe7, 0x1b, 0x8e, 0x58,
  0x3e, 0xe7, 0x1b, 0x8e, 0x40, 0xc0, 0xc0, 0xf9, 0x86, 0x23, 0x8a, 0x30,
  0x70, 0xbe, 0x23, 0x80, 0x3a, 0x02, 0xa8, 0x23, 0x80, 0x3a, 0x02, 0xa8,
  0x11, 0x83, 0x06, 0x00, 0x41, 0x30, 0xc8, 0x5e, 0x41, 0x0d, 0xce, 0xe0,
  0x0c, 0xce, 0xe0, 0x0c, 0x88, 0x41, 0x08, 0x86, 0x23, 0x82, 0x34, 0x10,
  0x3e, 0x33, 0x30, 0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0xc1, 0x16,
  0x0b, 0x73, 0x60, 0x54, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x6c,
  0xb2, 0x40, 0x07, 0x86, 0x14, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0xc1,
  0x36, 0x0b, 0x75, 0x60, 0x3c, 0x81, 0x29, 0x9b, 0x7c, 0x46, 0x0c, 0x10,
  0x00, 0x04, 0xc1, 0x60, 0xab, 0x85, 0x3b, 0x50, 0xb0, 0x60, 0xc4, 0x00,
  0x01, 0x40, 0x10, 0x0c, 0x36, 0x5b, 0xc0, 0x03, 0xa5, 0x0a, 0x46, 0x0c,
  0x10, 0x00, 0x04, 0xc1, 0x60, 0xbb, 0x85, 0x3c, 0x50, 0xa4, 0xc0, 0x0a,
  0x85, 0x3e, 0x26, 0x2c, 0xf4, 0x99, 0x6e, 0x10, 0xe4, 0x60, 0x99, 0x6e,
  0x10, 0xe6, 0x80, 0x19, 0x31, 0x70, 0x00, 0x10, 0x04, 0x83, 0xcb, 0x17,
  0xee, 0x60, 0x0e, 0xe2, 0xe0, 0x0c, 0xfe, 0x40, 0x08, 0x04, 0x41, 0x14,
  0x30, 0x1c, 0x08, 0x00, 0x39, 0x00, 0x00, 0x00, 0xe6, 0x65, 0x7c, 0x26,
  0x30, 0xdc, 0xb9, 0x75, 0x19, 0x9f, 0x09, 0x0c, 0xb7, 0x6e, 0x5b, 0xc6,
  0x67, 0x02, 0xc3, 0xbd, 0x9b, 0x96, 0xf1, 0x99, 0xc0, 0x70, 0xf3, 0x96,
  0x65, 0x7c, 0x26, 0x30, 0xdc, 0xbd, 0xf5, 0x14, 0x3e, 0x52, 0xe3, 0xb5,
  0xf9, 0x14, 0x3e, 0x42, 0xe3, 0xb6, 0x09, 0x15, 0x3e, 0x52, 0xe3, 0xb9,
  0x19, 0x15, 0x3e, 0x42, 0xe3, 0xba, 0x29, 0x15, 0x3e, 0x52, 0xe3, 0xfd,
  0x01, 0x28, 0xfe, 0x13, 0x11, 0x07, 0x01, 0x0c, 0x44, 0x64, 0x32, 0x8a,
  0x10, 0xfc, 0x42, 0x40, 0x15, 0x05, 0x11, 0x59, 0x0c, 0x65, 0xfc, 0x48,
  0x83, 0x52, 0xd3, 0x0b, 0x2c, 0x14, 0x21, 0xfd, 0xae, 0xf6, 0xfe, 0xf6,
  0x60, 0x3c, 0x83, 0x8f, 0xd4, 0x06, 0x35, 0xf8, 0x88, 0x6d, 0x51, 0x83,
  0x8f, 0xdc, 0xe6, 0x54, 0xf8, 0x08, 0x9d, 0xd3, 0xf6, 0x54, 0xf8, 0x48,
  0x9d, 0xd7, 0x26, 0x55, 0xf8, 0x08, 0x9d, 0xdb, 0x36, 0x55, 0xf8, 0x48,
  0x9d, 0xdf, 0xb6, 0xb4, 0xb4, 0xc4, 0x35, 0x51, 0x11, 0x51, 0x3a, 0xc0,
  0x60, 0x54, 0x85, 0x8f, 0xd8, 0x39, 0x6e, 0x60, 0x85, 0x8f, 0xd0, 0xb9,
  0x6e, 0x55, 0x85, 0x8f, 0xdc, 0x79, 0x6e, 0x61, 0x85, 0x8f, 0xd4, 0xf9,
  0x6e, 0x47, 0x4d, 0x4b, 0x5c, 0x13, 0x15, 0x11, 0xa5, 0x03, 0x0c, 0xb7,
  0x6d, 0x43, 0x4d, 0x4b, 0x5c, 0x13, 0x15, 0x11, 0xa5, 0x03, 0x0c, 0xf7,
  0x6d, 0x3f, 0x4d, 0x4b, 0x5c, 0x13, 0x15, 0x11, 0xa5, 0x03, 0x0c, 0x37,
  0x6e, 0x5f, 0xc4, 0x67, 0x02, 0x83, 0x89, 0x15, 0x3e, 0x42, 0xe7, 0xbc,
  0x8d, 0x15, 0x3e, 0x52, 0xe7, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00
};
