#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Pipeline Runtime Information: 
;
;
;
; Buffer Definitions:
;
; cbuffer cb
; {
;
;   struct cb
;   {
;
;       struct struct.TextureDimConstantBuffer
;       {
;
;           uint2 textureDim;                         ; Offset:    0
;           float2 invTextureDim;                     ; Offset:    8
;       
;       } cb                                          ; Offset:    0
;
;   
;   } cb                                              ; Offset:    0 Size:    16
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; cb                                cbuffer      NA          NA     CB0            cb0     1
; MirroredLinearSampler             sampler      NA          NA      S0             s0     1
; g_input                           texture     f32          2d      T0             t0     1
; g_output                              UAV     f32          2d      U0             u0     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%"class.Texture2D<float>" = type { float, %"class.Texture2D<float>::mips_type" }
%"class.Texture2D<float>::mips_type" = type { i32 }
%"class.RWTexture2D<float>" = type { float }
%struct.SamplerState = type { i32 }
%cb = type { %struct.TextureDimConstantBuffer }
%struct.TextureDimConstantBuffer = type { <2 x i32>, <2 x float> }
%dx.types.Handle = type { i8* }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }

@"\01?g_input@@3V?$Texture2D@M@@A" = external constant %"class.Texture2D<float>", align 4
@"\01?g_output@@3V?$RWTexture2D@M@@A" = external constant %"class.RWTexture2D<float>", align 4
@"\01?MirroredLinearSampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@cb = external constant %cb

define void @main() {
  %g_output_UAV_2d = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %g_input_texture_2d = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %MirroredLinearSampler_sampler = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 3, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %cb_cbuffer = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %1 = call i32 @dx.op.threadId.i32(i32 93, i32 0)  ; ThreadId(component)
  %2 = call i32 @dx.op.threadId.i32(i32 93, i32 1)  ; ThreadId(component)
  %3 = icmp ne i32 %1, 0
  %4 = icmp ne i32 %2, 0
  %5 = and i1 %3, %4
  %6 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %cb_cbuffer, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %7 = extractvalue %dx.types.CBufRet.i32 %6, 0
  %8 = add i32 %7, -1
  %9 = icmp ult i32 %1, %8
  %10 = and i1 %5, %9
  %11 = extractvalue %dx.types.CBufRet.i32 %6, 1
  %12 = add i32 %11, -1
  %13 = icmp ult i32 %2, %12
  %14 = and i1 %10, %13
  br i1 %14, label %31, label %15

; <label>:15                                      ; preds = %0
  %16 = or i32 %2, %1
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %31, label %18

; <label>:18                                      ; preds = %15
  %19 = icmp eq i32 %1, %8
  %20 = icmp eq i32 %2, 0
  %21 = and i1 %20, %19
  br i1 %21, label %31, label %22

; <label>:22                                      ; preds = %18
  %23 = icmp eq i32 %1, 0
  %24 = icmp eq i32 %2, %12
  %25 = and i1 %23, %24
  br i1 %25, label %31, label %26

; <label>:26                                      ; preds = %22
  %27 = and i1 %19, %24
  br i1 %27, label %31, label %28

; <label>:28                                      ; preds = %26
  br i1 %23, label %31, label %29

; <label>:29                                      ; preds = %28
  br i1 %19, label %31, label %30

; <label>:30                                      ; preds = %29
  %..i0 = select i1 %20, float 0x3FDC496300000000, float 0x3FE71258C0000000
  %..i1 = select i1 %20, float 0x3FC5E49460000000, float 0x3FD1DB4E80000000
  %..i2 = select i1 %20, float 0x3FD1DB4E80000000, float 0.000000e+00
  %..i3 = select i1 %20, float 0x3FBBA41120000000, float 0.000000e+00
  br label %31

; <label>:31                                      ; preds = %30, %29, %28, %26, %22, %18, %15, %0
  %weights.0.i0 = phi float [ 0x3FE0A26C40000000, %0 ], [ 0x3FD80CF320000000, %15 ], [ 0x3FE39DD6A0000000, %18 ], [ 0x3FE39DD6A0000000, %22 ], [ 1.000000e+00, %26 ], [ 0x3FDC496300000000, %28 ], [ 0x3FE71258C0000000, %29 ], [ %..i0, %30 ]
  %weights.0.i1 = phi float [ 0x3FC9BFBE00000000, %0 ], [ 0x3FCE5D7460000000, %15 ], [ 0.000000e+00, %18 ], [ 0x3FD8C452A0000000, %22 ], [ 0.000000e+00, %26 ], [ 0x3FD1DB4E80000000, %28 ], [ 0.000000e+00, %29 ], [ %..i1, %30 ]
  %weights.0.i2 = phi float [ 0x3FC9BFBE00000000, %0 ], [ 0x3FCE5D7460000000, %15 ], [ 0x3FD8C452A0000000, %18 ], [ 0.000000e+00, %22 ], [ 0.000000e+00, %26 ], [ 0x3FC5E49460000000, %28 ], [ 0x3FD1DB4E80000000, %29 ], [ %..i2, %30 ]
  %weights.0.i3 = phi float [ 0x3FB3EDC7E0000000, %0 ], [ 0x3FC32B30E0000000, %15 ], [ 0.000000e+00, %18 ], [ 0.000000e+00, %22 ], [ 0.000000e+00, %26 ], [ 0x3FBBA41120000000, %28 ], [ 0.000000e+00, %29 ], [ %..i3, %30 ]
  %.i0 = uitofp i32 %1 to float
  %.i1 = uitofp i32 %2 to float
  %.i011 = fadd fast float %.i0, 0x3FBCEEB700000000
  %.i112 = fadd fast float %.i1, 0x3FBCEEB700000000
  %32 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %cb_cbuffer, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %33 = extractvalue %dx.types.CBufRet.f32 %32, 2
  %34 = extractvalue %dx.types.CBufRet.f32 %32, 3
  %.i013 = fmul fast float %33, %.i011
  %.i114 = fmul fast float %34, %.i112
  %35 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %g_input_texture_2d, %dx.types.Handle %MirroredLinearSampler_sampler, float %.i013, float %.i114, float undef, float undef, i32 undef, i32 undef, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %36 = extractvalue %dx.types.ResRet.f32 %35, 0
  %.i017 = fadd fast float %.i0, 1.500000e+00
  %.i118 = fadd fast float %.i1, 0x3FBCEEB280000000
  %.i019 = fmul fast float %33, %.i017
  %.i120 = fmul fast float %34, %.i118
  %37 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %g_input_texture_2d, %dx.types.Handle %MirroredLinearSampler_sampler, float %.i019, float %.i120, float undef, float undef, i32 undef, i32 undef, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %38 = extractvalue %dx.types.ResRet.f32 %37, 0
  %.i023 = fadd fast float %.i0, 0x3FBCEEB280000000
  %.i124 = fadd fast float %.i1, 1.500000e+00
  %.i025 = fmul fast float %33, %.i023
  %.i126 = fmul fast float %34, %.i124
  %39 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %g_input_texture_2d, %dx.types.Handle %MirroredLinearSampler_sampler, float %.i025, float %.i126, float undef, float undef, i32 undef, i32 undef, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %40 = extractvalue %dx.types.ResRet.f32 %39, 0
  %.i027 = add i32 %1, 1
  %.i128 = add i32 %2, 1
  %TextureLoad = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %g_input_texture_2d, i32 0, i32 %.i027, i32 %.i128, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %41 = extractvalue %dx.types.ResRet.f32 %TextureLoad, 0
  %42 = call float @dx.op.dot4.f32(i32 56, float %36, float %38, float %40, float %41, float %weights.0.i0, float %weights.0.i1, float %weights.0.i2, float %weights.0.i3)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %g_output_UAV_2d, i32 %1, i32 %2, i32 undef, float %42, float %42, float %42, float %42, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadId.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #1

; Function Attrs: nounwind
declare void @dx.op.textureStore.f32(i32, %dx.types.Handle, i32, i32, i32, float, float, float, float, i8) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #1

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.typeAnnotations = !{!14, !26}
!dx.entryPoints = !{!30}

!0 = !{!"dxc 1.2"}
!1 = !{i32 1, i32 3}
!2 = !{i32 1, i32 4}
!3 = !{!"cs", i32 6, i32 3}
!4 = !{!5, !8, !10, !12}
!5 = !{!6}
!6 = !{i32 0, %"class.Texture2D<float>"* undef, !"g_input", i32 0, i32 0, i32 1, i32 2, i32 0, !7}
!7 = !{i32 0, i32 9}
!8 = !{!9}
!9 = !{i32 0, %"class.RWTexture2D<float>"* undef, !"g_output", i32 0, i32 0, i32 1, i32 2, i1 false, i1 false, i1 false, !7}
!10 = !{!11}
!11 = !{i32 0, %cb* undef, !"cb", i32 0, i32 0, i32 1, i32 16, null}
!12 = !{!13}
!13 = !{i32 0, %struct.SamplerState* undef, !"MirroredLinearSampler", i32 0, i32 0, i32 1, i32 0, null}
!14 = !{i32 0, %"class.Texture2D<float>" undef, !15, %"class.Texture2D<float>::mips_type" undef, !18, %"class.RWTexture2D<float>" undef, !20, %struct.TextureDimConstantBuffer undef, !21, %cb undef, !24}
!15 = !{i32 8, !16, !17}
!16 = !{i32 6, !"h", i32 3, i32 0, i32 7, i32 9}
!17 = !{i32 6, !"mips", i32 3, i32 4}
!18 = !{i32 4, !19}
!19 = !{i32 6, !"handle", i32 3, i32 0, i32 7, i32 5}
!20 = !{i32 4, !16}
!21 = !{i32 16, !22, !23}
!22 = !{i32 6, !"textureDim", i32 3, i32 0, i32 7, i32 5}
!23 = !{i32 6, !"invTextureDim", i32 3, i32 8, i32 7, i32 9}
!24 = !{i32 16, !25}
!25 = !{i32 6, !"cb", i32 3, i32 0}
!26 = !{i32 1, void ()* @main, !27}
!27 = !{!28}
!28 = !{i32 0, !29, !29}
!29 = !{}
!30 = !{void ()* @main, !"main", null, !4, !31}
!31 = !{i32 4, !32}
!32 = !{i32 8, i32 8, i32 1}

#endif

const unsigned char g_pGaussianFilter3x3CS[] = {
  0x44, 0x58, 0x42, 0x43, 0x2e, 0xf6, 0xea, 0x72, 0x40, 0x51, 0x46, 0x01,
  0x4a, 0xbb, 0x29, 0x17, 0x0e, 0x0e, 0xec, 0x1f, 0x01, 0x00, 0x00, 0x00,
  0x80, 0x0c, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00,
  0x44, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00,
  0xe8, 0x00, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x4f, 0x53, 0x47, 0x31, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x50, 0x53, 0x56, 0x30, 0x7c, 0x00, 0x00, 0x00,
  0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4c, 0x90, 0x0b, 0x00, 0x00,
  0x63, 0x00, 0x05, 0x00, 0xe4, 0x02, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4c,
  0x03, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x78, 0x0b, 0x00, 0x00,
  0x42, 0x43, 0xc0, 0xde, 0x21, 0x0c, 0x00, 0x00, 0xdb, 0x02, 0x00, 0x00,
  0x0b, 0x82, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0x07, 0x81, 0x23, 0x91, 0x41, 0xc8, 0x04, 0x49, 0x06, 0x10, 0x32, 0x39,
  0x92, 0x01, 0x84, 0x0c, 0x25, 0x05, 0x08, 0x19, 0x1e, 0x04, 0x8b, 0x62,
  0x80, 0x18, 0x45, 0x02, 0x42, 0x92, 0x0b, 0x42, 0xc4, 0x10, 0x32, 0x14,
  0x38, 0x08, 0x18, 0x4b, 0x0a, 0x32, 0x62, 0x88, 0x48, 0x90, 0x14, 0x20,
  0x43, 0x46, 0x88, 0xa5, 0x00, 0x19, 0x32, 0x42, 0xe4, 0x48, 0x0e, 0x90,
  0x11, 0x23, 0xc4, 0x50, 0x41, 0x51, 0x81, 0x8c, 0xe1, 0x83, 0xe5, 0x8a,
  0x04, 0x31, 0x46, 0x06, 0x51, 0x18, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x1b, 0x8c, 0xe0, 0xff, 0xff, 0xff, 0xff, 0x07, 0x40, 0x02, 0xa8, 0x0d,
  0x86, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x03, 0x20, 0x01, 0xd5, 0x06, 0x62,
  0xf8, 0xff, 0xff, 0xff, 0xff, 0x01, 0x90, 0x00, 0x49, 0x18, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x13, 0x82, 0x60, 0x42, 0x20, 0x4c, 0x08, 0x06,
  0x00, 0x00, 0x00, 0x00, 0x89, 0x20, 0x00, 0x00, 0x62, 0x00, 0x00, 0x00,
  0x32, 0x22, 0x88, 0x09, 0x20, 0x64, 0x85, 0x04, 0x13, 0x23, 0xa4, 0x84,
  0x04, 0x13, 0x23, 0xe3, 0x84, 0xa1, 0x90, 0x14, 0x12, 0x4c, 0x8c, 0x8c,
  0x0b, 0x84, 0xc4, 0x4c, 0x10, 0xa8, 0xc1, 0x0c, 0xc0, 0x1c, 0x01, 0x18,
  0xcc, 0x14, 0x06, 0xe3, 0xc0, 0x0e, 0xe1, 0x30, 0x0f, 0xf3, 0xe0, 0x06,
  0xb4, 0x50, 0x0e, 0xf8, 0x40, 0x0f, 0xf5, 0x20, 0x0f, 0xe5, 0x20, 0x07,
  0xa4, 0xc0, 0x07, 0xe6, 0xc0, 0x0e, 0xef, 0x10, 0x0e, 0xf4, 0xe0, 0x07,
  0x7a, 0xa0, 0x07, 0xed, 0x90, 0x0e, 0xf0, 0x30, 0x0f, 0xbf, 0x40, 0x0f,
  0xf9, 0x00, 0x0f, 0xe5, 0x80, 0x82, 0x60, 0x26, 0x6b, 0x1c, 0xd8, 0x21,
  0x1c, 0xe6, 0x61, 0x1e, 0xdc, 0x80, 0x16, 0xca, 0x01, 0x1f, 0xe8, 0xa1,
  0x1e, 0xe4, 0xa1, 0x1c, 0xe4, 0x80, 0x14, 0xf8, 0xc0, 0x1c, 0xd8, 0xe1,
  0x1d, 0xc2, 0x81, 0x1e, 0xfc, 0x00, 0x09, 0x80, 0x40, 0xc3, 0x4c, 0xd8,
  0x38, 0xb0, 0x43, 0x38, 0xcc, 0xc3, 0x3c, 0xb8, 0x81, 0x2c, 0xdc, 0x02,
  0x2d, 0x94, 0x03, 0x3e, 0xd0, 0x43, 0x3d, 0xc8, 0x43, 0x39, 0xc8, 0x01,
  0x29, 0xf0, 0x81, 0x39, 0xb0, 0xc3, 0x3b, 0x84, 0x03, 0x3d, 0xf8, 0x01,
  0x0a, 0x00, 0x2a, 0x6e, 0x92, 0xa6, 0x88, 0x12, 0x26, 0x9f, 0x05, 0x98,
  0x67, 0x21, 0x22, 0x76, 0x02, 0x26, 0x02, 0x05, 0x01, 0x1d, 0xc3, 0x08,
  0x42, 0x30, 0x8c, 0x20, 0x00, 0xf7, 0x49, 0x53, 0x44, 0x09, 0x93, 0xdf,
  0x12, 0xd7, 0x44, 0x45, 0x44, 0x87, 0x30, 0x9c, 0xd3, 0x48, 0x13, 0xd0,
  0x4c, 0x1b, 0x55, 0x14, 0x44, 0x84, 0x84, 0x44, 0x39, 0x41, 0x08, 0x50,
  0xb0, 0x10, 0x33, 0x02, 0x50, 0x02, 0x87, 0x9e, 0x32, 0x04, 0x41, 0x40,
  0xd1, 0x51, 0xc3, 0xe5, 0x4f, 0xd8, 0x43, 0x48, 0x3e, 0xb7, 0x51, 0xc5,
  0x4a, 0x4c, 0x7e, 0x71, 0xdb, 0x88, 0x00, 0x00, 0x00, 0x98, 0x23, 0x40,
  0x88, 0xba, 0x67, 0xb8, 0xfc, 0x09, 0x7b, 0x08, 0xc9, 0x0f, 0x81, 0x66,
  0x58, 0x08, 0x14, 0x54, 0x85, 0x98, 0x02, 0x2b, 0xa0, 0xeb, 0xa8, 0xe1,
  0xf2, 0x27, 0xec, 0x21, 0x24, 0x9f, 0xdb, 0xa8, 0x62, 0x25, 0x26, 0x1f,
  0xb9, 0x6d, 0x44, 0x04, 0x41, 0x10, 0x14, 0x22, 0x0b, 0xac, 0x80, 0xb4,
  0x9b, 0x86, 0xcb, 0x9f, 0xb0, 0x87, 0x90, 0xfc, 0x95, 0x90, 0x56, 0x62,
  0xf2, 0x8b, 0xdb, 0x46, 0x05, 0x00, 0x00, 0x40, 0x50, 0x18, 0x2e, 0xb0,
  0x2c, 0x00, 0x00, 0x80, 0x20, 0x08, 0x00, 0xea, 0xca, 0xe2, 0x04, 0x56,
  0x10, 0x04, 0x00, 0x00, 0x00, 0x14, 0x7d, 0x45, 0xe1, 0x02, 0x2b, 0x08,
  0x82, 0x20, 0x08, 0x02, 0x0a, 0x8b, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x34, 0xce, 0x11, 0x04, 0xc5, 0xb0, 0x02, 0x2a, 0x08, 0x4a,
  0x32, 0x07, 0x02, 0xa6, 0x00, 0x00, 0x00, 0x00, 0x13, 0x14, 0x72, 0xc0,
  0x87, 0x74, 0x60, 0x87, 0x36, 0x68, 0x87, 0x79, 0x68, 0x03, 0x72, 0xc0,
  0x87, 0x0d, 0xaf, 0x50, 0x0e, 0x6d, 0xd0, 0x0e, 0x7a, 0x50, 0x0e, 0x6d,
  0x00, 0x0f, 0x7a, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d,
  0x90, 0x0e, 0x71, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x78,
  0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x71, 0x60, 0x07, 0x7a,
  0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x73,
  0x20, 0x07, 0x6d, 0x90, 0x0e, 0x76, 0x40, 0x07, 0x7a, 0x60, 0x07, 0x74,
  0xd0, 0x06, 0xe6, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d,
  0x60, 0x0e, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe6,
  0x60, 0x07, 0x74, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x6d, 0xe0, 0x0e, 0x78,
  0xa0, 0x07, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x76,
  0x40, 0x07, 0x3a, 0x0f, 0x84, 0x90, 0x21, 0x23, 0x45, 0x44, 0x00, 0xce,
  0x00, 0x80, 0x59, 0x03, 0x00, 0xe6, 0x0d, 0x00, 0x98, 0x3c, 0x00, 0x80,
  0x21, 0xcf, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x43, 0x9e, 0x08, 0x08, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x86, 0x3c, 0x17, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x0c, 0x79, 0x34, 0x20, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x18, 0xf2, 0x74, 0x40, 0x00, 0x08, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xe4, 0xf9, 0x80, 0x00, 0x18, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0x13, 0x06, 0x40, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xe4, 0x19, 0x03,
  0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xf2,
  0x98, 0x01, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x64, 0x81, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x32, 0x1e, 0x98, 0x18,
  0x19, 0x11, 0x4c, 0x90, 0x8c, 0x09, 0x26, 0x47, 0xc6, 0x04, 0x43, 0x0a,
  0x4a, 0xa0, 0x0c, 0x0a, 0xa1, 0x18, 0x46, 0x00, 0x8a, 0xa0, 0x24, 0x0a,
  0xa4, 0x20, 0xca, 0xa1, 0x14, 0xa8, 0x1c, 0x01, 0xa0, 0x61, 0x06, 0x80,
  0x88, 0x19, 0x00, 0x2a, 0x66, 0x00, 0xc8, 0x98, 0x01, 0x20, 0x64, 0x06,
  0x80, 0x96, 0x19, 0x00, 0x62, 0x66, 0x00, 0xa8, 0x99, 0x01, 0x20, 0x61,
  0x06, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x7b, 0x00, 0x00, 0x00,
  0x1a, 0x03, 0x4c, 0x90, 0x46, 0x02, 0x13, 0xc4, 0x83, 0x0c, 0x6f, 0x0c,
  0x24, 0xc6, 0x45, 0x66, 0x43, 0x10, 0x4c, 0x10, 0x82, 0x66, 0x82, 0x10,
  0x38, 0x1b, 0x84, 0x81, 0x98, 0x20, 0x04, 0xcf, 0x06, 0x61, 0x30, 0x28,
  0x8c, 0xcd, 0x4d, 0x10, 0x02, 0x68, 0xc3, 0x80, 0x24, 0xc4, 0x04, 0x21,
  0x88, 0x26, 0x08, 0x84, 0xc6, 0xe3, 0xec, 0x2b, 0xcd, 0x0d, 0xae, 0x8e,
  0x6e, 0x82, 0x10, 0x48, 0x13, 0x84, 0x60, 0xda, 0x20, 0x2c, 0xcf, 0x86,
  0x64, 0x61, 0x9a, 0x65, 0x19, 0x9c, 0x05, 0xda, 0x10, 0x44, 0x13, 0x04,
  0x83, 0x23, 0x72, 0xf6, 0xf5, 0x56, 0x47, 0x07, 0x57, 0x47, 0x37, 0x41,
  0x28, 0x03, 0x6c, 0xc3, 0xb2, 0x4c, 0xd4, 0xb2, 0x0c, 0x4e, 0x55, 0x55,
  0xd0, 0x86, 0xc0, 0x9a, 0x20, 0x34, 0x60, 0x40, 0x61, 0x4c, 0x6c, 0x82,
  0x10, 0x50, 0x1b, 0x90, 0x05, 0xcb, 0x96, 0x65, 0xd0, 0x80, 0x0d, 0xc1,
  0x36, 0x41, 0x40, 0x3a, 0x56, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x65,
  0x64, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c,
  0x65, 0x72, 0x1b, 0x90, 0xa5, 0xf3, 0x96, 0x65, 0x58, 0x80, 0x0d, 0xc1,
  0xb7, 0x81, 0x90, 0x2e, 0x0e, 0x0c, 0x26, 0x08, 0x43, 0x36, 0x41, 0x08,
  0x2a, 0x06, 0x68, 0x13, 0x84, 0xc0, 0xda, 0x60, 0x24, 0x64, 0x40, 0x2c,
  0x65, 0xf0, 0x90, 0x68, 0x4b, 0x83, 0x9b, 0xdb, 0x40, 0x24, 0x67, 0x40,
  0x18, 0x1b, 0x86, 0x31, 0x30, 0x03, 0x34, 0x98, 0x20, 0x08, 0x61, 0x40,
  0x03, 0x2d, 0xcc, 0x8d, 0x8c, 0xad, 0x6c, 0x82, 0x10, 0x5c, 0x1b, 0x8c,
  0x64, 0x0d, 0x88, 0xa5, 0x0c, 0xd8, 0x60, 0x83, 0x60, 0xb4, 0xc1, 0x04,
  0xa1, 0xd8, 0x36, 0x08, 0x86, 0x19, 0x4c, 0x10, 0x16, 0x8f, 0x0a, 0x5d,
  0x19, 0x1e, 0x5d, 0x9d, 0x5c, 0x19, 0x51, 0x5a, 0xdb, 0x06, 0x23, 0x91,
  0x03, 0x62, 0x29, 0x03, 0x36, 0x60, 0x93, 0xe6, 0x66, 0x47, 0x55, 0x86,
  0x47, 0x57, 0x27, 0x57, 0x46, 0x94, 0xd6, 0xb6, 0xc1, 0x48, 0xe8, 0x80,
  0x18, 0x83, 0x32, 0x78, 0x36, 0x0c, 0xda, 0x1c, 0xd4, 0xc1, 0x04, 0x81,
  0xf9, 0x36, 0x10, 0x49, 0x46, 0x2c, 0x1b, 0x04, 0x0d, 0x0f, 0x36, 0x2c,
  0x8b, 0x18, 0xa4, 0x81, 0x1a, 0xb8, 0xc1, 0x1b, 0xc0, 0x41, 0x1c, 0xd8,
  0xc1, 0x1d, 0xe4, 0xc1, 0x04, 0x01, 0x22, 0x36, 0x00, 0x1b, 0x86, 0x85,
  0x0f, 0xf8, 0x60, 0x43, 0xd0, 0x07, 0x1b, 0x86, 0x61, 0x0f, 0xfc, 0x80,
  0x44, 0x5b, 0x58, 0x9a, 0xdb, 0x86, 0x61, 0x0c, 0xc6, 0x60, 0xd8, 0x20,
  0x18, 0xa1, 0xb0, 0xa1, 0xd8, 0x03, 0x50, 0x00, 0xc2, 0x40, 0x14, 0xaa,
  0xb0, 0xb1, 0xd9, 0xb5, 0xb9, 0xa4, 0x91, 0x95, 0xb9, 0xd1, 0x4d, 0x09,
  0x82, 0x2a, 0x64, 0x78, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
  0x53, 0x02, 0xa2, 0x09, 0x19, 0x9e, 0x8b, 0x5d, 0x18, 0x9b, 0x5d, 0x99,
  0xdc, 0x94, 0xc0, 0xa8, 0x43, 0x86, 0xe7, 0x32, 0x87, 0x16, 0x46, 0x56,
  0x26, 0xd7, 0xf4, 0x46, 0x56, 0xc6, 0x36, 0x25, 0x48, 0xca, 0x90, 0xe1,
  0xb9, 0xc8, 0x95, 0xcd, 0xbd, 0xd5, 0xc9, 0x8d, 0x95, 0xcd, 0x4d, 0x09,
  0xc0, 0xa0, 0x12, 0x19, 0x9e, 0x0b, 0x5d, 0x1e, 0x5c, 0x59, 0x90, 0x9b,
  0xdb, 0x1b, 0x5d, 0x18, 0x5d, 0xda, 0x9b, 0xdb, 0xdc, 0x14, 0x21, 0x0f,
  0xfc, 0xa0, 0x0e, 0x19, 0x9e, 0x4b, 0x99, 0x1b, 0x9d, 0x5c, 0x1e, 0xd4,
  0x5b, 0x9a, 0x1b, 0xdd, 0xdc, 0x94, 0x40, 0x14, 0x00, 0x00, 0x00, 0x00,
  0x79, 0x18, 0x00, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x33, 0x08, 0x80, 0x1c,
  0xc4, 0xe1, 0x1c, 0x66, 0x14, 0x01, 0x3d, 0x88, 0x43, 0x38, 0x84, 0xc3,
  0x8c, 0x42, 0x80, 0x07, 0x79, 0x78, 0x07, 0x73, 0x98, 0x71, 0x0c, 0xe6,
  0x00, 0x0f, 0xed, 0x10, 0x0e, 0xf4, 0x80, 0x0e, 0x33, 0x0c, 0x42, 0x1e,
  0xc2, 0xc1, 0x1d, 0xce, 0xa1, 0x1c, 0x66, 0x30, 0x05, 0x3d, 0x88, 0x43,
  0x38, 0x84, 0x83, 0x1b, 0xcc, 0x03, 0x3d, 0xc8, 0x43, 0x3d, 0x8c, 0x03,
  0x3d, 0xcc, 0x78, 0x8c, 0x74, 0x70, 0x07, 0x7b, 0x08, 0x07, 0x79, 0x48,
  0x87, 0x70, 0x70, 0x07, 0x7a, 0x70, 0x03, 0x76, 0x78, 0x87, 0x70, 0x20,
  0x87, 0x19, 0xcc, 0x11, 0x0e, 0xec, 0x90, 0x0e, 0xe1, 0x30, 0x0f, 0x6e,
  0x30, 0x0f, 0xe3, 0xf0, 0x0e, 0xf0, 0x50, 0x0e, 0x33, 0x10, 0xc4, 0x1d,
  0xde, 0x21, 0x1c, 0xd8, 0x21, 0x1d, 0xc2, 0x61, 0x1e, 0x66, 0x30, 0x89,
  0x3b, 0xbc, 0x83, 0x3b, 0xd0, 0x43, 0x39, 0xb4, 0x03, 0x3c, 0xbc, 0x83,
  0x3c, 0x84, 0x03, 0x3b, 0xcc, 0xf0, 0x14, 0x76, 0x60, 0x07, 0x7b, 0x68,
  0x07, 0x37, 0x68, 0x87, 0x72, 0x68, 0x07, 0x37, 0x80, 0x87, 0x70, 0x90,
  0x87, 0x70, 0x60, 0x07, 0x76, 0x28, 0x07, 0x76, 0xf8, 0x05, 0x76, 0x78,
  0x87, 0x77, 0x80, 0x87, 0x5f, 0x08, 0x87, 0x71, 0x18, 0x87, 0x72, 0x98,
  0x87, 0x79, 0x98, 0x81, 0x2c, 0xee, 0xf0, 0x0e, 0xee, 0xe0, 0x0e, 0xf5,
  0xc0, 0x0e, 0xec, 0x30, 0x03, 0x62, 0xc8, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c,
  0xcc, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xdc, 0x61, 0x1c, 0xca, 0x21, 0x1c,
  0xc4, 0x81, 0x1d, 0xca, 0x61, 0x06, 0xd6, 0x90, 0x43, 0x39, 0xc8, 0x43,
  0x39, 0x98, 0x43, 0x39, 0xc8, 0x43, 0x39, 0xb8, 0xc3, 0x38, 0x94, 0x43,
  0x38, 0x88, 0x03, 0x3b, 0x94, 0xc3, 0x2f, 0xbc, 0x83, 0x3c, 0xfc, 0x82,
  0x3b, 0xd4, 0x03, 0x3b, 0xb0, 0xc3, 0x8c, 0xcc, 0x21, 0x07, 0x7c, 0x70,
  0x03, 0x74, 0x60, 0x07, 0x37, 0x90, 0x87, 0x72, 0x98, 0x87, 0x77, 0xa8,
  0x07, 0x79, 0x18, 0x87, 0x72, 0x70, 0x83, 0x70, 0xa0, 0x07, 0x7a, 0x90,
  0x87, 0x74, 0x10, 0x87, 0x7a, 0xa0, 0x87, 0x72, 0x00, 0x00, 0x00, 0x00,
  0x71, 0x20, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x66, 0xb0, 0x0d, 0x97,
  0xef, 0x3c, 0xbe, 0x10, 0x50, 0x45, 0x41, 0x44, 0xa5, 0x03, 0x0c, 0x25,
  0x61, 0x00, 0x02, 0xe6, 0x17, 0xb7, 0x6d, 0x07, 0xdb, 0x70, 0xf9, 0xce,
  0xe3, 0x0b, 0x01, 0x55, 0x14, 0x44, 0x54, 0x3a, 0xc0, 0x50, 0x12, 0x06,
  0x20, 0x60, 0x3e, 0x72, 0xdb, 0x86, 0x50, 0x0d, 0x97, 0xef, 0x3c, 0xbe,
  0x04, 0x30, 0xcf, 0x42, 0x94, 0x44, 0x45, 0x2c, 0x7e, 0x71, 0xdb, 0x96,
  0x60, 0x0d, 0x97, 0xef, 0x3c, 0xfe, 0x44, 0x5c, 0x13, 0x15, 0x11, 0xec,
  0xe4, 0x44, 0x84, 0x5f, 0xdc, 0x76, 0x01, 0x74, 0x81, 0xdf, 0xf9, 0x9b,
  0x76, 0xc3, 0xeb, 0x74, 0x20, 0x70, 0x66, 0xfd, 0x91, 0xa8, 0x65, 0x3c,
  0xbd, 0x2e, 0x2f, 0xcb, 0x88, 0xc0, 0x26, 0x10, 0x18, 0x34, 0x06, 0x69,
  0xb8, 0x7c, 0xe7, 0xf1, 0x85, 0x88, 0x00, 0x26, 0x22, 0x04, 0x9a, 0x61,
  0x21, 0xac, 0x40, 0x1a, 0x2e, 0xdf, 0x79, 0xfc, 0xe9, 0x88, 0x08, 0x60,
  0x10, 0x07, 0x1f, 0xb9, 0xed, 0x0a, 0x00, 0x83, 0xc0, 0xef, 0xfc, 0x7d,
  0xd7, 0xe9, 0xf0, 0x3a, 0x1d, 0x08, 0x9c, 0x59, 0x7f, 0x24, 0xe9, 0x95,
  0x5a, 0xc6, 0xd3, 0xeb, 0xf2, 0xb2, 0x8c, 0x08, 0x6c, 0x02, 0x81, 0x41,
  0x53, 0xa8, 0x86, 0xcb, 0x77, 0x1e, 0x7f, 0x22, 0xae, 0x89, 0x8a, 0x88,
  0xd2, 0x01, 0x06, 0xbf, 0xb8, 0x6d, 0x23, 0x20, 0x18, 0x00, 0x69, 0x6c,
  0x40, 0x10, 0x02, 0x5b, 0x70, 0x86, 0xcb, 0x77, 0x1e, 0x7f, 0x70, 0x26,
  0xdc, 0x2f, 0x6e, 0xbb, 0x04, 0xd4, 0x20, 0xf0, 0x6b, 0xa6, 0xe5, 0xf2,
  0xb7, 0xbc, 0x4c, 0x66, 0xa6, 0xdd, 0xe5, 0xb0, 0x7c, 0x1a, 0x6e, 0xc3,
  0xd9, 0x65, 0x39, 0x10, 0x38, 0xab, 0x4e, 0xc3, 0x6d, 0x38, 0xbb, 0x2c,
  0x9f, 0xd2, 0xc3, 0xf4, 0x32, 0x10, 0x18, 0x04, 0x61, 0x20, 0x00, 0x00,
  0xea, 0x00, 0x00, 0x00, 0x13, 0x04, 0x49, 0x2c, 0x10, 0x00, 0x00, 0x00,
  0x24, 0x00, 0x00, 0x00, 0x44, 0x95, 0x47, 0x11, 0x94, 0xc1, 0x08, 0x40,
  0x09, 0x50, 0x50, 0x86, 0x01, 0x05, 0x57, 0x84, 0x01, 0x35, 0x50, 0x76,
  0xa5, 0x1b, 0x50, 0x7c, 0x25, 0x37, 0x03, 0x40, 0xc0, 0x18, 0x81, 0xb8,
  0x93, 0x2a, 0xfc, 0x8d, 0x11, 0xe4, 0x7c, 0x0e, 0xb2, 0xdf, 0x18, 0x01,
  0x08, 0x82, 0x20, 0xfe, 0x8d, 0x11, 0xfc, 0xf1, 0xee, 0xe7, 0xde, 0x18,
  0xc1, 0xc9, 0xda, 0x72, 0xf8, 0x8d, 0x11, 0xd0, 0x6c, 0xef, 0xfa, 0xde,
  0x18, 0x01, 0x08, 0x82, 0x20, 0xff, 0x8d, 0x11, 0xe0, 0x6d, 0xef, 0xfa,
  0xde, 0x18, 0x41, 0x4d, 0xa3, 0x2c, 0xfb, 0x8d, 0x11, 0x8c, 0xbd, 0x5e,
  0x9e, 0xdf, 0x18, 0x01, 0xfc, 0xfe, 0x3b, 0xf9, 0x8d, 0x11, 0xd4, 0xf5,
  0x9e, 0xc7, 0xdf, 0x18, 0x41, 0x4a, 0xa2, 0x7a, 0xef, 0x8d, 0x11, 0x8c,
  0x65, 0xea, 0x8b, 0xdf, 0x18, 0x81, 0x69, 0x93, 0xf1, 0xfc, 0x8d, 0x11,
  0xe0, 0xb8, 0x4c, 0xba, 0xdf, 0x18, 0x01, 0x3d, 0xdb, 0x3d, 0xfa, 0xcd,
  0x00, 0x8c, 0x00, 0x00, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0x06,
  0x77, 0x50, 0x75, 0x72, 0x20, 0x07, 0x6b, 0x30, 0x62, 0x90, 0x00, 0x20,
  0x08, 0x06, 0x66, 0x80, 0x07, 0xd6, 0x37, 0x07, 0x73, 0xc0, 0x06, 0x23,
  0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0x06, 0x79, 0x70, 0x85, 0x01, 0x1d,
  0xd0, 0x41, 0x1b, 0x8c, 0x18, 0x24, 0x00, 0x08, 0x82, 0x81, 0x19, 0xe8,
  0x01, 0x36, 0x06, 0x75, 0x50, 0x07, 0x6e, 0x30, 0x62, 0x60, 0x00, 0x20,
  0x08, 0x06, 0x91, 0x28, 0x6c, 0x76, 0x30, 0x62, 0x60, 0x00, 0x20, 0x08,
  0x06, 0xd1, 0x28, 0x70, 0x7b, 0x30, 0xdc, 0x20, 0xe0, 0x41, 0x18, 0x0c,
  0x37, 0x08, 0x79, 0x10, 0x06, 0x25, 0x04, 0x3a, 0x62, 0x70, 0x00, 0x20,
  0x08, 0x06, 0x5a, 0x29, 0x84, 0x81, 0xb1, 0x07, 0xa3, 0x09, 0x01, 0x50,
  0x01, 0x19, 0xc0, 0x70, 0x03, 0x12, 0x90, 0x41, 0x15, 0x81, 0x8e, 0x26,
  0x14, 0x41, 0x05, 0x68, 0x00, 0xc3, 0x0d, 0x4b, 0x40, 0x06, 0x45, 0x04,
  0x3a, 0xcb, 0x80, 0x04, 0x41, 0x35, 0xce, 0x0e, 0x37, 0x04, 0xa5, 0x00,
  0x06, 0xb3, 0x0c, 0x88, 0x10, 0x0c, 0x37, 0x40, 0x09, 0x18, 0x0c, 0x37,
  0x40, 0xa7, 0x00, 0x06, 0x15, 0x08, 0x3a, 0xcb, 0x80, 0x0c, 0xc1, 0x70,
  0xc3, 0x94, 0x0a, 0x60, 0x30, 0xdc, 0x30, 0x25, 0x60, 0x50, 0x42, 0xa0,
  0xb3, 0x0c, 0x08, 0x11, 0x94, 0x21, 0xe8, 0x2c, 0x03, 0x52, 0x04, 0xb3,
  0x0c, 0x88, 0x41, 0xcc, 0x32, 0x20, 0xc7, 0x31, 0xdd, 0xf0, 0x81, 0x81,
  0x31, 0xdd, 0x20, 0x06, 0xdf, 0x31, 0xdd, 0x00, 0x06, 0x1e, 0x32, 0xdd,
  0x50, 0x06, 0x5f, 0x32, 0x4b, 0x80, 0x0c, 0x14, 0x01, 0xe4, 0x00, 0x88,
  0x43, 0xe0, 0x0a, 0x82, 0x2b, 0x0c, 0xe0, 0x40, 0x98, 0x42, 0x81, 0x0a,
  0x06, 0x72, 0x0c, 0x14, 0x01, 0xb2, 0x00, 0xd0, 0x42, 0x20, 0x0a, 0x82,
  0x2d, 0x0c, 0xa2, 0x40, 0x98, 0x42, 0x21, 0x0a, 0x06, 0x72, 0x0c, 0x14,
  0x01, 0xb4, 0x00, 0xd8, 0x42, 0x80, 0x0b, 0x02, 0x29, 0x0c, 0xa4, 0x40,
  0xb8, 0x42, 0x81, 0x0a, 0x06, 0x72, 0x0c, 0x14, 0x01, 0xe4, 0x00, 0x88,
  0x43, 0x60, 0x0a, 0x82, 0x29, 0x0c, 0xa6, 0x40, 0xc8, 0x42, 0x61, 0x0a,
  0x06, 0x72, 0xdc, 0x07, 0xd4, 0x7d, 0x40, 0x99, 0x10, 0x07, 0xf0, 0x31,
  0x41, 0x0e, 0xe0, 0x33, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x17, 0x39,
  0xfc, 0x01, 0x19, 0xe4, 0xc2, 0x68, 0x42, 0x20, 0x8c, 0x26, 0x08, 0x83,
  0x09, 0x85, 0x7c, 0x4c, 0x28, 0xe4, 0x33, 0x62, 0xf0, 0x00, 0x20, 0x08,
  0x06, 0xdd, 0x39, 0x88, 0xc2, 0x1a, 0xa8, 0x81, 0x10, 0xb8, 0x81, 0x1b,
  0x80, 0x02, 0x28, 0x80, 0x42, 0x1b, 0x8c, 0x26, 0x04, 0x80, 0x2d, 0x7b,
  0x00, 0x1f, 0x5b, 0xfa, 0x00, 0x3e, 0x86, 0x08, 0xf2, 0x31, 0x44, 0x90,
  0xcf, 0x88, 0xc1, 0x03, 0x80, 0x20, 0x18, 0x74, 0xed, 0x80, 0x0a, 0x71,
  0x00, 0x07, 0x42, 0x40, 0x07, 0x74, 0x60, 0x0a, 0xa6, 0x60, 0x0a, 0x73,
  0x30, 0x9a, 0x10, 0x00, 0x16, 0x89, 0x02, 0x7c, 0x2c, 0x12, 0x05, 0xf8,
  0x98, 0x23, 0xc8, 0xc7, 0x1c, 0x41, 0x3e, 0x23, 0x06, 0x0f, 0x00, 0x82,
  0x60, 0xd0, 0xcd, 0x83, 0x2b, 0xdc, 0x81, 0x1d, 0x08, 0x81, 0x1e, 0xe8,
  0x01, 0x2b, 0xb0, 0x02, 0x2b, 0xe4, 0xc1, 0x68, 0x42, 0x00, 0x94, 0x1d,
  0xc0, 0x03, 0x94, 0x1d, 0xc4, 0x03, 0x8c, 0x18, 0x34, 0x00, 0x08, 0x82,
  0x41, 0x18, 0xd4, 0x83, 0x2d, 0xec, 0x81, 0x3b, 0x08, 0x01, 0x2c, 0xc0,
  0x02, 0x2c, 0xc0, 0xc2, 0x68, 0x42, 0x00, 0x8c, 0x18, 0x34, 0x00, 0x08,
  0x82, 0xc1, 0x18, 0xd8, 0x43, 0x2e, 0x44, 0x4b, 0x11, 0x7c, 0x5e, 0xc7,
  0x8d, 0x18, 0x38, 0x00, 0x08, 0x82, 0xc1, 0x97, 0x0f, 0xbb, 0xf0, 0x07,
  0x7b, 0xa0, 0x07, 0xb3, 0x10, 0x04, 0x41, 0x00, 0x0e, 0x18, 0x0e, 0x04,
  0x3b, 0x00, 0x00, 0x00, 0x56, 0xd4, 0x99, 0x48, 0x14, 0x39, 0x11, 0x31,
  0x94, 0x48, 0x43, 0x00, 0x11, 0x0b, 0x30, 0xcf, 0x42, 0x44, 0xbf, 0x04,
  0x30, 0xcf, 0x42, 0x44, 0x46, 0x57, 0xf8, 0x48, 0x6d, 0xd3, 0x76, 0x57,
  0xf8, 0x08, 0x6d, 0xdf, 0x86, 0x57, 0xf8, 0x48, 0x6d, 0xe3, 0x96, 0x57,
  0xf8, 0x08, 0x6d, 0xe7, 0xa6, 0x57, 0xf8, 0x48, 0x6d, 0xeb, 0xd6, 0x57,
  0xf8, 0x08, 0x6d, 0xef, 0xe6, 0x57, 0xf8, 0x48, 0x6d, 0xf3, 0xe6, 0x45,
  0xf8, 0x3e, 0x42, 0xdb, 0x17, 0xe1, 0xfb, 0x48, 0x6d, 0x43, 0x8f, 0xf1,
  0x3b, 0xd4, 0xf4, 0x50, 0xd3, 0xef, 0x6a, 0xef, 0x6f, 0x0f, 0x06, 0x46,
  0xf8, 0x3e, 0x62, 0x5b, 0x18, 0xe1, 0xfb, 0xc8, 0x6d, 0x44, 0x92, 0xf1,
  0x23, 0xcd, 0x43, 0x4d, 0xff, 0x44, 0x5c, 0x13, 0x15, 0x11, 0xbf, 0x3d,
  0x98, 0x18, 0x63, 0x11, 0x88, 0x71, 0x4c, 0x92, 0x4f, 0xfb, 0x08, 0x6d,
  0x46, 0x8a, 0x10, 0xfc, 0x42, 0x40, 0x15, 0x05, 0x11, 0xd9, 0x18, 0x63,
  0x11, 0x88, 0x71, 0x4c, 0x92, 0x4f, 0xfb, 0x48, 0x6d, 0x64, 0x8c, 0x45,
  0x20, 0xc6, 0x31, 0x49, 0x3e, 0xed, 0x23, 0xb6, 0x95, 0x31, 0x16, 0x81,
  0x18, 0xc7, 0x24, 0xf9, 0xb4, 0x8f, 0xdc, 0x66, 0x36, 0xf8, 0x08, 0x6d,
  0x67, 0x83, 0x8f, 0xd4, 0x86, 0x56, 0xf8, 0x08, 0x5d, 0xd7, 0x96, 0x56,
  0xf8, 0x48, 0x5d, 0xdb, 0xd6, 0x56, 0xf8, 0x08, 0x5d, 0xdf, 0xe6, 0x56,
  0xf8, 0x48, 0x5d, 0xe3, 0x16, 0x57, 0xf8, 0x08, 0x5d, 0xef, 0x26, 0x57,
  0xf8, 0x48, 0x5d, 0xf3, 0x36, 0x57, 0xf8, 0x08, 0x5d, 0xf7, 0xf6, 0xb7,
  0xb4, 0xc4, 0x35, 0x51, 0x11, 0x51, 0x3a, 0xc0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
