#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Pipeline Runtime Information: 
;
;
;
; Buffer Definitions:
;
; cbuffer cb
; {
;
;   struct cb
;   {
;
;       struct struct.CalculatePartialDerivativesConstantBuffer
;       {
;
;           uint2 textureDim;                         ; Offset:    0
;           float padding[2];                         ; Offset:   16
;       
;       } cb                                          ; Offset:    0
;
;   
;   } cb                                              ; Offset:    0 Size:    36
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; cb                                cbuffer      NA          NA     CB0            cb0     1
; g_inValue                         texture     f32          2d      T0             t0     1
; g_outValue                            UAV     f32          2d      U0             u0     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%"class.Texture2D<float>" = type { float, %"class.Texture2D<float>::mips_type" }
%"class.Texture2D<float>::mips_type" = type { i32 }
%"class.RWTexture2D<vector<float, 2> >" = type { <2 x float> }
%cb = type { %struct.CalculatePartialDerivativesConstantBuffer }
%struct.CalculatePartialDerivativesConstantBuffer = type { <2 x i32>, [2 x float] }
%dx.types.Handle = type { i8* }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }

@"\01?g_inValue@@3V?$Texture2D@M@@A" = external constant %"class.Texture2D<float>", align 4
@"\01?g_outValue@@3V?$RWTexture2D@V?$vector@M$01@@@@A" = external constant %"class.RWTexture2D<vector<float, 2> >", align 4
@cb = external constant %cb

define void @main() {
  %g_outValue_UAV_2d = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %g_inValue_texture_2d = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %cb_cbuffer = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %1 = call i32 @dx.op.threadId.i32(i32 93, i32 0)  ; ThreadId(component)
  %2 = call i32 @dx.op.threadId.i32(i32 93, i32 1)  ; ThreadId(component)
  %3 = alloca [2 x float], align 4
  %4 = alloca [2 x float], align 4
  %5 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %cb_cbuffer, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %6 = extractvalue %dx.types.CBufRet.i32 %5, 0
  %7 = extractvalue %dx.types.CBufRet.i32 %5, 1
  %.i0 = add i32 %6, -1
  %.i1 = add i32 %7, -1
  %.i128 = add i32 %2, -1
  %UMax = call i32 @dx.op.binary.i32(i32 39, i32 %1, i32 0)  ; UMax(a,b)
  %UMax3 = call i32 @dx.op.binary.i32(i32 39, i32 %.i128, i32 0)  ; UMax(a,b)
  %UMin = call i32 @dx.op.binary.i32(i32 40, i32 %UMax, i32 %.i0)  ; UMin(a,b)
  %UMin4 = call i32 @dx.op.binary.i32(i32 40, i32 %UMax3, i32 %.i1)  ; UMin(a,b)
  %.i132 = add i32 %2, 1
  %UMax6 = call i32 @dx.op.binary.i32(i32 39, i32 %.i132, i32 0)  ; UMax(a,b)
  %UMin8 = call i32 @dx.op.binary.i32(i32 40, i32 %UMax6, i32 %.i1)  ; UMin(a,b)
  %.i035 = add i32 %1, -1
  %UMax9 = call i32 @dx.op.binary.i32(i32 39, i32 %.i035, i32 0)  ; UMax(a,b)
  %UMax10 = call i32 @dx.op.binary.i32(i32 39, i32 %2, i32 0)  ; UMax(a,b)
  %UMin11 = call i32 @dx.op.binary.i32(i32 40, i32 %UMax9, i32 %.i0)  ; UMin(a,b)
  %UMin12 = call i32 @dx.op.binary.i32(i32 40, i32 %UMax10, i32 %.i1)  ; UMin(a,b)
  %.i039 = add i32 %1, 1
  %UMax13 = call i32 @dx.op.binary.i32(i32 39, i32 %.i039, i32 0)  ; UMax(a,b)
  %UMin15 = call i32 @dx.op.binary.i32(i32 40, i32 %UMax13, i32 %.i0)  ; UMin(a,b)
  %TextureLoad = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %g_inValue_texture_2d, i32 0, i32 %1, i32 %2, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %8 = extractvalue %dx.types.ResRet.f32 %TextureLoad, 0
  %TextureLoad17 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %g_inValue_texture_2d, i32 0, i32 %UMin11, i32 %UMin12, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %9 = extractvalue %dx.types.ResRet.f32 %TextureLoad17, 0
  %TextureLoad18 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %g_inValue_texture_2d, i32 0, i32 %UMin, i32 %UMin4, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %10 = extractvalue %dx.types.ResRet.f32 %TextureLoad18, 0
  %.i041 = fsub fast float %8, %9
  %.i142 = fsub fast float %8, %10
  %TextureLoad19 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %g_inValue_texture_2d, i32 0, i32 %UMin15, i32 %UMin12, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %11 = extractvalue %dx.types.ResRet.f32 %TextureLoad19, 0
  %TextureLoad20 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %g_inValue_texture_2d, i32 0, i32 %UMin, i32 %UMin8, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %12 = extractvalue %dx.types.ResRet.f32 %TextureLoad20, 0
  %.i043 = fsub fast float %11, %8
  %.i144 = fsub fast float %12, %8
  %13 = getelementptr inbounds [2 x float], [2 x float]* %3, i32 0, i32 0
  store float %.i041, float* %13, align 4
  %14 = getelementptr inbounds [2 x float], [2 x float]* %3, i32 0, i32 1
  store float %.i043, float* %14, align 4
  %15 = getelementptr inbounds [2 x float], [2 x float]* %4, i32 0, i32 0
  store float %.i142, float* %15, align 4
  %16 = getelementptr inbounds [2 x float], [2 x float]* %4, i32 0, i32 1
  store float %.i144, float* %16, align 4
  %.i045 = fsub fast float -0.000000e+00, %.i041
  %.i146 = fsub fast float -0.000000e+00, %.i043
  %FAbs23 = call float @dx.op.unary.f32(i32 6, float %.i045)  ; FAbs(value)
  %FAbs24 = call float @dx.op.unary.f32(i32 6, float %.i146)  ; FAbs(value)
  %17 = fcmp fast olt float %FAbs24, %FAbs23
  %18 = zext i1 %17 to i32
  %.i047 = fsub fast float -0.000000e+00, %.i142
  %.i148 = fsub fast float -0.000000e+00, %.i144
  %FAbs = call float @dx.op.unary.f32(i32 6, float %.i047)  ; FAbs(value)
  %FAbs22 = call float @dx.op.unary.f32(i32 6, float %.i148)  ; FAbs(value)
  %19 = fcmp fast olt float %FAbs22, %FAbs
  %20 = zext i1 %19 to i32
  %21 = getelementptr [2 x float], [2 x float]* %3, i32 0, i32 %18
  %22 = load float, float* %21, align 4, !tbaa !31
  %23 = getelementptr [2 x float], [2 x float]* %4, i32 0, i32 %20
  %24 = load float, float* %23, align 4, !tbaa !31
  %.i049 = fcmp fast ogt float %22, 0.000000e+00
  %.i150 = fcmp fast ogt float %24, 0.000000e+00
  %.i051 = fcmp fast olt float %22, 0.000000e+00
  %.i152 = fcmp fast olt float %24, 0.000000e+00
  %.i053 = zext i1 %.i049 to i32
  %.i154 = zext i1 %.i150 to i32
  %.i055 = zext i1 %.i051 to i32
  %.i156 = zext i1 %.i152 to i32
  %.i057 = sub nsw i32 %.i053, %.i055
  %.i158 = sub nsw i32 %.i154, %.i156
  %.i059 = sitofp i32 %.i057 to float
  %.i160 = sitofp i32 %.i158 to float
  %FAbs25 = call float @dx.op.unary.f32(i32 6, float %22)  ; FAbs(value)
  %FAbs26 = call float @dx.op.unary.f32(i32 6, float %24)  ; FAbs(value)
  %FMin = call float @dx.op.binary.f32(i32 36, float %FAbs25, float 1.000000e+00)  ; FMin(a,b)
  %FMin21 = call float @dx.op.binary.f32(i32 36, float %FAbs26, float 1.000000e+00)  ; FMin(a,b)
  %.i061 = fmul fast float %.i059, %FMin
  %.i162 = fmul fast float %.i160, %FMin21
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %g_outValue_UAV_2d, i32 %1, i32 %2, i32 undef, float %.i061, float %.i162, float %.i061, float %.i061, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadId.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind
declare void @dx.op.textureStore.f32(i32, %dx.types.Handle, i32, i32, i32, float, float, float, float, i8) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #1

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.typeAnnotations = !{!12, !24}
!dx.entryPoints = !{!28}

!0 = !{!"dxc 1.2"}
!1 = !{i32 1, i32 3}
!2 = !{i32 1, i32 4}
!3 = !{!"cs", i32 6, i32 3}
!4 = !{!5, !8, !10, null}
!5 = !{!6}
!6 = !{i32 0, %"class.Texture2D<float>"* undef, !"g_inValue", i32 0, i32 0, i32 1, i32 2, i32 0, !7}
!7 = !{i32 0, i32 9}
!8 = !{!9}
!9 = !{i32 0, %"class.RWTexture2D<vector<float, 2> >"* undef, !"g_outValue", i32 0, i32 0, i32 1, i32 2, i1 false, i1 false, i1 false, !7}
!10 = !{!11}
!11 = !{i32 0, %cb* undef, !"cb", i32 0, i32 0, i32 1, i32 36, null}
!12 = !{i32 0, %"class.Texture2D<float>" undef, !13, %"class.Texture2D<float>::mips_type" undef, !16, %"class.RWTexture2D<vector<float, 2> >" undef, !18, %struct.CalculatePartialDerivativesConstantBuffer undef, !19, %cb undef, !22}
!13 = !{i32 8, !14, !15}
!14 = !{i32 6, !"h", i32 3, i32 0, i32 7, i32 9}
!15 = !{i32 6, !"mips", i32 3, i32 4}
!16 = !{i32 4, !17}
!17 = !{i32 6, !"handle", i32 3, i32 0, i32 7, i32 5}
!18 = !{i32 8, !14}
!19 = !{i32 36, !20, !21}
!20 = !{i32 6, !"textureDim", i32 3, i32 0, i32 7, i32 5}
!21 = !{i32 6, !"padding", i32 3, i32 16, i32 7, i32 9}
!22 = !{i32 36, !23}
!23 = !{i32 6, !"cb", i32 3, i32 0}
!24 = !{i32 1, void ()* @main, !25}
!25 = !{!26}
!26 = !{i32 0, !27, !27}
!27 = !{}
!28 = !{void ()* @main, !"main", null, !4, !29}
!29 = !{i32 4, !30}
!30 = !{i32 8, i32 8, i32 1}
!31 = !{!32, !32, i64 0}
!32 = !{!"float", !33, i64 0}
!33 = !{!"omnipotent char", !34, i64 0}
!34 = !{!"Simple C/C++ TBAA"}

#endif

const unsigned char g_pCalculatePartialDerivativesViaCentralDifferencesCS[] = {
  0x44, 0x58, 0x42, 0x43, 0x94, 0xa3, 0x1f, 0x30, 0x91, 0x00, 0x3a, 0x5f,
  0x3e, 0x71, 0x12, 0x6d, 0x72, 0x75, 0x76, 0x95, 0x01, 0x00, 0x00, 0x00,
  0x20, 0x0d, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00,
  0x44, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00,
  0xd8, 0x00, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x4f, 0x53, 0x47, 0x31, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x50, 0x53, 0x56, 0x30, 0x6c, 0x00, 0x00, 0x00,
  0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x44, 0x58, 0x49, 0x4c, 0x40, 0x0c, 0x00, 0x00, 0x63, 0x00, 0x05, 0x00,
  0x10, 0x03, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4c, 0x03, 0x01, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x28, 0x0c, 0x00, 0x00, 0x42, 0x43, 0xc0, 0xde,
  0x21, 0x0c, 0x00, 0x00, 0x07, 0x03, 0x00, 0x00, 0x0b, 0x82, 0x20, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91,
  0x41, 0xc8, 0x04, 0x49, 0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0c,
  0x25, 0x05, 0x08, 0x19, 0x1e, 0x04, 0x8b, 0x62, 0x80, 0x18, 0x45, 0x02,
  0x42, 0x92, 0x0b, 0x42, 0xc4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4b,
  0x0a, 0x32, 0x62, 0x88, 0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xa5,
  0x00, 0x19, 0x32, 0x42, 0xe4, 0x48, 0x0e, 0x90, 0x11, 0x23, 0xc4, 0x50,
  0x41, 0x51, 0x81, 0x8c, 0xe1, 0x83, 0xe5, 0x8a, 0x04, 0x31, 0x46, 0x06,
  0x51, 0x18, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x1b, 0x8c, 0xe0, 0xff,
  0xff, 0xff, 0xff, 0x07, 0x40, 0x02, 0xa8, 0x0d, 0x86, 0xf0, 0xff, 0xff,
  0xff, 0xff, 0x03, 0x20, 0x01, 0xd5, 0x06, 0x62, 0xf8, 0xff, 0xff, 0xff,
  0xff, 0x01, 0x90, 0x00, 0x49, 0x18, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x13, 0x82, 0x60, 0x42, 0x20, 0x4c, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00,
  0x89, 0x20, 0x00, 0x00, 0x5f, 0x00, 0x00, 0x00, 0x32, 0x22, 0x88, 0x09,
  0x20, 0x64, 0x85, 0x04, 0x13, 0x23, 0xa4, 0x84, 0x04, 0x13, 0x23, 0xe3,
  0x84, 0xa1, 0x90, 0x14, 0x12, 0x4c, 0x8c, 0x8c, 0x0b, 0x84, 0xc4, 0x4c,
  0x10, 0xa8, 0xc1, 0x0c, 0xc0, 0x1c, 0x01, 0x18, 0xcc, 0x14, 0x06, 0xe3,
  0xc0, 0x0e, 0xe1, 0x30, 0x0f, 0xf3, 0xe0, 0x06, 0xb4, 0x50, 0x0e, 0xf8,
  0x40, 0x0f, 0xf5, 0x20, 0x0f, 0xe5, 0x20, 0x07, 0xa4, 0xc0, 0x07, 0xe6,
  0xc0, 0x0e, 0xef, 0x10, 0x0e, 0xf4, 0xe0, 0x07, 0x7a, 0xa0, 0x07, 0xed,
  0x90, 0x0e, 0xf0, 0x30, 0x0f, 0xbf, 0x40, 0x0f, 0xf9, 0x00, 0x0f, 0xe5,
  0x80, 0x82, 0x60, 0x26, 0x6b, 0x1c, 0xd8, 0x21, 0x1c, 0xe6, 0x61, 0x1e,
  0xdc, 0x80, 0x16, 0xca, 0x01, 0x1f, 0xe8, 0xa1, 0x1e, 0xe4, 0xa1, 0x1c,
  0xe4, 0x80, 0x14, 0xf8, 0xc0, 0x1c, 0xd8, 0xe1, 0x1d, 0xc2, 0x81, 0x1e,
  0xfc, 0x00, 0x09, 0x80, 0x40, 0xc3, 0x30, 0x82, 0x00, 0xcc, 0x44, 0x06,
  0xe3, 0xc0, 0x0e, 0xe1, 0x30, 0x0f, 0xf3, 0xe0, 0x06, 0xb2, 0x70, 0x0b,
  0xb4, 0x50, 0x0e, 0xf8, 0x40, 0x0f, 0xf5, 0x20, 0x0f, 0xe5, 0x20, 0x07,
  0xa4, 0xc0, 0x07, 0xf6, 0x50, 0x0e, 0xe3, 0x40, 0x0f, 0xef, 0x20, 0x0f,
  0x7c, 0x60, 0x0e, 0xec, 0xf0, 0x0e, 0xe1, 0x40, 0x0f, 0x6c, 0x00, 0x06,
  0x72, 0xe0, 0x07, 0x60, 0xe0, 0x07, 0x28, 0x28, 0xc8, 0x18, 0x46, 0x10,
  0x82, 0x14, 0x00, 0x0e, 0x0e, 0xa4, 0x29, 0xa2, 0x84, 0xc9, 0xe7, 0x80,
  0x45, 0xa0, 0x16, 0x60, 0x22, 0x52, 0x20, 0x9a, 0x10, 0x60, 0xe9, 0x88,
  0x08, 0xa9, 0x80, 0x09, 0xa9, 0x08, 0x89, 0x73, 0x1a, 0x69, 0x02, 0x9a,
  0x69, 0xa3, 0x8a, 0x82, 0x88, 0x90, 0x80, 0x24, 0x27, 0x08, 0x01, 0x0a,
  0x14, 0x5a, 0x46, 0x00, 0x4a, 0xd0, 0x90, 0x53, 0x86, 0x20, 0x08, 0x08,
  0x3a, 0x6a, 0xb8, 0xfc, 0x09, 0x7b, 0x08, 0xc9, 0xe7, 0x36, 0xaa, 0x58,
  0x89, 0xc9, 0x47, 0x6e, 0x1b, 0x11, 0x41, 0x10, 0x04, 0x73, 0x04, 0x08,
  0x4d, 0xf7, 0x0c, 0x97, 0x3f, 0x61, 0x0f, 0x21, 0xf9, 0x21, 0xd0, 0x0c,
  0x0b, 0x81, 0x02, 0xaa, 0x10, 0x52, 0x50, 0x05, 0x64, 0x15, 0x22, 0x08,
  0x82, 0x80, 0xb0, 0x9b, 0x86, 0xcb, 0x9f, 0xb0, 0x87, 0x90, 0xfc, 0x95,
  0x90, 0x56, 0x62, 0xf2, 0x8b, 0xdb, 0x46, 0x05, 0x00, 0x00, 0x40, 0x50,
  0x14, 0x2d, 0xa8, 0x82, 0x20, 0x08, 0x82, 0x20, 0xa0, 0xad, 0x10, 0x40,
  0x00, 0x00, 0xd4, 0x95, 0x01, 0x08, 0x00, 0xfa, 0xca, 0xd2, 0x04, 0x55,
  0x10, 0x04, 0x00, 0x00, 0x00, 0x13, 0x85, 0x73, 0x04, 0x41, 0x31, 0xaa,
  0x60, 0x0a, 0x82, 0x91, 0xc8, 0x81, 0x00, 0x4a, 0x08, 0x98, 0x23, 0x00,
  0x05, 0x00, 0x00, 0x00, 0x13, 0x14, 0x72, 0xc0, 0x87, 0x74, 0x60, 0x87,
  0x36, 0x68, 0x87, 0x79, 0x68, 0x03, 0x72, 0xc0, 0x87, 0x0d, 0xaf, 0x50,
  0x0e, 0x6d, 0xd0, 0x0e, 0x7a, 0x50, 0x0e, 0x6d, 0x00, 0x0f, 0x7a, 0x30,
  0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x71, 0xa0,
  0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x78, 0xa0, 0x07, 0x73, 0x20,
  0x07, 0x6d, 0x90, 0x0e, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0,
  0x06, 0xe9, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90,
  0x0e, 0x76, 0x40, 0x07, 0x7a, 0x60, 0x07, 0x74, 0xd0, 0x06, 0xe6, 0x10,
  0x07, 0x76, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x60, 0x0e, 0x73, 0x20,
  0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe6, 0x60, 0x07, 0x74, 0xa0,
  0x07, 0x76, 0x40, 0x07, 0x6d, 0xe0, 0x0e, 0x78, 0xa0, 0x07, 0x71, 0x60,
  0x07, 0x7a, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x3a, 0x0f,
  0x84, 0x90, 0x21, 0x23, 0x45, 0x44, 0x00, 0xce, 0x00, 0x80, 0x69, 0x03,
  0x00, 0xe6, 0x0e, 0x00, 0x60, 0xc8, 0xe3, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x90, 0x07, 0x02, 0x02, 0x20, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x21, 0x8f, 0x05, 0x04, 0x80,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x1e, 0x0c, 0x08,
  0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x1b,
  0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x79,
  0x3a, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18,
  0xf2, 0x7c, 0x40, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x30, 0xe4, 0x09, 0x03, 0x20, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x18, 0xf2, 0x90, 0x01, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x64, 0x81, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00,
  0x32, 0x1e, 0x98, 0x18, 0x19, 0x11, 0x4c, 0x90, 0x8c, 0x09, 0x26, 0x47,
  0xc6, 0x04, 0x43, 0x0a, 0x4a, 0xa0, 0x0c, 0x0a, 0xa1, 0x18, 0x46, 0x00,
  0x8a, 0xa0, 0x24, 0x0a, 0xa9, 0x20, 0xca, 0xa1, 0x14, 0x0a, 0x84, 0xd2,
  0x11, 0x00, 0x1a, 0x47, 0x00, 0x88, 0x98, 0x01, 0x20, 0x63, 0x06, 0x80,
  0x8e, 0x19, 0x00, 0x52, 0x66, 0x00, 0x68, 0x99, 0x01, 0x20, 0x66, 0x06,
  0x80, 0x86, 0x19, 0x00, 0x12, 0x66, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00,
  0x81, 0x00, 0x00, 0x00, 0x1a, 0x03, 0x4c, 0x90, 0x46, 0x02, 0x13, 0xc4,
  0x83, 0x0c, 0x6f, 0x0c, 0x24, 0xc6, 0x45, 0x66, 0x43, 0x10, 0x4c, 0x10,
  0x02, 0x66, 0x82, 0x10, 0x34, 0x1b, 0x84, 0x81, 0x98, 0x20, 0x04, 0xce,
  0x06, 0x61, 0x30, 0x28, 0x8c, 0xcd, 0x4d, 0x10, 0x82, 0x67, 0xc3, 0x80,
  0x24, 0xc4, 0x04, 0x21, 0x80, 0x26, 0x08, 0x84, 0xc6, 0xe4, 0xec, 0x2b,
  0xcd, 0xcd, 0x2a, 0x8c, 0xad, 0xae, 0x6c, 0x82, 0x10, 0x44, 0x13, 0x84,
  0x40, 0xda, 0x20, 0x2c, 0xcf, 0x86, 0x64, 0x61, 0x9a, 0x65, 0x19, 0x9c,
  0x05, 0xda, 0x10, 0x44, 0x13, 0x84, 0x83, 0xa3, 0x72, 0xf6, 0xf5, 0x56,
  0x47, 0x67, 0x15, 0xc6, 0x56, 0x57, 0x36, 0x41, 0x18, 0x83, 0x6c, 0xc3,
  0xb2, 0x4c, 0xd4, 0xb2, 0x0c, 0x4e, 0x55, 0x55, 0xd0, 0x86, 0xc0, 0x9a,
  0x20, 0x30, 0x1f, 0x85, 0x31, 0xb1, 0x09, 0x42, 0x30, 0x6d, 0x40, 0x16,
  0x2c, 0x5b, 0x96, 0x41, 0x03, 0x36, 0x04, 0xdb, 0x06, 0x42, 0xba, 0x38,
  0x60, 0x82, 0x30, 0x80, 0xc1, 0x04, 0x21, 0xa0, 0x18, 0xa0, 0x4d, 0x10,
  0x82, 0x6a, 0x83, 0x91, 0x80, 0x01, 0xb1, 0x84, 0xc1, 0x43, 0xa2, 0x2d,
  0x0d, 0x6e, 0x6e, 0x03, 0x91, 0x8c, 0x01, 0x61, 0x6c, 0x18, 0x3e, 0x31,
  0x20, 0x83, 0x09, 0x82, 0x10, 0x06, 0x34, 0xd0, 0xc2, 0xdc, 0xc8, 0xd8,
  0xca, 0x26, 0x08, 0x81, 0xb5, 0xc1, 0x48, 0xce, 0x80, 0x58, 0xc2, 0x00,
  0x0d, 0x36, 0x08, 0x46, 0x1a, 0x4c, 0x10, 0x8c, 0x6d, 0x83, 0xf0, 0x89,
  0xc1, 0x04, 0x41, 0xe9, 0xa8, 0xd0, 0x95, 0xe1, 0xd1, 0xd5, 0xc9, 0x95,
  0x11, 0xa5, 0xb5, 0x6d, 0x30, 0x12, 0x37, 0x20, 0x96, 0x30, 0x40, 0x03,
  0x1e, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x13, 0x84, 0xe0, 0xda,
  0x60, 0x24, 0x70, 0x40, 0xc4, 0x41, 0x18, 0x3c, 0x1b, 0x06, 0xed, 0x0d,
  0xe4, 0x60, 0x82, 0xb0, 0x78, 0x1b, 0x88, 0x24, 0x23, 0x96, 0x0d, 0x82,
  0x56, 0x07, 0x1b, 0x96, 0xc5, 0x2b, 0x03, 0x33, 0x50, 0x83, 0x35, 0x60,
  0x83, 0x36, 0x98, 0x03, 0x3a, 0xb0, 0x83, 0x09, 0xc2, 0x33, 0x6c, 0x00,
  0x36, 0x0c, 0x4b, 0x1e, 0xe4, 0xc1, 0x86, 0x40, 0x0f, 0x36, 0x0c, 0x03,
  0x1e, 0xec, 0x01, 0x89, 0xb6, 0xb0, 0x34, 0xb7, 0x0d, 0xc3, 0xf7, 0x0d,
  0x1b, 0x04, 0xc3, 0x0f, 0x36, 0x14, 0x78, 0xd0, 0x07, 0x40, 0xf7, 0x07,
  0x2c, 0xcc, 0xd8, 0xde, 0xc2, 0xe8, 0xf8, 0xbc, 0xb5, 0xb9, 0xa5, 0xc1,
  0xbd, 0xd1, 0x95, 0xb9, 0xd1, 0x81, 0x8c, 0xa1, 0x85, 0xc9, 0x31, 0x9a,
  0x4a, 0x6b, 0x83, 0x63, 0x2b, 0x03, 0x19, 0x7a, 0x19, 0x5a, 0x59, 0x01,
  0xa1, 0x12, 0x0a, 0x0a, 0xda, 0x10, 0x8c, 0xc2, 0x04, 0x21, 0x0d, 0xb0,
  0x0d, 0x83, 0x28, 0x90, 0x42, 0x29, 0x6c, 0x18, 0x42, 0xc1, 0x14, 0x4a,
  0x61, 0xc3, 0x70, 0x0a, 0xa7, 0x50, 0x0a, 0x55, 0xd8, 0xd8, 0xec, 0xda,
  0x5c, 0xd2, 0xc8, 0xca, 0xdc, 0xe8, 0xa6, 0x04, 0x41, 0x15, 0x32, 0x3c,
  0x17, 0xbb, 0x32, 0xb9, 0xb9, 0xb4, 0x37, 0xb7, 0x29, 0x01, 0xd1, 0x84,
  0x0c, 0xcf, 0xc5, 0x2e, 0x8c, 0xcd, 0xae, 0x4c, 0x6e, 0x4a, 0x60, 0xd4,
  0x21, 0xc3, 0x73, 0x99, 0x43, 0x0b, 0x23, 0x2b, 0x93, 0x6b, 0x7a, 0x23,
  0x2b, 0x63, 0x9b, 0x12, 0x24, 0x65, 0xc8, 0xf0, 0x5c, 0xe4, 0xca, 0xe6,
  0xde, 0xea, 0xe4, 0xc6, 0xca, 0xe6, 0xa6, 0x04, 0x5c, 0x25, 0x32, 0x3c,
  0x17, 0xba, 0x3c, 0xb8, 0xb2, 0x20, 0x37, 0xb7, 0x37, 0xba, 0x30, 0xba,
  0xb4, 0x37, 0xb7, 0xb9, 0x29, 0x82, 0x1d, 0xec, 0x41, 0x1d, 0x32, 0x3c,
  0x97, 0x32, 0x37, 0x3a, 0xb9, 0x3c, 0xa8, 0xb7, 0x34, 0x37, 0xba, 0xb9,
  0x29, 0xc1, 0x1f, 0x00, 0x79, 0x18, 0x00, 0x00, 0x4c, 0x00, 0x00, 0x00,
  0x33, 0x08, 0x80, 0x1c, 0xc4, 0xe1, 0x1c, 0x66, 0x14, 0x01, 0x3d, 0x88,
  0x43, 0x38, 0x84, 0xc3, 0x8c, 0x42, 0x80, 0x07, 0x79, 0x78, 0x07, 0x73,
  0x98, 0x71, 0x0c, 0xe6, 0x00, 0x0f, 0xed, 0x10, 0x0e, 0xf4, 0x80, 0x0e,
  0x33, 0x0c, 0x42, 0x1e, 0xc2, 0xc1, 0x1d, 0xce, 0xa1, 0x1c, 0x66, 0x30,
  0x05, 0x3d, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1b, 0xcc, 0x03, 0x3d, 0xc8,
  0x43, 0x3d, 0x8c, 0x03, 0x3d, 0xcc, 0x78, 0x8c, 0x74, 0x70, 0x07, 0x7b,
  0x08, 0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07, 0x7a, 0x70, 0x03, 0x76,
  0x78, 0x87, 0x70, 0x20, 0x87, 0x19, 0xcc, 0x11, 0x0e, 0xec, 0x90, 0x0e,
  0xe1, 0x30, 0x0f, 0x6e, 0x30, 0x0f, 0xe3, 0xf0, 0x0e, 0xf0, 0x50, 0x0e,
  0x33, 0x10, 0xc4, 0x1d, 0xde, 0x21, 0x1c, 0xd8, 0x21, 0x1d, 0xc2, 0x61,
  0x1e, 0x66, 0x30, 0x89, 0x3b, 0xbc, 0x83, 0x3b, 0xd0, 0x43, 0x39, 0xb4,
  0x03, 0x3c, 0xbc, 0x83, 0x3c, 0x84, 0x03, 0x3b, 0xcc, 0xf0, 0x14, 0x76,
  0x60, 0x07, 0x7b, 0x68, 0x07, 0x37, 0x68, 0x87, 0x72, 0x68, 0x07, 0x37,
  0x80, 0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07, 0x76, 0x28, 0x07, 0x76,
  0xf8, 0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87, 0x5f, 0x08, 0x87, 0x71,
  0x18, 0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81, 0x2c, 0xee, 0xf0, 0x0e,
  0xee, 0xe0, 0x0e, 0xf5, 0xc0, 0x0e, 0xec, 0x30, 0x03, 0x62, 0xc8, 0xa1,
  0x1c, 0xe4, 0xa1, 0x1c, 0xcc, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xdc, 0x61,
  0x1c, 0xca, 0x21, 0x1c, 0xc4, 0x81, 0x1d, 0xca, 0x61, 0x06, 0xd6, 0x90,
  0x43, 0x39, 0xc8, 0x43, 0x39, 0x98, 0x43, 0x39, 0xc8, 0x43, 0x39, 0xb8,
  0xc3, 0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3b, 0x94, 0xc3, 0x2f, 0xbc,
  0x83, 0x3c, 0xfc, 0x82, 0x3b, 0xd4, 0x03, 0x3b, 0xb0, 0xc3, 0x8c, 0xcc,
  0x21, 0x07, 0x7c, 0x70, 0x03, 0x74, 0x60, 0x07, 0x37, 0x90, 0x87, 0x72,
  0x98, 0x87, 0x77, 0xa8, 0x07, 0x79, 0x18, 0x87, 0x72, 0x70, 0x83, 0x70,
  0xa0, 0x07, 0x7a, 0x90, 0x87, 0x74, 0x10, 0x87, 0x7a, 0xa0, 0x87, 0x72,
  0x00, 0x00, 0x00, 0x00, 0x71, 0x20, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00,
  0x96, 0xf0, 0x0c, 0x97, 0xef, 0x3c, 0x3e, 0xd5, 0x00, 0x11, 0xe6, 0x17,
  0xb7, 0x6d, 0x05, 0xdb, 0x70, 0xf9, 0xce, 0xe3, 0x0b, 0x01, 0x55, 0x14,
  0x44, 0x54, 0x3a, 0xc0, 0x50, 0x12, 0x06, 0x20, 0x60, 0x3e, 0x72, 0xdb,
  0xa6, 0x60, 0x0d, 0x97, 0xef, 0x3c, 0xfe, 0x44, 0x5c, 0x13, 0x15, 0x11,
  0xec, 0xe4, 0x44, 0x84, 0x5f, 0xdc, 0xb6, 0x2d, 0x48, 0xc3, 0xe5, 0x3b,
  0x8f, 0x2f, 0x44, 0x04, 0x30, 0x11, 0x21, 0xd0, 0x0c, 0x0b, 0x61, 0x04,
  0xd2, 0x70, 0xf9, 0xce, 0xe3, 0x4f, 0x47, 0x44, 0x00, 0x83, 0x38, 0xf8,
  0xc8, 0x6d, 0x17, 0xc0, 0x17, 0xf8, 0x9d, 0xbf, 0x69, 0xb7, 0x35, 0xcc,
  0xae, 0x97, 0x81, 0xc0, 0x99, 0xf5, 0x47, 0xa2, 0x96, 0xf1, 0xf4, 0xba,
  0xbc, 0x2c, 0x23, 0x02, 0x9b, 0x40, 0x60, 0xd0, 0x0e, 0xaa, 0xe1, 0xf2,
  0x9d, 0xc7, 0x9f, 0x88, 0x6b, 0xa2, 0x22, 0xa2, 0x74, 0x80, 0xc1, 0x2f,
  0x6e, 0xdb, 0x06, 0x08, 0x06, 0x40, 0x1a, 0x13, 0x10, 0x84, 0xc0, 0x10,
  0xa0, 0xe1, 0xf2, 0x9d, 0xc7, 0x0f, 0x90, 0x06, 0x88, 0x30, 0xbf, 0xb8,
  0xed, 0x0a, 0x88, 0x83, 0xc0, 0xef, 0xfc, 0x7d, 0xd7, 0xe9, 0xd6, 0x30,
  0xbb, 0x5e, 0x06, 0x02, 0x67, 0xd6, 0x1f, 0x49, 0x7a, 0xa5, 0x96, 0xf1,
  0xf4, 0xba, 0xbc, 0x2c, 0x23, 0x02, 0xad, 0x3f, 0x92, 0xbd, 0x3c, 0xa6,
  0xbf, 0xe5, 0xc0, 0x26, 0x09, 0x16, 0x03, 0x02, 0x81, 0xc0, 0xa0, 0x19,
  0x40, 0xc3, 0xe5, 0x3b, 0x8f, 0x1f, 0x20, 0x0d, 0x10, 0x61, 0x3e, 0x72,
  0xdb, 0x00, 0x00, 0x00, 0x61, 0x20, 0x00, 0x00, 0x1c, 0x01, 0x00, 0x00,
  0x13, 0x04, 0x41, 0x2c, 0x10, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
  0x34, 0x95, 0x47, 0x11, 0x8c, 0x00, 0x50, 0x30, 0x03, 0x50, 0x4e, 0x05,
  0x55, 0x84, 0x01, 0x35, 0x50, 0x72, 0xa5, 0x1b, 0x50, 0x76, 0x65, 0x18,
  0x40, 0x53, 0x09, 0x10, 0x30, 0x46, 0x00, 0x82, 0x20, 0x88, 0x7f, 0x23,
  0x00, 0x63, 0x04, 0x20, 0x08, 0x82, 0x20, 0x28, 0x00, 0x00, 0x00, 0x00,
  0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x40, 0x06, 0x67, 0x80, 0x10, 0x62,
  0x20, 0x06, 0xd9, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x90, 0x01, 0x1a,
  0x24, 0xcf, 0x18, 0x8c, 0x81, 0x36, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06,
  0x64, 0x90, 0x06, 0x4a, 0x44, 0x06, 0x64, 0xb0, 0x8d, 0x18, 0x18, 0x00,
  0x08, 0x82, 0x01, 0x14, 0x07, 0x4a, 0x19, 0x8c, 0x18, 0x18, 0x00, 0x08,
  0x82, 0x01, 0x24, 0x07, 0x8b, 0x1a, 0xcc, 0x44, 0x24, 0x01, 0x33, 0x0a,
  0x33, 0x11, 0x49, 0xc0, 0x8c, 0xc2, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18,
  0x58, 0x74, 0xd0, 0x14, 0x69, 0x30, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42,
  0x50, 0xc2, 0x04, 0x25, 0x50, 0x50, 0x48, 0x05, 0x23, 0x06, 0x07, 0x00,
  0x82, 0x60, 0x80, 0xe5, 0x41, 0xa6, 0xbc, 0xc1, 0x88, 0xc1, 0x01, 0x80,
  0x20, 0x18, 0x60, 0x7a, 0xa0, 0x09, 0x70, 0x30, 0x62, 0x70, 0x00, 0x20,
  0x08, 0x06, 0xd8, 0x1e, 0x68, 0x42, 0x31, 0x62, 0x70, 0x00, 0x20, 0x08,
  0x06, 0x18, 0x1f, 0x6c, 0x42, 0x51, 0xcd, 0x1d, 0xc0, 0x88, 0xc1, 0x01,
  0x80, 0x20, 0x18, 0x60, 0x7e, 0xe0, 0x05, 0x74, 0x30, 0x62, 0x70, 0x00,
  0x20, 0x08, 0x06, 0xd8, 0x1f, 0x78, 0x01, 0x52, 0x51, 0x07, 0x23, 0x06,
  0x07, 0x00, 0x82, 0x60, 0x80, 0x85, 0x42, 0x18, 0x04, 0x77, 0x30, 0x62,
  0x70, 0x00, 0x20, 0x08, 0x06, 0x98, 0x28, 0x88, 0x81, 0x84, 0x07, 0x23,
  0x06, 0x07, 0x00, 0x82, 0x60, 0x80, 0x8d, 0x82, 0x18, 0x08, 0xcd, 0x88,
  0xc1, 0x01, 0x80, 0x20, 0x18, 0x60, 0xa4, 0x30, 0x06, 0x42, 0x53, 0xd6,
  0x1f, 0xc0, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x60, 0xa6, 0x60, 0x06,
  0x01, 0x1f, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0x01, 0x76, 0x0a, 0x66,
  0x10, 0x44, 0x23, 0x06, 0x0d, 0x00, 0x82, 0x60, 0xb0, 0x9d, 0x82, 0x19,
  0x6c, 0x7e, 0x90, 0x61, 0x69, 0x90, 0x06, 0x69, 0x90, 0x06, 0xa3, 0x09,
  0x01, 0x30, 0x62, 0xd0, 0x00, 0x20, 0x08, 0x06, 0x5b, 0x2a, 0xa0, 0x41,
  0x07, 0x0a, 0x87, 0xb1, 0x06, 0x6b, 0xb0, 0x06, 0x6b, 0x30, 0x9a, 0x10,
  0x00, 0x23, 0x06, 0x0d, 0x00, 0x82, 0x60, 0xb0, 0xad, 0x82, 0x1a, 0x7c,
  0xa2, 0x10, 0x41, 0x6d, 0xd0, 0x06, 0x6d, 0xd0, 0x06, 0xa3, 0x09, 0x01,
  0x60, 0xc5, 0x10, 0x1f, 0x33, 0x84, 0xf8, 0x8c, 0x18, 0x34, 0x00, 0x08,
  0x82, 0xc1, 0xf6, 0x0a, 0x6e, 0x30, 0x06, 0xa6, 0x90, 0x30, 0x71, 0x10,
  0x07, 0x71, 0x10, 0x07, 0xa3, 0x09, 0x01, 0x30, 0x62, 0xd0, 0x00, 0x20,
  0x08, 0x06, 0x5b, 0x2c, 0xc0, 0x41, 0x19, 0xa0, 0xc2, 0x35, 0xcd, 0xc1,
  0x1c, 0xcc, 0xc1, 0x1c, 0x8c, 0x26, 0x04, 0x80, 0x0d, 0x4b, 0x7c, 0x4c,
  0x60, 0xe2, 0xb3, 0x93, 0xa1, 0x0c, 0x58, 0x81, 0x15, 0x86, 0x0d, 0x88,
  0x20, 0x19, 0x80, 0x9d, 0x0c, 0x66, 0xd0, 0x0a, 0xb1, 0x30, 0x6c, 0x40,
  0x04, 0xc4, 0x00, 0xec, 0x64, 0x30, 0x03, 0x57, 0x70, 0x85, 0x61, 0x03,
  0x22, 0x50, 0x06, 0x60, 0x27, 0xc3, 0x19, 0xbc, 0xc2, 0x2c, 0x0c, 0x1b,
  0x10, 0x41, 0x31, 0x00, 0xf6, 0x06, 0x4c, 0x7c, 0x0c, 0x0e, 0x8e, 0xf8,
  0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0xc1, 0x97, 0x0b, 0xb3, 0x20, 0x8c,
  0x18, 0x18, 0x00, 0x08, 0x82, 0xc1, 0xa7, 0x0b, 0xb4, 0x20, 0x0c, 0x47,
  0x04, 0x02, 0xf1, 0x5d, 0x10, 0x84, 0xd5, 0x41, 0x14, 0x1f, 0xb3, 0x03,
  0x26, 0x3e, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0xf0, 0xfd, 0x42, 0x2e,
  0x08, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0xf0, 0x81, 0x83, 0x2e, 0x08,
  0xc3, 0x11, 0x81, 0x40, 0x7c, 0x17, 0x04, 0xb1, 0x92, 0xa1, 0x0e, 0x78,
  0xe1, 0xa0, 0x00, 0x18, 0x2b, 0x19, 0xec, 0xc0, 0x17, 0x06, 0x0a, 0x80,
  0x31, 0x1c, 0x31, 0x80, 0x82, 0xf0, 0x0d, 0x47, 0x08, 0xa1, 0x20, 0x7c,
  0xc3, 0x11, 0x85, 0x28, 0x10, 0xdf, 0x70, 0x04, 0x31, 0x0a, 0xc4, 0x77,
  0x44, 0x10, 0x47, 0x04, 0x71, 0x44, 0x10, 0x47, 0x04, 0x61, 0x84, 0x10,
  0x02, 0x23, 0x84, 0x10, 0x9c, 0x00, 0xd8, 0x09, 0x80, 0x8d, 0x18, 0x18,
  0x00, 0x08, 0x82, 0xc1, 0x37, 0x0f, 0xed, 0xf0, 0x8c, 0x18, 0x18, 0x00,
  0x08, 0x82, 0xc1, 0x47, 0x0f, 0xee, 0xe0, 0x8c, 0x18, 0x1c, 0x00, 0x08,
  0x82, 0x41, 0x67, 0x0f, 0xeb, 0x20, 0xbc, 0xc2, 0x88, 0xc1, 0x01, 0x80,
  0x20, 0x18, 0x74, 0xf7, 0xc0, 0x0e, 0x02, 0x2c, 0x98, 0x21, 0xc8, 0xc7,
  0x0c, 0x41, 0x3e, 0x23, 0x06, 0x0e, 0x00, 0x82, 0x60, 0x10, 0x06, 0xf8,
  0x50, 0x0b, 0xb0, 0xd0, 0x0a, 0xac, 0xd0, 0x0b, 0x42, 0x20, 0x08, 0xe0,
  0x80, 0xe1, 0x40, 0x00, 0x63, 0x00, 0x00, 0x00, 0xc6, 0x64, 0xb8, 0x26,
  0x70, 0xd5, 0xb7, 0xf9, 0x11, 0x9f, 0x89, 0x34, 0x46, 0x55, 0xf8, 0x08,
  0x8d, 0xd7, 0x26, 0x54, 0xb8, 0x26, 0xd2, 0xe0, 0xa6, 0x55, 0xf8, 0x08,
  0x8d, 0xdf, 0xb6, 0x57, 0xf8, 0x48, 0xad, 0xd3, 0x06, 0x56, 0xf8, 0x08,
  0x8d, 0xe7, 0x56, 0x54, 0xb8, 0x26, 0xd2, 0xf0, 0xe6, 0x53, 0xf8, 0x48,
  0x6d, 0xf3, 0x66, 0x56, 0xf8, 0x08, 0x8d, 0xef, 0x06, 0x57, 0xf8, 0x08,
  0x8d, 0xf7, 0x16, 0x18, 0x50, 0xf8, 0x48, 0xad, 0xdb, 0x86, 0x46, 0x7c,
  0x5a, 0x20, 0xd9, 0x0c, 0x65, 0xfc, 0x48, 0xf3, 0x02, 0x0b, 0x45, 0xfc,
  0x13, 0x71, 0x4d, 0x54, 0x44, 0xfc, 0xf6, 0x60, 0x43, 0x85, 0x8f, 0xd4,
  0xb7, 0x6d, 0x72, 0x85, 0x8f, 0xd0, 0x79, 0x6d, 0x74, 0x85, 0x8f, 0xd0,
  0xf9, 0x6d, 0x7f, 0xc6, 0x67, 0x22, 0x8d, 0x5d, 0x9b, 0x5d, 0xe1, 0x23,
  0x74, 0x9e, 0x1b, 0x5e, 0xe1, 0x23, 0x74, 0xbe, 0x9b, 0x5e, 0xe1, 0x23,
  0x74, 0xde, 0x1b, 0x54, 0xd3, 0x12, 0xd7, 0x44, 0x45, 0x44, 0xe9, 0x00,
  0x43, 0xbd, 0x5b, 0x10, 0xe1, 0x9a, 0x48, 0x63, 0x56, 0x4d, 0x4b, 0x5c,
  0x13, 0x15, 0x11, 0xa5, 0x03, 0x0c, 0x75, 0x6f, 0x3f, 0x84, 0x6b, 0x02,
  0x97, 0x49, 0x35, 0x2d, 0x71, 0x4d, 0x54, 0x44, 0x94, 0x0e, 0x30, 0xd4,
  0xbc, 0xa5, 0x19, 0x9f, 0x16, 0x48, 0xb6, 0x6d, 0x62, 0xc6, 0xa7, 0x05,
  0x92, 0x7d, 0xdb, 0x98, 0xf1, 0x69, 0x81, 0x64, 0xe3, 0xc6, 0x67, 0x7c,
  0x5a, 0x20, 0xd9, 0xb9, 0xf5, 0x19, 0x9f, 0x16, 0x48, 0xb6, 0x6e, 0x40,
  0x85, 0x6b, 0x02, 0xd7, 0x6d, 0x55, 0x85, 0x8f, 0xd4, 0xb8, 0x6d, 0x5b,
  0x85, 0x8f, 0xd4, 0x38, 0x6e, 0x44, 0x85, 0x6b, 0x02, 0x97, 0x6e, 0x61,
  0x85, 0x8f, 0xd4, 0xb8, 0x6e, 0x58, 0x4d, 0x4b, 0x5c, 0x13, 0x15, 0x11,
  0xa5, 0x03, 0x0c, 0x36, 0x6d, 0x47, 0x85, 0x6b, 0x02, 0x57, 0x6f, 0x67,
  0x85, 0x8f, 0xd4, 0x38, 0x6f, 0x80, 0x01, 0x85, 0x8f, 0xd0, 0x7a, 0x6d,
  0x32, 0x91, 0xf1, 0x3b, 0xd4, 0xf4, 0x02, 0x0b, 0x45, 0xfc, 0xae, 0xf6,
  0xfe, 0xf6, 0x60, 0x34, 0x8a, 0x10, 0xfc, 0x42, 0x40, 0x15, 0x05, 0x11,
  0x19, 0xcf, 0xe0, 0x23, 0xb4, 0xf5, 0x0c, 0x3e, 0x52, 0x5b, 0x5c, 0xe1,
  0x23, 0x75, 0x4e, 0x9b, 0x51, 0xe1, 0x23, 0xf4, 0x9d, 0xdb, 0x5c, 0xe1,
  0x23, 0x75, 0x6e, 0x9b, 0xd3, 0xd2, 0x12, 0xd7, 0x44, 0x45, 0x44, 0xe9,
  0x00, 0x83, 0xd5, 0x15, 0x3e, 0x52, 0xe7, 0xb8, 0x2d, 0x15, 0x3e, 0x42,
  0xdf, 0xbd, 0xdd, 0x15, 0x3e, 0x52, 0xe7, 0xba, 0xe5, 0x15, 0x3e, 0x52,
  0xe7, 0xbc, 0x25, 0x19, 0xae, 0x89, 0x34, 0x75, 0x6d, 0x4a, 0x86, 0x6b,
  0x22, 0x4d, 0x6d, 0x1b, 0x92, 0xe1, 0x9a, 0xc0, 0x55, 0xd3, 0xd6, 0x64,
  0xb8, 0x26, 0xd2, 0xd4, 0x39, 0x00, 0x00, 0x00, 0x01, 0x31, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x5b, 0x86, 0x3f, 0x08, 0x4e, 0x61, 0xcb, 0x10,
  0x0a, 0xc1, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
