#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Pipeline Runtime Information: 
;
;
;
; Buffer Definitions:
;
; cbuffer cb
; {
;
;   struct cb
;   {
;
;       struct struct.TemporalSupersampling_BlendWithCurrentFrameConstantBuffer
;       {
;
;           float stdDevGamma;                        ; Offset:    0
;           int clampCachedValues;                    ; Offset:    4
;           float clamping_minStdDevTolerance;        ; Offset:    8
;           float padding;                            ; Offset:   12
;           float clampDifferenceToTsppScale;         ; Offset:   16
;           int forceUseMinSmoothingFactor;           ; Offset:   20
;           float minSmoothingFactor;                 ; Offset:   24
;           uint minTsppToUseTemporalVariance;        ; Offset:   28
;           uint blurStrength_MaxTspp;                ; Offset:   32
;           float blurDecayStrength;                  ; Offset:   36
;           int checkerboard_enabled;                 ; Offset:   40
;           int checkerboard_areEvenPixelsActive;     ; Offset:   44
;       
;       } cb                                          ; Offset:    0
;
;   
;   } cb                                              ; Offset:    0 Size:    48
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; cb                                cbuffer      NA          NA     CB0            cb0     1
; g_inCurrentFrameValue             texture     f32          2d      T0             t0     1
; g_inCurrentFrameLocalMeanVariance   texture     f32          2d      T1             t1     1
; g_inCurrentFrameRayHitDistance    texture     f32          2d      T2             t2     1
; g_inReprojected_Tspp_Value_SquaredMeanValue_RayHitDistance   texture     u32          2d      T3             t3     1
; g_inOutValue                          UAV     f32          2d      U0             u0     1
; g_inOutTspp                           UAV     u32          2d      U1             u1     1
; g_inOutSquaredMeanValue               UAV     f32          2d      U2             u2     1
; g_inOutRayHitDistance                 UAV     f32          2d      U3             u3     1
; g_outVariance                         UAV     f32          2d      U4             u4     1
; g_outBlurStrength                     UAV     f32          2d      U5             u5     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%"class.Texture2D<float>" = type { float, %"class.Texture2D<float>::mips_type" }
%"class.Texture2D<float>::mips_type" = type { i32 }
%"class.Texture2D<vector<float, 2> >" = type { <2 x float>, %"class.Texture2D<vector<float, 2> >::mips_type" }
%"class.Texture2D<vector<float, 2> >::mips_type" = type { i32 }
%"class.Texture2D<vector<unsigned int, 4> >" = type { <4 x i32>, %"class.Texture2D<vector<unsigned int, 4> >::mips_type" }
%"class.Texture2D<vector<unsigned int, 4> >::mips_type" = type { i32 }
%"class.RWTexture2D<float>" = type { float }
%"class.RWTexture2D<unsigned int>" = type { i32 }
%cb = type { %struct.TemporalSupersampling_BlendWithCurrentFrameConstantBuffer }
%struct.TemporalSupersampling_BlendWithCurrentFrameConstantBuffer = type { float, i32, float, float, float, i32, float, i32, i32, float, i32, i32 }
%dx.types.Handle = type { i8* }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%"class.RWTexture2D<vector<float, 4> >" = type { <4 x float> }

@"\01?g_inCurrentFrameValue@@3V?$Texture2D@M@@A" = external constant %"class.Texture2D<float>", align 4
@"\01?g_inCurrentFrameLocalMeanVariance@@3V?$Texture2D@V?$vector@M$01@@@@A" = external constant %"class.Texture2D<vector<float, 2> >", align 4
@"\01?g_inCurrentFrameRayHitDistance@@3V?$Texture2D@M@@A" = external constant %"class.Texture2D<float>", align 4
@"\01?g_inReprojected_Tspp_Value_SquaredMeanValue_RayHitDistance@@3V?$Texture2D@V?$vector@I$03@@@@A" = external constant %"class.Texture2D<vector<unsigned int, 4> >", align 4
@"\01?g_inOutValue@@3V?$RWTexture2D@M@@A" = external constant %"class.RWTexture2D<float>", align 4
@"\01?g_inOutTspp@@3V?$RWTexture2D@I@@A" = external constant %"class.RWTexture2D<unsigned int>", align 4
@"\01?g_inOutSquaredMeanValue@@3V?$RWTexture2D@M@@A" = external constant %"class.RWTexture2D<float>", align 4
@"\01?g_inOutRayHitDistance@@3V?$RWTexture2D@M@@A" = external constant %"class.RWTexture2D<float>", align 4
@"\01?g_outVariance@@3V?$RWTexture2D@M@@A" = external constant %"class.RWTexture2D<float>", align 4
@"\01?g_outBlurStrength@@3V?$RWTexture2D@M@@A" = external constant %"class.RWTexture2D<float>", align 4
@cb = external constant %cb

define void @main() {
  %g_outBlurStrength_UAV_2d = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 5, i32 5, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %g_outVariance_UAV_2d = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 4, i32 4, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %g_inOutRayHitDistance_UAV_2d = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 3, i32 3, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %g_inOutSquaredMeanValue_UAV_2d = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 2, i32 2, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %g_inOutTspp_UAV_2d = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %g_inOutValue_UAV_2d = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %g_inReprojected_Tspp_Value_SquaredMeanValue_RayHitDistance_texture_2d = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 3, i32 3, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %g_inCurrentFrameRayHitDistance_texture_2d = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 2, i32 2, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %g_inCurrentFrameLocalMeanVariance_texture_2d = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %g_inCurrentFrameValue_texture_2d = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %cb_cbuffer = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %1 = call i32 @dx.op.threadId.i32(i32 93, i32 0)  ; ThreadId(component)
  %2 = call i32 @dx.op.threadId.i32(i32 93, i32 1)  ; ThreadId(component)
  %TextureLoad = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %g_inReprojected_Tspp_Value_SquaredMeanValue_RayHitDistance_texture_2d, i32 0, i32 %1, i32 %2, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %3 = extractvalue %dx.types.ResRet.i32 %TextureLoad, 0
  %4 = extractvalue %dx.types.ResRet.i32 %TextureLoad, 1
  %5 = extractvalue %dx.types.ResRet.i32 %TextureLoad, 2
  %6 = extractvalue %dx.types.ResRet.i32 %TextureLoad, 3
  %LegacyF16ToF32 = call float @dx.op.legacyF16ToF32(i32 131, i32 %4)  ; LegacyF16ToF32(value)
  %LegacyF16ToF321 = call float @dx.op.legacyF16ToF32(i32 131, i32 %5)  ; LegacyF16ToF32(value)
  %LegacyF16ToF322 = call float @dx.op.legacyF16ToF32(i32 131, i32 %6)  ; LegacyF16ToF32(value)
  %7 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %cb_cbuffer, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %8 = extractvalue %dx.types.CBufRet.i32 %7, 2
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %.critedge, label %10

; <label>:10                                      ; preds = %0
  %11 = add i32 %2, %1
  %12 = and i32 %11, 1
  %13 = extractvalue %dx.types.CBufRet.i32 %7, 3
  %14 = xor i32 %12, 1
  %15 = icmp eq i32 %13, %14
  br i1 %15, label %.critedge, label %17

.critedge:                                        ; preds = %10, %0
  %TextureLoad3 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %g_inCurrentFrameValue_texture_2d, i32 0, i32 %1, i32 %2, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %16 = extractvalue %dx.types.ResRet.f32 %TextureLoad3, 0
  br label %17

; <label>:17                                      ; preds = %.critedge, %10
  %18 = phi float [ %16, %.critedge ], [ -1.000000e+00, %10 ]
  %19 = fcmp fast une float %18, -1.000000e+00
  %20 = fmul fast float %18, %18
  %21 = select i1 %19, float %20, float -1.000000e+00
  %22 = icmp eq i32 %3, 0
  br i1 %22, label %88, label %23

; <label>:23                                      ; preds = %17
  br i1 %19, label %24, label %30

; <label>:24                                      ; preds = %23
  %25 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %cb_cbuffer, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %26 = extractvalue %dx.types.CBufRet.f32 %25, 2
  %27 = fdiv fast float 1.000000e+00, %26
  %28 = fptoui float %27 to i32
  %29 = add i32 %3, 1
  %UMin = call i32 @dx.op.binary.i32(i32 40, i32 %29, i32 %28)  ; UMin(a,b)
  br label %30

; <label>:30                                      ; preds = %24, %23
  %31 = phi i32 [ %UMin, %24 ], [ %3, %23 ]
  %TextureLoad7 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %g_inCurrentFrameLocalMeanVariance_texture_2d, i32 0, i32 %1, i32 %2, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %32 = extractvalue %dx.types.ResRet.f32 %TextureLoad7, 0
  %33 = extractvalue %dx.types.ResRet.f32 %TextureLoad7, 1
  %34 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %cb_cbuffer, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %35 = extractvalue %dx.types.CBufRet.i32 %34, 1
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %52, label %37

; <label>:37                                      ; preds = %30
  %38 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %cb_cbuffer, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %39 = extractvalue %dx.types.CBufRet.f32 %38, 2
  %40 = extractvalue %dx.types.CBufRet.f32 %38, 0
  %Sqrt = call float @dx.op.unary.f32(i32 24, float %33)  ; Sqrt(value)
  %41 = fmul fast float %40, %Sqrt
  %FMax = call float @dx.op.binary.f32(i32 35, float %41, float %39)  ; FMax(a,b)
  %42 = fadd fast float %FMax, %32
  %43 = fsub fast float %32, %FMax
  %FMax12 = call float @dx.op.binary.f32(i32 35, float %LegacyF16ToF32, float %43)  ; FMax(a,b)
  %FMin13 = call float @dx.op.binary.f32(i32 36, float %FMax12, float %42)  ; FMin(a,b)
  %44 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %cb_cbuffer, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %45 = extractvalue %dx.types.CBufRet.f32 %44, 0
  %46 = fsub fast float %FMin13, %LegacyF16ToF32
  %FAbs = call float @dx.op.unary.f32(i32 6, float %46)  ; FAbs(value)
  %47 = fmul fast float %45, %FAbs
  %Saturate = call float @dx.op.unary.f32(i32 7, float %47)  ; Saturate(value)
  %48 = uitofp i32 %31 to float
  %49 = fmul fast float %Saturate, %48
  %50 = fsub fast float %48, %49
  %51 = fptoui float %50 to i32
  br label %52

; <label>:52                                      ; preds = %37, %30
  %Tspp.0 = phi i32 [ %51, %37 ], [ %31, %30 ]
  %cachedValue.0 = phi float [ %FMin13, %37 ], [ %LegacyF16ToF32, %30 ]
  %53 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %cb_cbuffer, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %54 = extractvalue %dx.types.CBufRet.i32 %53, 1
  %55 = icmp eq i32 %54, 0
  %56 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %cb_cbuffer, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %57 = extractvalue %dx.types.CBufRet.f32 %56, 2
  br i1 %55, label %58, label %61

; <label>:58                                      ; preds = %52
  %59 = uitofp i32 %Tspp.0 to float
  %60 = fdiv fast float 1.000000e+00, %59
  %FMax9 = call float @dx.op.binary.f32(i32 35, float %60, float %57)  ; FMax(a,b)
  br label %61

; <label>:61                                      ; preds = %58, %52
  %62 = phi float [ %FMax9, %58 ], [ %57, %52 ]
  %FMin = call float @dx.op.binary.f32(i32 36, float %62, float 1.000000e+00)  ; FMin(a,b)
  br i1 %19, label %63, label %67

; <label>:63                                      ; preds = %61
  %64 = fsub fast float %18, %cachedValue.0
  %65 = fmul fast float %FMin, %64
  %66 = fadd fast float %65, %cachedValue.0
  br label %67

; <label>:67                                      ; preds = %63, %61
  %68 = phi float [ %66, %63 ], [ %cachedValue.0, %61 ]
  br i1 %19, label %69, label %73

; <label>:69                                      ; preds = %67
  %70 = fsub fast float %21, %LegacyF16ToF321
  %71 = fmul fast float %FMin, %70
  %72 = fadd fast float %71, %LegacyF16ToF321
  br label %73

; <label>:73                                      ; preds = %69, %67
  %74 = phi float [ %72, %69 ], [ %LegacyF16ToF321, %67 ]
  %75 = fmul fast float %68, %68
  %76 = fsub fast float %74, %75
  %FMax10 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %76)  ; FMax(a,b)
  %77 = extractvalue %dx.types.CBufRet.i32 %53, 3
  %78 = icmp uge i32 %Tspp.0, %77
  %79 = select i1 %78, float %FMax10, float %33
  %FMax11 = call float @dx.op.binary.f32(i32 35, float 0x3FB99999A0000000, float %79)  ; FMax(a,b)
  br i1 %19, label %80, label %82

; <label>:80                                      ; preds = %73
  %TextureLoad4 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %g_inCurrentFrameRayHitDistance_texture_2d, i32 0, i32 %1, i32 %2, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %81 = extractvalue %dx.types.ResRet.f32 %TextureLoad4, 0
  br label %82

; <label>:82                                      ; preds = %80, %73
  %83 = phi float [ %81, %80 ], [ 0.000000e+00, %73 ]
  br i1 %19, label %84, label %92

; <label>:84                                      ; preds = %82
  %85 = fsub fast float %83, %LegacyF16ToF322
  %86 = fmul fast float %85, %FMin
  %87 = fadd fast float %86, %LegacyF16ToF322
  br label %92

; <label>:88                                      ; preds = %17
  br i1 %19, label %89, label %92

; <label>:89                                      ; preds = %88
  %TextureLoad5 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %g_inCurrentFrameRayHitDistance_texture_2d, i32 0, i32 %1, i32 %2, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %90 = extractvalue %dx.types.ResRet.f32 %TextureLoad5, 0
  %TextureLoad8 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %g_inCurrentFrameLocalMeanVariance_texture_2d, i32 0, i32 %1, i32 %2, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %91 = extractvalue %dx.types.ResRet.f32 %TextureLoad8, 1
  br label %92

; <label>:92                                      ; preds = %89, %88, %84, %82
  %valueSquaredMean.0 = phi float [ %20, %89 ], [ -1.000000e+00, %88 ], [ %74, %82 ], [ %74, %84 ]
  %value.0 = phi float [ %18, %89 ], [ -1.000000e+00, %88 ], [ %68, %82 ], [ %68, %84 ]
  %rayHitDistance.0 = phi float [ %90, %89 ], [ -1.000000e+00, %88 ], [ %LegacyF16ToF322, %82 ], [ %87, %84 ]
  %variance.0 = phi float [ %91, %89 ], [ -1.000000e+00, %88 ], [ %FMax11, %82 ], [ %FMax11, %84 ]
  %Tspp.1 = phi i32 [ 1, %89 ], [ 0, %88 ], [ %Tspp.0, %82 ], [ %Tspp.0, %84 ]
  %93 = extractvalue %dx.types.CBufRet.i32 %7, 0
  %UMin6 = call i32 @dx.op.binary.i32(i32 40, i32 %Tspp.1, i32 %93)  ; UMin(a,b)
  %94 = uitofp i32 %UMin6 to float
  %95 = uitofp i32 %93 to float
  %96 = fdiv fast float %94, %95
  %97 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %cb_cbuffer, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %98 = extractvalue %dx.types.CBufRet.f32 %97, 1
  %99 = fsub fast float 1.000000e+00, %96
  %Log = call float @dx.op.unary.f32(i32 23, float %99)  ; Log(value)
  %100 = fmul fast float %Log, %98
  %Exp = call float @dx.op.unary.f32(i32 21, float %100)  ; Exp(value)
  call void @dx.op.textureStore.i32(i32 67, %dx.types.Handle %g_inOutTspp_UAV_2d, i32 %1, i32 %2, i32 undef, i32 %Tspp.1, i32 %Tspp.1, i32 %Tspp.1, i32 %Tspp.1, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %g_inOutValue_UAV_2d, i32 %1, i32 %2, i32 undef, float %value.0, float %value.0, float %value.0, float %value.0, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %g_inOutSquaredMeanValue_UAV_2d, i32 %1, i32 %2, i32 undef, float %valueSquaredMean.0, float %valueSquaredMean.0, float %valueSquaredMean.0, float %valueSquaredMean.0, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %g_inOutRayHitDistance_UAV_2d, i32 %1, i32 %2, i32 undef, float %rayHitDistance.0, float %rayHitDistance.0, float %rayHitDistance.0, float %rayHitDistance.0, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %g_outVariance_UAV_2d, i32 %1, i32 %2, i32 undef, float %variance.0, float %variance.0, float %variance.0, float %variance.0, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %g_outBlurStrength_UAV_2d, i32 %1, i32 %2, i32 undef, float %Exp, float %Exp, float %Exp, float %Exp, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadId.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.legacyF16ToF32(i32, i32) #0

; Function Attrs: nounwind
declare void @dx.op.textureStore.f32(i32, %dx.types.Handle, i32, i32, i32, float, float, float, float, i8) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind
declare void @dx.op.textureStore.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32, i8) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #1

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.typeAnnotations = !{!21, !50}
!dx.entryPoints = !{!54}

!0 = !{!"dxc 1.2"}
!1 = !{i32 1, i32 3}
!2 = !{i32 1, i32 4}
!3 = !{!"cs", i32 6, i32 3}
!4 = !{!5, !12, !19, null}
!5 = !{!6, !8, !9, !10}
!6 = !{i32 0, %"class.Texture2D<float>"* undef, !"g_inCurrentFrameValue", i32 0, i32 0, i32 1, i32 2, i32 0, !7}
!7 = !{i32 0, i32 9}
!8 = !{i32 1, %"class.Texture2D<vector<float, 2> >"* undef, !"g_inCurrentFrameLocalMeanVariance", i32 0, i32 1, i32 1, i32 2, i32 0, !7}
!9 = !{i32 2, %"class.Texture2D<float>"* undef, !"g_inCurrentFrameRayHitDistance", i32 0, i32 2, i32 1, i32 2, i32 0, !7}
!10 = !{i32 3, %"class.Texture2D<vector<unsigned int, 4> >"* undef, !"g_inReprojected_Tspp_Value_SquaredMeanValue_RayHitDistance", i32 0, i32 3, i32 1, i32 2, i32 0, !11}
!11 = !{i32 0, i32 5}
!12 = !{!13, !14, !15, !16, !17, !18}
!13 = !{i32 0, %"class.RWTexture2D<float>"* undef, !"g_inOutValue", i32 0, i32 0, i32 1, i32 2, i1 false, i1 false, i1 false, !7}
!14 = !{i32 1, %"class.RWTexture2D<unsigned int>"* undef, !"g_inOutTspp", i32 0, i32 1, i32 1, i32 2, i1 false, i1 false, i1 false, !11}
!15 = !{i32 2, %"class.RWTexture2D<float>"* undef, !"g_inOutSquaredMeanValue", i32 0, i32 2, i32 1, i32 2, i1 false, i1 false, i1 false, !7}
!16 = !{i32 3, %"class.RWTexture2D<float>"* undef, !"g_inOutRayHitDistance", i32 0, i32 3, i32 1, i32 2, i1 false, i1 false, i1 false, !7}
!17 = !{i32 4, %"class.RWTexture2D<float>"* undef, !"g_outVariance", i32 0, i32 4, i32 1, i32 2, i1 false, i1 false, i1 false, !7}
!18 = !{i32 5, %"class.RWTexture2D<float>"* undef, !"g_outBlurStrength", i32 0, i32 5, i32 1, i32 2, i1 false, i1 false, i1 false, !7}
!19 = !{!20}
!20 = !{i32 0, %cb* undef, !"cb", i32 0, i32 0, i32 1, i32 48, null}
!21 = !{i32 0, %"class.Texture2D<float>" undef, !22, %"class.Texture2D<float>::mips_type" undef, !25, %"class.Texture2D<vector<float, 2> >" undef, !27, %"class.Texture2D<vector<float, 2> >::mips_type" undef, !25, %"class.Texture2D<vector<unsigned int, 4> >" undef, !29, %"class.Texture2D<vector<unsigned int, 4> >::mips_type" undef, !25, %"class.RWTexture2D<float>" undef, !32, %"class.RWTexture2D<unsigned int>" undef, !33, %"class.RWTexture2D<vector<float, 4> >" undef, !34, %struct.TemporalSupersampling_BlendWithCurrentFrameConstantBuffer undef, !35, %cb undef, !48}
!22 = !{i32 8, !23, !24}
!23 = !{i32 6, !"h", i32 3, i32 0, i32 7, i32 9}
!24 = !{i32 6, !"mips", i32 3, i32 4}
!25 = !{i32 4, !26}
!26 = !{i32 6, !"handle", i32 3, i32 0, i32 7, i32 5}
!27 = !{i32 12, !23, !28}
!28 = !{i32 6, !"mips", i32 3, i32 8}
!29 = !{i32 20, !30, !31}
!30 = !{i32 6, !"h", i32 3, i32 0, i32 7, i32 5}
!31 = !{i32 6, !"mips", i32 3, i32 16}
!32 = !{i32 4, !23}
!33 = !{i32 4, !30}
!34 = !{i32 16, !23}
!35 = !{i32 48, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47}
!36 = !{i32 6, !"stdDevGamma", i32 3, i32 0, i32 7, i32 9}
!37 = !{i32 6, !"clampCachedValues", i32 3, i32 4, i32 7, i32 4}
!38 = !{i32 6, !"clamping_minStdDevTolerance", i32 3, i32 8, i32 7, i32 9}
!39 = !{i32 6, !"padding", i32 3, i32 12, i32 7, i32 9}
!40 = !{i32 6, !"clampDifferenceToTsppScale", i32 3, i32 16, i32 7, i32 9}
!41 = !{i32 6, !"forceUseMinSmoothingFactor", i32 3, i32 20, i32 7, i32 4}
!42 = !{i32 6, !"minSmoothingFactor", i32 3, i32 24, i32 7, i32 9}
!43 = !{i32 6, !"minTsppToUseTemporalVariance", i32 3, i32 28, i32 7, i32 5}
!44 = !{i32 6, !"blurStrength_MaxTspp", i32 3, i32 32, i32 7, i32 5}
!45 = !{i32 6, !"blurDecayStrength", i32 3, i32 36, i32 7, i32 9}
!46 = !{i32 6, !"checkerboard_enabled", i32 3, i32 40, i32 7, i32 4}
!47 = !{i32 6, !"checkerboard_areEvenPixelsActive", i32 3, i32 44, i32 7, i32 4}
!48 = !{i32 48, !49}
!49 = !{i32 6, !"cb", i32 3, i32 0}
!50 = !{i32 1, void ()* @main, !51}
!51 = !{!52}
!52 = !{i32 0, !53, !53}
!53 = !{}
!54 = !{void ()* @main, !"main", null, !4, !55}
!55 = !{i32 4, !56}
!56 = !{i32 8, i32 8, i32 1}

#endif

const unsigned char g_pTemporalSupersampling_BlendWithCurrentFrameCS[] = {
  0x44, 0x58, 0x42, 0x43, 0xc3, 0xd1, 0x59, 0xf0, 0x4e, 0xc5, 0xb7, 0x94,
  0x93, 0x1e, 0x50, 0x0c, 0x1f, 0x29, 0x35, 0xdb, 0x01, 0x00, 0x00, 0x00,
  0x74, 0x17, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00,
  0x44, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00,
  0x58, 0x01, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x4f, 0x53, 0x47, 0x31, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x50, 0x53, 0x56, 0x30, 0xec, 0x00, 0x00, 0x00,
  0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4c,
  0x14, 0x16, 0x00, 0x00, 0x63, 0x00, 0x05, 0x00, 0x85, 0x05, 0x00, 0x00,
  0x44, 0x58, 0x49, 0x4c, 0x03, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0xfc, 0x15, 0x00, 0x00, 0x42, 0x43, 0xc0, 0xde, 0x21, 0x0c, 0x00, 0x00,
  0x7c, 0x05, 0x00, 0x00, 0x0b, 0x82, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91, 0x41, 0xc8, 0x04, 0x49,
  0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0c, 0x25, 0x05, 0x08, 0x19,
  0x1e, 0x04, 0x8b, 0x62, 0x80, 0x18, 0x45, 0x02, 0x42, 0x92, 0x0b, 0x42,
  0xc4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4b, 0x0a, 0x32, 0x62, 0x88,
  0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xa5, 0x00, 0x19, 0x32, 0x42,
  0xe4, 0x48, 0x0e, 0x90, 0x11, 0x23, 0xc4, 0x50, 0x41, 0x51, 0x81, 0x8c,
  0xe1, 0x83, 0xe5, 0x8a, 0x04, 0x31, 0x46, 0x06, 0x51, 0x18, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x1b, 0x8c, 0xe0, 0xff, 0xff, 0xff, 0xff, 0x07,
  0x40, 0x02, 0xa8, 0x0d, 0x86, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x03, 0x20,
  0x01, 0xd5, 0x06, 0x62, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x01, 0x90, 0x00,
  0x49, 0x18, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x82, 0x60, 0x42,
  0x20, 0x4c, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00, 0x89, 0x20, 0x00, 0x00,
  0xd3, 0x00, 0x00, 0x00, 0x32, 0x22, 0x88, 0x09, 0x20, 0x64, 0x85, 0x04,
  0x13, 0x23, 0xa4, 0x84, 0x04, 0x13, 0x23, 0xe3, 0x84, 0xa1, 0x90, 0x14,
  0x12, 0x4c, 0x8c, 0x8c, 0x0b, 0x84, 0xc4, 0x4c, 0x10, 0xec, 0xc1, 0x0c,
  0xc0, 0x1c, 0x01, 0x18, 0xcc, 0x14, 0x06, 0xe3, 0xc0, 0x0e, 0xe1, 0x30,
  0x0f, 0xf3, 0xe0, 0x06, 0xb4, 0x50, 0x0e, 0xf8, 0x40, 0x0f, 0xf5, 0x20,
  0x0f, 0xe5, 0x20, 0x07, 0xa4, 0xc0, 0x07, 0xe6, 0xc0, 0x0e, 0xef, 0x10,
  0x0e, 0xf4, 0xe0, 0x07, 0x7a, 0xa0, 0x07, 0xed, 0x90, 0x0e, 0xf0, 0x30,
  0x0f, 0xbf, 0x40, 0x0f, 0xf9, 0x00, 0x0f, 0xe5, 0x80, 0x82, 0x60, 0x26,
  0x6b, 0x1c, 0xd8, 0x21, 0x1c, 0xe6, 0x61, 0x1e, 0xdc, 0x80, 0x16, 0xca,
  0x01, 0x1f, 0xe8, 0xa1, 0x1e, 0xe4, 0xa1, 0x1c, 0xe4, 0x80, 0x14, 0xf8,
  0xc0, 0x1c, 0xd8, 0xe1, 0x1d, 0xc2, 0x81, 0x1e, 0xfc, 0x00, 0x09, 0x80,
  0x40, 0xc3, 0x30, 0x82, 0x00, 0xcc, 0xd4, 0x06, 0xe3, 0xc0, 0x0e, 0xe1,
  0x30, 0x0f, 0xf3, 0xe0, 0x06, 0xb4, 0x50, 0x0e, 0xf8, 0x40, 0x0f, 0xf5,
  0x20, 0x0f, 0xe5, 0x20, 0x07, 0xa4, 0xc0, 0x07, 0xf6, 0x50, 0x0e, 0xe3,
  0x40, 0x0f, 0xef, 0x20, 0x0f, 0x7c, 0x60, 0x0e, 0xec, 0xf0, 0x0e, 0xe1,
  0x40, 0x0f, 0x6c, 0x00, 0x06, 0x72, 0xe0, 0x07, 0x60, 0xe0, 0x07, 0x7a,
  0xa0, 0x07, 0xed, 0x90, 0x0e, 0xf0, 0x30, 0x0f, 0xbf, 0x40, 0x0f, 0xf9,
  0x00, 0x0f, 0xe5, 0x80, 0x82, 0x60, 0x26, 0x31, 0x18, 0x07, 0x76, 0x08,
  0x87, 0x79, 0x98, 0x07, 0x37, 0xa0, 0x85, 0x72, 0xc0, 0x07, 0x7a, 0xa8,
  0x07, 0x79, 0x28, 0x07, 0x39, 0x20, 0x05, 0x3e, 0xb0, 0x87, 0x72, 0x18,
  0x07, 0x7a, 0x78, 0x07, 0x79, 0xe0, 0x03, 0x73, 0x60, 0x87, 0x77, 0x08,
  0x07, 0x7a, 0x60, 0x03, 0x30, 0x90, 0x03, 0x3f, 0x00, 0x03, 0x3f, 0x40,
  0x42, 0x61, 0xd0, 0x31, 0x8c, 0x40, 0x04, 0x33, 0xd1, 0xc1, 0x38, 0xb0,
  0x43, 0x38, 0xcc, 0xc3, 0x3c, 0xb8, 0x01, 0x2d, 0x94, 0x03, 0x3e, 0xd0,
  0x43, 0x3d, 0xc8, 0x43, 0x39, 0xc8, 0x01, 0x29, 0xf0, 0x81, 0x3d, 0x94,
  0xc3, 0x38, 0xd0, 0xc3, 0x3b, 0xc8, 0x03, 0x1f, 0xd4, 0x83, 0x3b, 0xcc,
  0x43, 0x3a, 0x9c, 0x83, 0x3b, 0x94, 0x03, 0x39, 0x80, 0x41, 0x3a, 0xb8,
  0x03, 0x3d, 0xb0, 0x01, 0x18, 0xd0, 0x81, 0x1f, 0x80, 0x81, 0x1f, 0xe8,
  0x81, 0x1e, 0xb4, 0x43, 0x3a, 0xc0, 0xc3, 0x3c, 0xfc, 0x02, 0x3d, 0xe4,
  0x03, 0x3c, 0x94, 0x03, 0x0a, 0x82, 0x99, 0xd2, 0x60, 0x1c, 0xd8, 0x21,
  0x1c, 0xe6, 0x61, 0x1e, 0xdc, 0x80, 0x16, 0xca, 0x01, 0x1f, 0xe8, 0xa1,
  0x1e, 0xe4, 0xa1, 0x1c, 0xe4, 0x80, 0x14, 0xf8, 0xc0, 0x1e, 0xca, 0x61,
  0x1c, 0xe8, 0xe1, 0x1d, 0xe4, 0x81, 0x0f, 0xea, 0xc1, 0x1d, 0xe6, 0x21,
  0x1d, 0xce, 0xc1, 0x1d, 0xca, 0x81, 0x1c, 0xc0, 0x20, 0x1d, 0xdc, 0x81,
  0x1e, 0xd8, 0x00, 0x0c, 0xe8, 0xc0, 0x0f, 0xc0, 0xc0, 0x0f, 0x90, 0x90,
  0x28, 0xb4, 0xcc, 0x84, 0x8d, 0x03, 0x3b, 0x84, 0xc3, 0x3c, 0xcc, 0x83,
  0x1b, 0xc8, 0xc2, 0x2d, 0xd0, 0x42, 0x39, 0xe0, 0x03, 0x3d, 0xd4, 0x83,
  0x3c, 0x94, 0x83, 0x1c, 0x90, 0x02, 0x1f, 0x98, 0x03, 0x3b, 0xbc, 0x43,
  0x38, 0xd0, 0x83, 0x1f, 0xa0, 0x00, 0xa0, 0x66, 0xa6, 0x6f, 0x1c, 0xd8,
  0x21, 0x1c, 0xe6, 0x61, 0x1e, 0xdc, 0x40, 0x16, 0x6e, 0x81, 0x16, 0xca,
  0x01, 0x1f, 0xe8, 0xa1, 0x1e, 0xe4, 0xa1, 0x1c, 0xe4, 0x80, 0x14, 0xf8,
  0xa0, 0x1e, 0xdc, 0x61, 0x1e, 0xd2, 0xe1, 0x1c, 0xdc, 0xa1, 0x1c, 0xc8,
  0x01, 0x0c, 0xd2, 0xc1, 0x1d, 0xe8, 0xc1, 0x0f, 0x50, 0x10, 0xd0, 0x73,
  0xa0, 0x20, 0x4d, 0x11, 0x25, 0x4c, 0x7e, 0x4b, 0x30, 0x8f, 0x13, 0x01,
  0x0b, 0x4b, 0x3d, 0x44, 0x24, 0x01, 0xcc, 0xb3, 0x20, 0x8d, 0xf1, 0x6f,
  0x0b, 0xd1, 0x0c, 0x30, 0x32, 0x1d, 0x1c, 0x15, 0x45, 0x44, 0x33, 0x7d,
  0x11, 0xc0, 0x10, 0x9c, 0xd3, 0x48, 0x13, 0xd0, 0x4c, 0x1b, 0x55, 0x14,
  0x44, 0x84, 0x18, 0x20, 0x00, 0x00, 0x20, 0x00, 0x82, 0x00, 0x08, 0x82,
  0x13, 0x84, 0x00, 0x05, 0x11, 0x49, 0x23, 0x00, 0x25, 0xa0, 0xa8, 0x2a,
  0x43, 0x10, 0x04, 0x74, 0x1d, 0x35, 0x5c, 0xfe, 0x84, 0x3d, 0x84, 0xe4,
  0x73, 0x1b, 0x55, 0xac, 0xc4, 0xe4, 0x17, 0xb7, 0x8d, 0x08, 0x00, 0x00,
  0x80, 0x39, 0x02, 0x84, 0xb4, 0x7b, 0x86, 0xcb, 0x9f, 0xb0, 0x87, 0x90,
  0xfc, 0x10, 0x68, 0x86, 0x85, 0x40, 0xc1, 0x56, 0x88, 0x2c, 0xe0, 0x02,
  0xea, 0x8e, 0x1a, 0x2e, 0x7f, 0xc2, 0x1e, 0x42, 0xf2, 0xb9, 0x8d, 0x2a,
  0x56, 0x62, 0xf2, 0x91, 0xdb, 0x46, 0x44, 0x10, 0x04, 0x41, 0x21, 0xbe,
  0x80, 0x0b, 0x08, 0xbc, 0x69, 0xb8, 0xfc, 0x09, 0x7b, 0x08, 0xc9, 0x5f,
  0x09, 0x69, 0x25, 0x26, 0x1f, 0xb9, 0x6d, 0x54, 0x04, 0x41, 0x10, 0x04,
  0x45, 0x11, 0x03, 0x2e, 0x08, 0x82, 0x20, 0x08, 0x02, 0x1a, 0xcb, 0x00,
  0x04, 0x01, 0x95, 0x65, 0xa1, 0x02, 0x2e, 0x08, 0x02, 0x00, 0x00, 0x00,
  0x8d, 0xce, 0x9b, 0x86, 0xcb, 0x9f, 0xb0, 0x87, 0x90, 0xfc, 0x95, 0x90,
  0x56, 0x62, 0xf2, 0x8b, 0xdb, 0x46, 0x05, 0x00, 0x00, 0x40, 0x50, 0x94,
  0x34, 0xe0, 0x82, 0x20, 0x08, 0x82, 0x20, 0x20, 0xb5, 0x10, 0x41, 0x10,
  0x04, 0xc4, 0x96, 0x01, 0x08, 0x00, 0x72, 0x0b, 0x01, 0x04, 0x00, 0x40,
  0x70, 0x59, 0xa8, 0x80, 0x0b, 0x82, 0x20, 0x08, 0x82, 0x40, 0x23, 0x79,
  0x8e, 0x20, 0x28, 0x06, 0x17, 0x68, 0x41, 0x40, 0x53, 0x3d, 0x10, 0x30,
  0x8c, 0x40, 0x00, 0x33, 0x91, 0xc1, 0x38, 0xb0, 0x43, 0x38, 0xcc, 0xc3,
  0x3c, 0xb8, 0x81, 0x2c, 0xdc, 0x02, 0x2d, 0x94, 0x03, 0x3e, 0xd0, 0x43,
  0x3d, 0xc8, 0x43, 0x39, 0xc8, 0x01, 0x29, 0xf0, 0x81, 0x3d, 0x94, 0xc3,
  0x38, 0xd0, 0xc3, 0x3b, 0xc8, 0x03, 0x1f, 0x98, 0x03, 0x3b, 0xbc, 0x43,
  0x38, 0xd0, 0x03, 0x1b, 0x80, 0x01, 0x1d, 0xf8, 0x01, 0x18, 0xf8, 0x01,
  0x0a, 0xf0, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x14, 0x72, 0xc0,
  0x87, 0x74, 0x60, 0x87, 0x36, 0x68, 0x87, 0x79, 0x68, 0x03, 0x72, 0xc0,
  0x87, 0x0d, 0xaf, 0x50, 0x0e, 0x6d, 0xd0, 0x0e, 0x7a, 0x50, 0x0e, 0x6d,
  0x00, 0x0f, 0x7a, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d,
  0x90, 0x0e, 0x71, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x78,
  0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x71, 0x60, 0x07, 0x7a,
  0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x73,
  0x20, 0x07, 0x6d, 0x90, 0x0e, 0x76, 0x40, 0x07, 0x7a, 0x60, 0x07, 0x74,
  0xd0, 0x06, 0xe6, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d,
  0x60, 0x0e, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe6,
  0x60, 0x07, 0x74, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x6d, 0xe0, 0x0e, 0x78,
  0xa0, 0x07, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x76,
  0x40, 0x07, 0x3a, 0x0f, 0xa4, 0x90, 0x21, 0x23, 0x45, 0x44, 0x00, 0x8e,
  0x01, 0x00, 0xf3, 0x0c, 0x00, 0x98, 0x63, 0x00, 0xc0, 0x5c, 0x03, 0x00,
  0x66, 0x1b, 0x00, 0x30, 0xdf, 0x00, 0x80, 0xd9, 0x06, 0x00, 0xcc, 0x36,
  0x00, 0x60, 0xb6, 0x01, 0x00, 0xb3, 0x0d, 0x00, 0x98, 0x72, 0x00, 0x00,
  0x43, 0x9e, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x86, 0x3c, 0x17, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x0c, 0x79, 0x3a, 0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x18, 0xf2, 0x80, 0x01, 0x10, 0x00, 0x02, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x79, 0xc6, 0x00, 0x08, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x65, 0x00, 0x04,
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x9e, 0x33,
  0x00, 0x02, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x21,
  0x8f, 0x1a, 0x00, 0x01, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xc0, 0x90, 0x87, 0x0d, 0x80, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x60, 0xc8, 0xe3, 0x06, 0x40, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x30, 0xe4, 0x81, 0x03, 0x20, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xf2, 0xc8, 0x01, 0x10, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x79, 0xea, 0x00,
  0x08, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb2, 0x40,
  0x1b, 0x00, 0x00, 0x00, 0x32, 0x1e, 0x98, 0x18, 0x19, 0x11, 0x4c, 0x90,
  0x8c, 0x09, 0x26, 0x47, 0xc6, 0x04, 0x43, 0x0a, 0x4a, 0xa0, 0x0c, 0x0a,
  0xa1, 0x18, 0x46, 0x00, 0x8a, 0xa0, 0x24, 0x4a, 0xa1, 0xc0, 0x0a, 0xa2,
  0x1c, 0x0a, 0xa3, 0x50, 0x0a, 0xa4, 0x60, 0x0a, 0xa7, 0x80, 0x0a, 0xa9,
  0xa0, 0x0a, 0x8b, 0xe8, 0x11, 0x00, 0x1a, 0x66, 0x00, 0x88, 0x98, 0x01,
  0x20, 0x63, 0x06, 0x80, 0x8e, 0x19, 0x00, 0x42, 0x66, 0x00, 0x48, 0x99,
  0x01, 0xa0, 0x65, 0x06, 0x80, 0x98, 0x19, 0x00, 0x6a, 0x66, 0x00, 0xc8,
  0x99, 0x01, 0xa0, 0x67, 0x06, 0x80, 0xa0, 0x19, 0x00, 0x8a, 0x66, 0x00,
  0x48, 0x9a, 0x01, 0xa0, 0x69, 0x06, 0x80, 0x84, 0x19, 0x00, 0xca, 0x67,
  0x00, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x3d, 0x01, 0x00, 0x00,
  0x1a, 0x03, 0x4c, 0x90, 0x46, 0x02, 0x13, 0xc4, 0x83, 0x0c, 0x6f, 0x0c,
  0x24, 0xc6, 0x45, 0x66, 0x43, 0x10, 0x4c, 0x10, 0x02, 0x6c, 0x82, 0x10,
  0x64, 0x1b, 0x84, 0x81, 0x98, 0x20, 0x04, 0xda, 0x06, 0x61, 0x30, 0x28,
  0x8c, 0xcd, 0x4d, 0x10, 0x82, 0x6d, 0xc3, 0x80, 0x24, 0xc4, 0x04, 0x21,
  0xe0, 0x26, 0x08, 0x84, 0x1b, 0xb0, 0x3a, 0xfb, 0x4a, 0x73, 0x1b, 0xaa,
  0x93, 0x93, 0x2b, 0x73, 0xa3, 0x33, 0x92, 0x0b, 0x6b, 0x2b, 0xb3, 0x0a,
  0x63, 0xab, 0x2b, 0x9b, 0x20, 0x04, 0xdd, 0x04, 0x21, 0xf0, 0x36, 0x08,
  0xcb, 0xb3, 0x21, 0x59, 0x98, 0x66, 0x59, 0x06, 0x67, 0x81, 0x26, 0x08,
  0x48, 0x1c, 0x30, 0x0c, 0xce, 0xbe, 0xd2, 0xdc, 0x86, 0xea, 0xe4, 0xe4,
  0xca, 0xdc, 0xe8, 0x8c, 0xe4, 0xc2, 0xda, 0xca, 0x98, 0xde, 0xc6, 0xc2,
  0xd8, 0x9a, 0xca, 0xc2, 0xdc, 0xac, 0xc2, 0xe4, 0xd2, 0xc2, 0xdc, 0xc6,
  0xca, 0x36, 0x24, 0x83, 0x34, 0x2d, 0xc3, 0xe0, 0x2c, 0x10, 0xbd, 0xb3,
  0xaf, 0x34, 0xb7, 0xa1, 0x3a, 0x39, 0xb9, 0x32, 0x37, 0x3a, 0x23, 0xb9,
  0xb0, 0xb6, 0x32, 0xa9, 0xb0, 0x3c, 0xa4, 0x34, 0x3a, 0xa2, 0xb4, 0x39,
  0xba, 0x30, 0xb7, 0xb1, 0xb2, 0x0d, 0x89, 0xc3, 0x54, 0x8b, 0x33, 0x38,
  0x0b, 0x34, 0x41, 0x60, 0xe8, 0x80, 0x7a, 0x70, 0xf6, 0x95, 0xe6, 0x26,
  0x55, 0x06, 0x27, 0xf7, 0xa6, 0x56, 0x36, 0x46, 0x57, 0x46, 0xf6, 0x45,
  0x35, 0x07, 0x07, 0xf7, 0x65, 0x15, 0xc6, 0x56, 0x57, 0xf6, 0x35, 0x15,
  0x57, 0x17, 0x26, 0x57, 0x46, 0xd6, 0x54, 0x16, 0xe6, 0x66, 0x15, 0xc6,
  0x56, 0x57, 0xf6, 0x25, 0x15, 0x96, 0x87, 0x94, 0x46, 0x47, 0x94, 0x36,
  0x47, 0x17, 0xe6, 0x36, 0x56, 0x36, 0x41, 0x08, 0xbe, 0x0d, 0xc2, 0x92,
  0x6d, 0x48, 0x88, 0x0b, 0x5b, 0x88, 0xc1, 0x59, 0xb4, 0x0d, 0x44, 0x44,
  0x59, 0xdb, 0x04, 0xc1, 0xb1, 0x03, 0x32, 0x67, 0x5f, 0x69, 0x6e, 0x4f,
  0x75, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x13, 0x04, 0x3a, 0x60, 0x83,
  0x0d, 0xcb, 0xd2, 0x79, 0xcb, 0x32, 0x38, 0xdf, 0xf7, 0x41, 0x13, 0x04,
  0x08, 0x0f, 0xb8, 0x9c, 0x7d, 0xa5, 0xb9, 0x3d, 0xd5, 0xd1, 0x51, 0xcd,
  0xc1, 0xc1, 0x6d, 0x58, 0x86, 0x30, 0x10, 0x83, 0x65, 0x18, 0x9c, 0xef,
  0xfb, 0x34, 0x5e, 0x67, 0x5f, 0x69, 0x6e, 0x4f, 0x75, 0x74, 0x53, 0x71,
  0x75, 0x61, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x61, 0x6e, 0x56, 0x61, 0x6c,
  0x75, 0x65, 0x1b, 0x16, 0xa7, 0x23, 0x83, 0xc5, 0x19, 0x9c, 0xef, 0xfb,
  0x20, 0x56, 0x67, 0x5f, 0x69, 0x6e, 0x4f, 0x75, 0x74, 0x52, 0x61, 0x79,
  0x48, 0x69, 0x74, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x1b,
  0x16, 0xa2, 0x33, 0x83, 0x85, 0x18, 0x9c, 0xef, 0xfb, 0x20, 0x36, 0x67,
  0x5f, 0x6f, 0x75, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65,
  0x1b, 0x16, 0xa3, 0x43, 0x83, 0xc5, 0x18, 0x9c, 0xef, 0xfb, 0x20, 0x46,
  0x67, 0x5f, 0x6f, 0x75, 0x74, 0x42, 0x6c, 0x75, 0x72, 0x53, 0x74, 0x72,
  0x65, 0x6e, 0x67, 0x74, 0x68, 0x1b, 0x96, 0xac, 0x53, 0x83, 0x25, 0x1b,
  0x9c, 0xef, 0xfb, 0xa0, 0x0d, 0x06, 0x18, 0x8c, 0x41, 0x19, 0x9c, 0x41,
  0x1a, 0xac, 0xc1, 0x04, 0x61, 0xda, 0x03, 0x0a, 0x63, 0x62, 0x13, 0x84,
  0x00, 0x0c, 0x36, 0x20, 0x4b, 0x1b, 0xb8, 0xc1, 0xb2, 0x0c, 0x6f, 0x00,
  0x6c, 0x08, 0xe0, 0x60, 0x03, 0xc1, 0xb1, 0x41, 0x1c, 0x00, 0x13, 0x84,
  0xa1, 0x0d, 0x26, 0x08, 0x41, 0x18, 0x30, 0x40, 0x9b, 0x20, 0x04, 0x62,
  0xb0, 0xc1, 0x48, 0xea, 0x80, 0x58, 0xec, 0xe0, 0x21, 0xd1, 0x96, 0x06,
  0x37, 0xb7, 0x81, 0x48, 0xf0, 0x80, 0x30, 0x36, 0x0c, 0x74, 0x70, 0x07,
  0x79, 0x30, 0x41, 0x10, 0xf8, 0x80, 0x06, 0x5a, 0x98, 0x1b, 0x19, 0x5b,
  0xd9, 0x06, 0x23, 0xe1, 0x03, 0x62, 0xb1, 0x83, 0x6c, 0x83, 0x60, 0xf4,
  0xc1, 0x04, 0xe1, 0x80, 0x83, 0x09, 0x42, 0x30, 0x06, 0x1b, 0x88, 0x04,
  0x0f, 0x08, 0x3a, 0xd8, 0x30, 0x80, 0xc2, 0x1d, 0x84, 0xc2, 0x04, 0xc1,
  0x78, 0x83, 0x09, 0xc2, 0x32, 0x07, 0x13, 0x84, 0x80, 0x0c, 0x36, 0x18,
  0x49, 0x1d, 0x10, 0x8b, 0x1d, 0x64, 0x13, 0x84, 0xa0, 0x0c, 0x36, 0x10,
  0x09, 0x1e, 0x10, 0xa7, 0xb0, 0x61, 0x28, 0x05, 0x53, 0x40, 0x85, 0x09,
  0x82, 0x22, 0x07, 0x13, 0x84, 0xa6, 0x0e, 0x36, 0x08, 0xc6, 0x1d, 0x4c,
  0x10, 0x9e, 0x3b, 0xd8, 0x20, 0x18, 0xa6, 0x30, 0x41, 0xc8, 0x83, 0x3e,
  0xd8, 0x20, 0x9c, 0xc2, 0x1d, 0x4c, 0x10, 0xa2, 0x3c, 0xe0, 0x32, 0x47,
  0x47, 0x46, 0x54, 0x66, 0x77, 0x14, 0xd6, 0xd6, 0x16, 0xb6, 0xc1, 0x48,
  0x64, 0x81, 0x58, 0xec, 0xe0, 0x61, 0x34, 0xc6, 0x16, 0xd6, 0x06, 0x37,
  0x14, 0x36, 0x86, 0x56, 0x46, 0x66, 0x15, 0xc6, 0x56, 0x57, 0x36, 0xb7,
  0xc1, 0x48, 0x68, 0x81, 0x30, 0xec, 0xc0, 0xe0, 0x36, 0xc6, 0x16, 0xd6,
  0x06, 0x97, 0xe6, 0x76, 0xf6, 0xd5, 0x96, 0xe6, 0x36, 0x45, 0x47, 0x46,
  0x54, 0x66, 0x47, 0xf5, 0xc6, 0x56, 0x26, 0x17, 0xe6, 0x36, 0x56, 0xb6,
  0xc1, 0x48, 0x6c, 0x81, 0xa0, 0x03, 0x3b, 0x78, 0x78, 0xc0, 0x85, 0x91,
  0x91, 0xa5, 0xb9, 0x9d, 0x6d, 0x30, 0x12, 0x5c, 0x20, 0x40, 0xc1, 0x0e,
  0x1e, 0x6a, 0x63, 0x6c, 0x61, 0x6d, 0x70, 0x44, 0x69, 0x66, 0x66, 0x65,
  0x72, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x54, 0x73, 0x70, 0x70, 0x53,
  0x63, 0x61, 0x6c, 0x65, 0x1b, 0x8c, 0x44, 0x17, 0x88, 0x53, 0xb0, 0x83,
  0x87, 0x9a, 0xd9, 0x9b, 0xdc, 0x58, 0x59, 0xd5, 0x5c, 0x59, 0x53, 0x9a,
  0xdb, 0x54, 0xdb, 0xdb, 0x1b, 0x1d, 0x5a, 0x9a, 0xdb, 0x99, 0x51, 0xd8,
  0x18, 0xdd, 0x9b, 0xdc, 0x06, 0x23, 0xe1, 0x05, 0xa2, 0x14, 0xec, 0xc0,
  0xa0, 0xd4, 0x96, 0xe6, 0x36, 0xd5, 0xf6, 0xf6, 0x46, 0x87, 0x96, 0xe6,
  0x76, 0x66, 0x14, 0x36, 0x46, 0xf7, 0x26, 0x37, 0x41, 0x08, 0xcc, 0x60,
  0x83, 0x91, 0xf8, 0x02, 0xf1, 0x0b, 0x76, 0xf0, 0x90, 0x6b, 0x4b, 0x73,
  0xa3, 0x9a, 0x83, 0x83, 0xa3, 0x7a, 0xab, 0x9a, 0x2b, 0xa3, 0x2a, 0x6b,
  0x83, 0x7b, 0x93, 0x0b, 0x63, 0xb3, 0x0a, 0x93, 0x4b, 0x0b, 0x73, 0x1b,
  0x2b, 0x9b, 0x20, 0x04, 0x67, 0xb0, 0xc1, 0x48, 0xc2, 0x81, 0x10, 0x07,
  0x3b, 0xc8, 0x48, 0x89, 0xb1, 0xd5, 0xc9, 0x4d, 0xd1, 0xc9, 0x95, 0xb9,
  0x9d, 0xd1, 0xa1, 0x7d, 0x35, 0x85, 0xe1, 0x51, 0xcd, 0xc1, 0xc1, 0x4d,
  0x10, 0x02, 0x34, 0xd8, 0x60, 0x24, 0xe4, 0x40, 0x94, 0x83, 0x1d, 0x64,
  0x8c, 0xc4, 0xd8, 0xea, 0xe4, 0x88, 0xca, 0xc6, 0xc2, 0xf2, 0xa6, 0xe8,
  0xe4, 0xca, 0xdc, 0xce, 0xe8, 0xd0, 0x26, 0x08, 0x41, 0x1a, 0x6c, 0x30,
  0x92, 0x73, 0x20, 0xd0, 0xc1, 0x0e, 0x1e, 0x52, 0x63, 0x68, 0x65, 0x63,
  0x6b, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x65, 0x6e, 0x61,
  0x62, 0x6c, 0x65, 0x64, 0x13, 0x84, 0x40, 0x0d, 0x36, 0x18, 0x89, 0x3a,
  0x10, 0xeb, 0x60, 0x07, 0x06, 0xc1, 0x60, 0x0c, 0xad, 0x6c, 0x6c, 0xad,
  0x4c, 0x4e, 0xec, 0x2d, 0x4c, 0x8e, 0xec, 0x2b, 0x4c, 0xae, 0xac, 0xc8,
  0xae, 0xcc, 0x0d, 0x2a, 0x0d, 0xaf, 0x8c, 0x6d, 0x2e, 0x68, 0x8c, 0x2e,
  0xcd, 0xae, 0x6c, 0x82, 0x10, 0xac, 0xc1, 0x06, 0x23, 0x69, 0x07, 0xc2,
  0x1d, 0xec, 0xc0, 0xd8, 0xd0, 0xbc, 0xc1, 0x2c, 0xd4, 0xc2, 0x2d, 0xe4,
  0xc2, 0x2e, 0xf4, 0x02, 0x38, 0x8c, 0x83, 0x39, 0xa4, 0x03, 0x3b, 0xbc,
  0xc3, 0x04, 0x41, 0xd2, 0x83, 0x0d, 0x44, 0xe2, 0x06, 0xc4, 0xb2, 0x41,
  0x78, 0x03, 0x79, 0xd8, 0x70, 0x2d, 0x73, 0xa0, 0x07, 0x7b, 0xe0, 0x07,
  0x7f, 0x20, 0x0a, 0xa3, 0xe0, 0x07, 0xa4, 0x90, 0x0a, 0xaa, 0xe0, 0x07,
  0xab, 0xc0, 0x0a, 0xad, 0xe0, 0x0a, 0xaf, 0x00, 0x0b, 0xb1, 0x00, 0x0f,
  0xf1, 0x30, 0x0f, 0x13, 0x04, 0x6b, 0xd9, 0x00, 0x6c, 0x18, 0x16, 0x7b,
  0xb0, 0x87, 0x0d, 0xc1, 0x3d, 0x6c, 0x18, 0x86, 0x7a, 0xc0, 0x07, 0x12,
  0x6d, 0x61, 0x69, 0x6e, 0x1b, 0x06, 0x3a, 0xa0, 0x83, 0x61, 0x83, 0x60,
  0xec, 0xc3, 0x86, 0xa2, 0x1e, 0xf4, 0x01, 0x90, 0x03, 0x7e, 0xa8, 0xc2,
  0xc6, 0x66, 0xd7, 0xe6, 0x92, 0x46, 0x56, 0xe6, 0x46, 0x37, 0x25, 0x08,
  0xaa, 0x90, 0xe1, 0xb9, 0xd8, 0x95, 0xc9, 0xcd, 0xa5, 0xbd, 0xb9, 0x4d,
  0x09, 0x88, 0x26, 0x64, 0x78, 0x2e, 0x76, 0x61, 0x6c, 0x76, 0x65, 0x72,
  0x53, 0x02, 0xa3, 0x0e, 0x19, 0x9e, 0xcb, 0x1c, 0x5a, 0x18, 0x59, 0x99,
  0x5c, 0xd3, 0x1b, 0x59, 0x19, 0xdb, 0x94, 0x20, 0x29, 0x43, 0x86, 0xe7,
  0x22, 0x57, 0x36, 0xf7, 0x56, 0x27, 0x37, 0x56, 0x36, 0x37, 0x25, 0x88,
  0x83, 0x4a, 0x64, 0x78, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x41, 0x6e, 0x6e,
  0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x84, 0x79, 0xc0,
  0x87, 0x3a, 0x64, 0x78, 0x2e, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f,
  0x69, 0x6e, 0x74, 0x73, 0x53, 0x02, 0x7e, 0x00, 0x79, 0x18, 0x00, 0x00,
  0x4c, 0x00, 0x00, 0x00, 0x33, 0x08, 0x80, 0x1c, 0xc4, 0xe1, 0x1c, 0x66,
  0x14, 0x01, 0x3d, 0x88, 0x43, 0x38, 0x84, 0xc3, 0x8c, 0x42, 0x80, 0x07,
  0x79, 0x78, 0x07, 0x73, 0x98, 0x71, 0x0c, 0xe6, 0x00, 0x0f, 0xed, 0x10,
  0x0e, 0xf4, 0x80, 0x0e, 0x33, 0x0c, 0x42, 0x1e, 0xc2, 0xc1, 0x1d, 0xce,
  0xa1, 0x1c, 0x66, 0x30, 0x05, 0x3d, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1b,
  0xcc, 0x03, 0x3d, 0xc8, 0x43, 0x3d, 0x8c, 0x03, 0x3d, 0xcc, 0x78, 0x8c,
  0x74, 0x70, 0x07, 0x7b, 0x08, 0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07,
  0x7a, 0x70, 0x03, 0x76, 0x78, 0x87, 0x70, 0x20, 0x87, 0x19, 0xcc, 0x11,
  0x0e, 0xec, 0x90, 0x0e, 0xe1, 0x30, 0x0f, 0x6e, 0x30, 0x0f, 0xe3, 0xf0,
  0x0e, 0xf0, 0x50, 0x0e, 0x33, 0x10, 0xc4, 0x1d, 0xde, 0x21, 0x1c, 0xd8,
  0x21, 0x1d, 0xc2, 0x61, 0x1e, 0x66, 0x30, 0x89, 0x3b, 0xbc, 0x83, 0x3b,
  0xd0, 0x43, 0x39, 0xb4, 0x03, 0x3c, 0xbc, 0x83, 0x3c, 0x84, 0x03, 0x3b,
  0xcc, 0xf0, 0x14, 0x76, 0x60, 0x07, 0x7b, 0x68, 0x07, 0x37, 0x68, 0x87,
  0x72, 0x68, 0x07, 0x37, 0x80, 0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07,
  0x76, 0x28, 0x07, 0x76, 0xf8, 0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87,
  0x5f, 0x08, 0x87, 0x71, 0x18, 0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81,
  0x2c, 0xee, 0xf0, 0x0e, 0xee, 0xe0, 0x0e, 0xf5, 0xc0, 0x0e, 0xec, 0x30,
  0x03, 0x62, 0xc8, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xcc, 0xa1, 0x1c, 0xe4,
  0xa1, 0x1c, 0xdc, 0x61, 0x1c, 0xca, 0x21, 0x1c, 0xc4, 0x81, 0x1d, 0xca,
  0x61, 0x06, 0xd6, 0x90, 0x43, 0x39, 0xc8, 0x43, 0x39, 0x98, 0x43, 0x39,
  0xc8, 0x43, 0x39, 0xb8, 0xc3, 0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3b,
  0x94, 0xc3, 0x2f, 0xbc, 0x83, 0x3c, 0xfc, 0x82, 0x3b, 0xd4, 0x03, 0x3b,
  0xb0, 0xc3, 0x8c, 0xcc, 0x21, 0x07, 0x7c, 0x70, 0x03, 0x74, 0x60, 0x07,
  0x37, 0x90, 0x87, 0x72, 0x98, 0x87, 0x77, 0xa8, 0x07, 0x79, 0x18, 0x87,
  0x72, 0x70, 0x83, 0x70, 0xa0, 0x07, 0x7a, 0x90, 0x87, 0x74, 0x10, 0x87,
  0x7a, 0xa0, 0x87, 0x72, 0x00, 0x00, 0x00, 0x00, 0x71, 0x20, 0x00, 0x00,
  0xac, 0x00, 0x00, 0x00, 0x55, 0x30, 0x06, 0x81, 0xdf, 0xf9, 0x9b, 0x76,
  0x3f, 0xeb, 0x74, 0xea, 0x1c, 0x0e, 0x07, 0x02, 0x67, 0xd6, 0x1f, 0x49,
  0x7a, 0xa5, 0x96, 0xf1, 0xf4, 0xba, 0xbc, 0x2c, 0x23, 0x02, 0x93, 0x40,
  0x60, 0xd0, 0x1a, 0xb6, 0xe1, 0xf2, 0x9d, 0xc7, 0x17, 0x02, 0xaa, 0x28,
  0x88, 0xa8, 0x74, 0x80, 0xa1, 0x24, 0x0c, 0x40, 0xc0, 0xfc, 0xe2, 0xb6,
  0xcd, 0x61, 0x1b, 0x2e, 0xdf, 0x79, 0x7c, 0x21, 0xa0, 0x8a, 0x82, 0x88,
  0x4a, 0x07, 0x18, 0x4a, 0xc2, 0x00, 0x04, 0xcc, 0x47, 0x6e, 0xbb, 0x04,
  0xe8, 0x20, 0xf0, 0x3b, 0x7f, 0xd3, 0xee, 0x61, 0x5d, 0x2e, 0x2f, 0xbb,
  0xe9, 0x46, 0x79, 0xb8, 0x5d, 0x96, 0x86, 0xf3, 0xc8, 0x34, 0x9d, 0x98,
  0x9e, 0xd3, 0xc3, 0xee, 0x71, 0x19, 0x08, 0x9c, 0x59, 0x7f, 0x24, 0x6a,
  0x19, 0x4f, 0xaf, 0xcb, 0xcb, 0x32, 0x22, 0xb0, 0x09, 0x04, 0x06, 0x0b,
  0x60, 0x0d, 0x02, 0xbf, 0xf3, 0x37, 0xed, 0x1e, 0xd6, 0xe5, 0xf2, 0xb2,
  0x9b, 0x6e, 0x94, 0x87, 0xdb, 0x65, 0x6b, 0x98, 0x5d, 0x2f, 0x03, 0x81,
  0x33, 0xeb, 0x8f, 0x44, 0x2d, 0xe3, 0xe9, 0x75, 0x79, 0x59, 0x46, 0x04,
  0x36, 0x81, 0xc0, 0x60, 0x25, 0xa4, 0x41, 0xe0, 0x77, 0xfe, 0xbe, 0xeb,
  0x74, 0x21, 0xbb, 0x2e, 0x9f, 0xd2, 0xe5, 0x65, 0xf7, 0x99, 0x8e, 0x06,
  0x02, 0x67, 0xd6, 0x1f, 0x49, 0x7a, 0xa5, 0x96, 0xf1, 0xf4, 0xba, 0xbc,
  0x2c, 0x23, 0x02, 0x9b, 0x40, 0x60, 0xd0, 0x22, 0xac, 0xe1, 0xf2, 0x9d,
  0xc7, 0x9f, 0x88, 0x6b, 0xa2, 0x22, 0x82, 0x9d, 0x9c, 0x88, 0xf0, 0x8b,
  0xdb, 0x2e, 0x84, 0x32, 0x08, 0xfc, 0xce, 0xdf, 0x77, 0x9d, 0x6e, 0x0d,
  0xcb, 0xd3, 0x61, 0xf7, 0xb8, 0x0c, 0x04, 0xce, 0xac, 0x3f, 0x92, 0xf4,
  0x4a, 0x2d, 0xe3, 0xe9, 0x75, 0x79, 0x59, 0x46, 0x04, 0x36, 0x81, 0xc0,
  0x60, 0x19, 0xbc, 0x41, 0xe0, 0x77, 0xfe, 0xa6, 0xdd, 0xcf, 0x3a, 0x7d,
  0x1a, 0xaf, 0x87, 0xe5, 0x65, 0x72, 0xb3, 0x1c, 0x76, 0x5b, 0xc3, 0xec,
  0x7a, 0x19, 0x08, 0x9c, 0x59, 0x7f, 0x24, 0xe9, 0x95, 0x5a, 0xc6, 0xd3,
  0xeb, 0xf2, 0xb2, 0x8c, 0x08, 0x6c, 0x02, 0x81, 0x41, 0xb3, 0xb0, 0x86,
  0xcb, 0x77, 0x1e, 0x7f, 0x22, 0xae, 0x89, 0x8a, 0x08, 0x76, 0x72, 0x22,
  0xc2, 0x47, 0x6e, 0xdb, 0x2e, 0xa4, 0xe1, 0xf2, 0x9d, 0xc7, 0x17, 0x22,
  0x02, 0x98, 0x88, 0x10, 0x68, 0x86, 0x85, 0x30, 0x06, 0x69, 0xb8, 0x7c,
  0xe7, 0xf1, 0xa7, 0x23, 0x22, 0x80, 0x41, 0x1c, 0x7c, 0xe4, 0xb6, 0x4d,
  0xa2, 0x1a, 0x2e, 0xdf, 0x79, 0xfc, 0x89, 0xb8, 0x26, 0x2a, 0x22, 0x4a,
  0x07, 0x18, 0xfc, 0xe2, 0xb6, 0xed, 0xa1, 0x1a, 0x2e, 0xdf, 0x79, 0xfc,
  0x89, 0xb8, 0x26, 0x2a, 0x22, 0x4a, 0x07, 0x18, 0x7c, 0xe4, 0xb6, 0x6d,
  0x81, 0x60, 0x00, 0xa4, 0x31, 0x05, 0x41, 0x08, 0x0c, 0x82, 0x1a, 0x2e,
  0xdf, 0x79, 0xfc, 0x85, 0x30, 0x00, 0x01, 0xfb, 0x6a, 0xbd, 0x75, 0xbe,
  0xdb, 0xae, 0x00, 0x53, 0x08, 0xfc, 0xce, 0xdf, 0xb4, 0x7b, 0x58, 0x97,
  0xcb, 0xcb, 0x6e, 0xba, 0x51, 0x1e, 0x6e, 0x97, 0x99, 0xef, 0x71, 0x98,
  0xdd, 0x2c, 0x87, 0xdd, 0xd6, 0xb0, 0x3c, 0x1d, 0x76, 0x8f, 0xcb, 0x40,
  0xe0, 0xcc, 0xfa, 0x23, 0x51, 0xcb, 0x78, 0x7a, 0x5d, 0x5e, 0x96, 0x11,
  0x81, 0xd6, 0x1f, 0xc9, 0x5e, 0x1e, 0xd3, 0xdf, 0x72, 0x60, 0x93, 0x04,
  0x8b, 0x01, 0x81, 0x40, 0x60, 0xb0, 0x06, 0x7e, 0x21, 0xf0, 0x3b, 0x7f,
  0xd3, 0x6e, 0x69, 0x19, 0x2e, 0x7f, 0xab, 0xcb, 0x63, 0x7a, 0x99, 0xfc,
  0xa5, 0xce, 0xe1, 0xf0, 0xaf, 0x35, 0xcc, 0xae, 0x97, 0xbf, 0xd3, 0x78,
  0x3d, 0x2c, 0x2f, 0x93, 0x9b, 0xe5, 0xb0, 0xdb, 0x1a, 0x66, 0xd7, 0xcb,
  0x5f, 0x69, 0x38, 0x8f, 0x4c, 0xd3, 0x89, 0xe9, 0x39, 0x3d, 0xec, 0x1e,
  0x97, 0x81, 0xc0, 0x99, 0xf5, 0x47, 0xa2, 0x96, 0xf1, 0xf4, 0xba, 0xbc,
  0x2c, 0x23, 0x02, 0xad, 0x3f, 0x92, 0xbd, 0x3c, 0xa6, 0xbf, 0xe5, 0xc0,
  0x24, 0x09, 0x36, 0x03, 0x02, 0x81, 0xc0, 0xa0, 0x55, 0x40, 0xc3, 0xe5,
  0x3b, 0x8f, 0x1f, 0x20, 0x0d, 0x10, 0x61, 0x7e, 0x71, 0xdb, 0x36, 0x01,
  0x0d, 0x97, 0xef, 0x3c, 0x7e, 0x80, 0x34, 0x40, 0x84, 0xf9, 0xc8, 0x6d,
  0xd7, 0x41, 0x1b, 0x04, 0x7e, 0xe7, 0x6f, 0xda, 0xfd, 0xac, 0xd3, 0xa5,
  0xe1, 0x3c, 0x32, 0x4d, 0x27, 0xa6, 0xe7, 0xf4, 0xb0, 0x7b, 0x5c, 0x06,
  0x02, 0x67, 0xd6, 0x1f, 0x49, 0x7a, 0xa5, 0x96, 0xf1, 0xf4, 0xba, 0xbc,
  0x2c, 0x23, 0x02, 0x9b, 0x40, 0x60, 0xb0, 0x08, 0xc8, 0x20, 0xf0, 0x3b,
  0x7f, 0xd3, 0xee, 0x67, 0x9d, 0x6e, 0x0d, 0xb3, 0xeb, 0x65, 0x20, 0x70,
  0x66, 0xfd, 0x91, 0xa4, 0x57, 0x6a, 0x19, 0x4f, 0xaf, 0xcb, 0xcb, 0x32,
  0x22, 0xb0, 0x09, 0x04, 0x06, 0x8d, 0xe2, 0x19, 0x2e, 0xdf, 0x79, 0x7c,
  0xaa, 0x01, 0x22, 0xcc, 0x2f, 0x6e, 0x1b, 0x00, 0x61, 0x20, 0x00, 0x00,
  0xcd, 0x01, 0x00, 0x00, 0x13, 0x04, 0x55, 0x2c, 0x10, 0x00, 0x00, 0x00,
  0x0e, 0x00, 0x00, 0x00, 0xa4, 0x15, 0xc1, 0x08, 0x40, 0x79, 0x94, 0x00,
  0x05, 0x33, 0x00, 0x25, 0x57, 0x76, 0x45, 0x18, 0x50, 0x86, 0x01, 0x65,
  0x54, 0x86, 0x02, 0xa5, 0x1b, 0x50, 0x2e, 0xa5, 0x42, 0xc0, 0x18, 0x41,
  0x6b, 0xce, 0x39, 0xef, 0x8d, 0x00, 0x8c, 0x11, 0x80, 0x20, 0x08, 0xe2,
  0xdf, 0x18, 0x01, 0x08, 0x82, 0x20, 0xfe, 0x0b, 0x00, 0x00, 0x00, 0x00,
  0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x50, 0x07, 0x79, 0xd0, 0x3c, 0x71,
  0x10, 0x07, 0x64, 0x30, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x75, 0xa0,
  0x07, 0x0e, 0x74, 0x07, 0x77, 0x50, 0x06, 0x23, 0x06, 0x09, 0x00, 0x82,
  0x60, 0x50, 0x07, 0x7b, 0xf0, 0x44, 0x79, 0x90, 0x07, 0x66, 0x30, 0x62,
  0x90, 0x00, 0x20, 0x08, 0x06, 0x75, 0xc0, 0x07, 0x90, 0x64, 0x07, 0x76,
  0x70, 0x06, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x50, 0x07, 0x7d, 0x10,
  0x4d, 0x7c, 0xc0, 0x07, 0x68, 0x30, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06,
  0x75, 0xe0, 0x07, 0x12, 0x95, 0x07, 0x79, 0x90, 0x06, 0x23, 0x06, 0x09,
  0x00, 0x82, 0x60, 0x50, 0x07, 0x7f, 0x30, 0x5d, 0x7d, 0xd0, 0x07, 0x6a,
  0x30, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x75, 0x00, 0x0a, 0x14, 0xa6,
  0x07, 0x7a, 0xb0, 0x06, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x50, 0x07,
  0xa1, 0x50, 0x65, 0xa0, 0x00, 0x0a, 0x6c, 0x30, 0x62, 0x90, 0x00, 0x20,
  0x08, 0x06, 0x75, 0x20, 0x0a, 0x96, 0xd6, 0x07, 0x7d, 0xd0, 0x06, 0x23,
  0x06, 0x09, 0x00, 0x82, 0x60, 0x50, 0x07, 0xa3, 0x70, 0x71, 0x7e, 0xe0,
  0x07, 0x6e, 0x30, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0xd7, 0x2b, 0x48,
  0x7f, 0x30, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0x17, 0x2c, 0x4c, 0xa4,
  0x30, 0x62, 0xd0, 0x00, 0x20, 0x08, 0x06, 0x63, 0xe0, 0x0a, 0xd8, 0x11,
  0x0a, 0x42, 0xb0, 0x6d, 0xdb, 0x36, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42,
  0x30, 0x9a, 0x30, 0x08, 0xa3, 0x09, 0xc4, 0x30, 0x62, 0x60, 0x00, 0x20,
  0x08, 0x06, 0x65, 0x20, 0x0b, 0xda, 0x30, 0x62, 0x60, 0x00, 0x20, 0x08,
  0x06, 0x65, 0x30, 0x0b, 0xdb, 0x30, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06,
  0x65, 0x40, 0x0b, 0xdc, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x60,
  0x70, 0x0b, 0x61, 0xb0, 0xa0, 0xc2, 0x68, 0x42, 0x20, 0x0c, 0x37, 0x04,
  0xab, 0x00, 0x06, 0xb3, 0x0c, 0x42, 0x10, 0x14, 0xd3, 0x40, 0x05, 0xb1,
  0xa0, 0xa3, 0x09, 0xc5, 0x50, 0xc2, 0x2c, 0xf0, 0x70, 0x83, 0x10, 0x80,
  0xc1, 0x2c, 0x83, 0x30, 0x04, 0x23, 0x06, 0x0d, 0x00, 0x82, 0x60, 0xa0,
  0x06, 0xbb, 0x80, 0x06, 0x54, 0x2c, 0x48, 0xd1, 0x1a, 0xac, 0xc1, 0x1a,
  0xac, 0xc1, 0x68, 0x42, 0x00, 0xcc, 0x12, 0x0c, 0x03, 0x15, 0x80, 0x20,
  0x80, 0x42, 0x30, 0x1c, 0x11, 0x84, 0x81, 0xf3, 0x99, 0x20, 0xc8, 0x67,
  0xba, 0x21, 0x18, 0x03, 0x61, 0xb8, 0xa1, 0xba, 0x05, 0x30, 0x98, 0x65,
  0x90, 0x88, 0x60, 0x96, 0xa1, 0x30, 0x88, 0x11, 0x83, 0x03, 0x00, 0x41,
  0x30, 0xe8, 0xce, 0x01, 0x0e, 0x34, 0x5e, 0x18, 0x4d, 0x08, 0x04, 0x43,
  0x83, 0x80, 0x3e, 0x17, 0x04, 0x53, 0x1a, 0x38, 0xc0, 0x88, 0xc1, 0x01,
  0x80, 0x20, 0x18, 0xb0, 0x81, 0x39, 0xbc, 0x42, 0x20, 0xcc, 0x12, 0x18,
  0x03, 0x15, 0x81, 0x50, 0xe0, 0x01, 0x31, 0x62, 0xd0, 0x00, 0x20, 0x08,
  0x06, 0x6a, 0x90, 0x0e, 0x76, 0x30, 0x06, 0xbf, 0x00, 0x06, 0x5f, 0x1e,
  0xe4, 0x41, 0x1e, 0xe4, 0xc1, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1,
  0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x80, 0x01, 0x3c, 0xe8, 0x01, 0x19,
  0x88, 0xc3, 0x68, 0x42, 0x10, 0x0c, 0x37, 0x04, 0xe4, 0x00, 0x06, 0xb3,
  0x0c, 0xc8, 0x11, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0x41, 0x47, 0x0f,
  0x7d, 0x70, 0x06, 0xe5, 0x30, 0x9a, 0x10, 0x08, 0xa3, 0x09, 0x02, 0x30,
  0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0x6e, 0x00, 0x0f, 0xbe, 0x70, 0x98,
  0x10, 0xc8, 0x67, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0xe0, 0x20, 0x1e,
  0xfe, 0x20, 0x20, 0x2c, 0x58, 0xe0, 0x63, 0x8c, 0x10, 0x9f, 0x11, 0x83,
  0x03, 0x00, 0x41, 0x30, 0x80, 0x03, 0x7a, 0x10, 0x85, 0x33, 0x08, 0x46,
  0x0c, 0x0e, 0x00, 0x04, 0xc1, 0x00, 0x0e, 0xea, 0x21, 0x1c, 0x82, 0x61,
  0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0x3a, 0x7f, 0x38, 0x85, 0x38, 0x98,
  0x87, 0xd1, 0x84, 0x00, 0xb0, 0x61, 0x0d, 0xe2, 0x33, 0x62, 0x60, 0x00,
  0x20, 0x08, 0x06, 0x6e, 0xa0, 0x0f, 0xf3, 0x10, 0xd8, 0x10, 0xc8, 0x67,
  0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0xdc, 0x80, 0x1f, 0xdc, 0x21, 0xb8,
  0x0b, 0x28, 0x13, 0x02, 0xf9, 0x98, 0x10, 0xc4, 0xe7, 0x82, 0x60, 0x66,
  0x09, 0x90, 0x81, 0x8a, 0x40, 0x38, 0xec, 0xc0, 0x18, 0xa8, 0x00, 0xb0,
  0x03, 0x1d, 0x8c, 0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0x00, 0x83, 0x94,
  0x98, 0x85, 0x3e, 0xf8, 0x87, 0xd1, 0x84, 0x20, 0x18, 0x6e, 0x08, 0xfa,
  0x01, 0x0c, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0xa0, 0x6b, 0x09, 0x5b,
  0x00, 0x05, 0x91, 0x18, 0x4d, 0x08, 0x84, 0x59, 0x86, 0x44, 0x19, 0xee,
  0x00, 0xca, 0x5e, 0x21, 0xa0, 0xcf, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18,
  0xc0, 0x41, 0x4a, 0xdc, 0x42, 0x30, 0xcc, 0x12, 0x28, 0x03, 0x15, 0x80,
  0x90, 0x20, 0xc8, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0xc0, 0xc1, 0x4a,
  0xdc, 0x43, 0x20, 0x0b, 0xb3, 0x0c, 0x0b, 0x13, 0x07, 0x26, 0x07, 0x4b,
  0x7c, 0x4c, 0x08, 0xe4, 0x63, 0x41, 0x03, 0x9f, 0x59, 0x02, 0x66, 0xa0,
  0x02, 0x10, 0x16, 0x4e, 0x99, 0x65, 0x68, 0x9c, 0x3a, 0xb0, 0x39, 0x10,
  0x85, 0xf8, 0x98, 0x11, 0xc8, 0xc7, 0x02, 0x52, 0x80, 0xcf, 0x2c, 0x81,
  0x33, 0x50, 0x01, 0x08, 0x8d, 0x4a, 0x30, 0x56, 0x14, 0xf2, 0x31, 0x21,
  0x88, 0xcf, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0xc0, 0x81, 0x4d, 0x90,
  0x83, 0x2f, 0x04, 0xa3, 0x09, 0xd5, 0x30, 0xdc, 0x80, 0x05, 0x63, 0x30,
  0xdd, 0x30, 0xc4, 0x41, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x70,
  0xa0, 0x13, 0xe8, 0x30, 0x0e, 0xc1, 0x2c, 0xc3, 0x03, 0x81, 0xc2, 0x88,
  0x41, 0x03, 0x80, 0x20, 0x18, 0xa8, 0x81, 0x4f, 0xac, 0x43, 0x2e, 0xd0,
  0x44, 0x2d, 0xd0, 0x82, 0x3b, 0xb8, 0x83, 0x3b, 0xb8, 0xc3, 0x68, 0x42,
  0x00, 0xcc, 0x12, 0x40, 0x03, 0x15, 0x80, 0xf0, 0xa8, 0x86, 0x33, 0xcb,
  0x10, 0x51, 0xa3, 0x60, 0xc1, 0x2b, 0xc4, 0xc7, 0x02, 0x4a, 0x3e, 0x16,
  0xc4, 0x02, 0x7c, 0x66, 0x09, 0xa8, 0x59, 0x86, 0x89, 0x32, 0x85, 0x11,
  0x83, 0x06, 0x00, 0x41, 0x30, 0x50, 0x03, 0xb2, 0x88, 0x87, 0x5f, 0xd0,
  0x89, 0x5d, 0xd0, 0x05, 0x7a, 0xa0, 0x07, 0x7a, 0xa0, 0x87, 0xd1, 0x84,
  0x00, 0x18, 0x31, 0x68, 0x00, 0x10, 0x04, 0x03, 0x35, 0x30, 0x8b, 0x79,
  0x00, 0x07, 0x9e, 0xe8, 0x05, 0x5e, 0xb0, 0x07, 0x7b, 0xb0, 0x07, 0x7b,
  0x18, 0x4d, 0x08, 0x82, 0x59, 0x02, 0x6a, 0xa0, 0x04, 0x90, 0x89, 0xc9,
  0x36, 0x24, 0x32, 0x80, 0xc8, 0x20, 0x1a, 0x28, 0x01, 0x70, 0x62, 0xc2,
  0x0d, 0xc9, 0x0d, 0x20, 0x37, 0x88, 0x06, 0x4a, 0x00, 0x65, 0xd2, 0x0d,
  0x09, 0x2e, 0x20, 0x27, 0x1a, 0x28, 0x01, 0x90, 0x89, 0x37, 0x24, 0x0e,
  0xe2, 0xa2, 0x81, 0x92, 0x80, 0x55, 0x26, 0x52, 0x91, 0x64, 0x01, 0x92,
  0x85, 0x68, 0x34, 0x41, 0x17, 0x80, 0x11, 0x83, 0x03, 0x00, 0x41, 0x30,
  0x60, 0x83, 0xb6, 0xb0, 0x09, 0x21, 0xb8, 0x00, 0xa8, 0x1b, 0x80, 0x32,
  0x21, 0xa0, 0xcf, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x74, 0x77, 0x01,
  0x12, 0xea, 0x70, 0x16, 0xa3, 0x09, 0x41, 0x60, 0xf8, 0x30, 0xc4, 0x67,
  0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0xdc, 0x60, 0x2e, 0xfa, 0x21, 0xb0,
  0x60, 0x90, 0xcf, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0xb8, 0x41, 0x5d,
  0xf8, 0x43, 0x30, 0x62, 0xe0, 0x00, 0x20, 0x08, 0x06, 0x72, 0x40, 0x17,
  0x24, 0x61, 0x0f, 0xef, 0xe0, 0x0e, 0x28, 0xc1, 0x30, 0x0c, 0xa3, 0x12,
  0x23, 0x06, 0x0e, 0x00, 0x82, 0x60, 0x70, 0x06, 0x79, 0x41, 0x12, 0xf5,
  0xf0, 0x0e, 0xee, 0x80, 0x12, 0xcf, 0xf3, 0x3c, 0x2a, 0x31, 0x62, 0xe0,
  0x00, 0x20, 0x08, 0x06, 0x67, 0x90, 0x17, 0x24, 0x71, 0x0f, 0xef, 0xe0,
  0x0e, 0x28, 0x01, 0x41, 0x10, 0xa4, 0x12, 0x23, 0x06, 0x0e, 0x00, 0x82,
  0x60, 0x70, 0x06, 0x79, 0x41, 0x12, 0xf8, 0xf0, 0x0e, 0xee, 0x80, 0x12,
  0x8e, 0xe3, 0x38, 0x2a, 0x31, 0x62, 0xe0, 0x00, 0x20, 0x08, 0x06, 0x67,
  0x90, 0x17, 0x24, 0x91, 0x0f, 0xef, 0xe0, 0x0e, 0x28, 0xd1, 0x34, 0x4d,
  0xa3, 0x12, 0x23, 0x06, 0x0e, 0x00, 0x82, 0x60, 0x70, 0x06, 0x79, 0x41,
  0x12, 0xfa, 0xf0, 0x0e, 0xee, 0x80, 0x12, 0x41, 0x10, 0x04, 0x2a, 0x81,
  0xe1, 0x40, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x76, 0x1c, 0x30, 0x94,
  0x8e, 0x61, 0x6d, 0x4c, 0x4b, 0x5c, 0x13, 0x15, 0x11, 0xa5, 0x03, 0x0c,
  0xb7, 0x55, 0x06, 0x18, 0xad, 0xf4, 0x3c, 0x3e, 0x6d, 0x9e, 0x01, 0xc5,
  0x67, 0x02, 0x57, 0x6f, 0x51, 0x94, 0xf1, 0x3b, 0xd4, 0xf4, 0x02, 0x11,
  0x02, 0x34, 0x02, 0xf1, 0xbb, 0xda, 0xfb, 0xdb, 0x83, 0xed, 0x31, 0x2d,
  0x71, 0x4d, 0x54, 0x44, 0x94, 0x0e, 0x30, 0xec, 0x66, 0x1b, 0xc0, 0xb4,
  0xc4, 0x35, 0x51, 0x11, 0x51, 0x3a, 0xc0, 0x90, 0x1b, 0x61, 0x00, 0xc1,
  0x42, 0xd1, 0x64, 0xa0, 0x01, 0xc4, 0x67, 0x22, 0x8d, 0x19, 0x06, 0x10,
  0x9f, 0x09, 0x5c, 0x96, 0x05, 0x06, 0xc6, 0x8f, 0x34, 0x1c, 0x15, 0x45,
  0x44, 0x33, 0x7d, 0x11, 0xc0, 0x10, 0x2f, 0xb0, 0x50, 0xc4, 0x3f, 0x11,
  0xd7, 0x44, 0x45, 0xc4, 0x6f, 0x0f, 0xa6, 0x18, 0x60, 0x7c, 0x26, 0xd2,
  0xd4, 0xb7, 0x25, 0x06, 0x18, 0x9f, 0x09, 0x5c, 0xb5, 0x6d, 0xab, 0x01,
  0xc6, 0x67, 0x02, 0x57, 0x4d, 0xdb, 0x6b, 0x80, 0xf1, 0x99, 0xc0, 0x55,
  0xd7, 0x56, 0x35, 0x19, 0x3f, 0xd2, 0xa0, 0xd4, 0xf4, 0x02, 0x0b, 0x45,
  0xfc, 0xae, 0xf6, 0xfe, 0xf6, 0x60, 0x96, 0x01, 0x8d, 0x00, 0x08, 0x07,
  0x31, 0xbc, 0xc0, 0x42, 0x11, 0x3e, 0x6d, 0xb0, 0x01, 0x4c, 0x4b, 0x5c,
  0x13, 0x15, 0x11, 0xa5, 0x03, 0x0c, 0xb8, 0xf9, 0x06, 0x18, 0xad, 0xf4,
  0x3c, 0x7e, 0x6d, 0xba, 0x01, 0x52, 0x05, 0x2c, 0x14, 0xc1, 0x42, 0x14,
  0x10, 0x11, 0x83, 0x49, 0x00, 0x8d, 0x4f, 0x1b, 0x6e, 0x00, 0xd3, 0x12,
  0xd7, 0x44, 0x45, 0x44, 0xe9, 0x00, 0x03, 0x6f, 0xc0, 0x01, 0x85, 0x6b,
  0x22, 0x8d, 0x6e, 0xbc, 0x01, 0x50, 0x04, 0x60, 0x21, 0x32, 0x75, 0x88,
  0x34, 0x01, 0x8d, 0x40, 0xf8, 0xb4, 0x51, 0x49, 0xc6, 0x8f, 0x34, 0x28,
  0x35, 0xb5, 0xd2, 0xf3, 0xfc, 0xae, 0xf6, 0xfe, 0xf6, 0x60, 0x8e, 0x01,
  0xc4, 0xa7, 0x05, 0x92, 0x69, 0x29, 0x42, 0xf0, 0x0b, 0x01, 0x55, 0x14,
  0x44, 0x64, 0x50, 0x98, 0xf1, 0x3b, 0xd4, 0xb4, 0x2d, 0x54, 0xc4, 0x4e,
  0x11, 0xd1, 0x18, 0xd3, 0xf1, 0xbb, 0xda, 0xfb, 0xdb, 0x83, 0x91, 0x3d,
  0x25, 0x61, 0x00, 0x02, 0xf6, 0xd5, 0x7a, 0xeb, 0x7c, 0xb7, 0x6d, 0xdb,
  0xd8, 0x53, 0x12, 0x06, 0x20, 0x60, 0x5f, 0xad, 0xb7, 0xce, 0x77, 0xdb,
  0xb5, 0x61, 0xb1, 0x81, 0xf1, 0x23, 0x0d, 0x47, 0x45, 0x11, 0xd1, 0x4c,
  0x5f, 0x04, 0x30, 0x44, 0xe9, 0x08, 0xc0, 0x62, 0x12, 0x40, 0xf3, 0x02,
  0x11, 0x02, 0x34, 0x02, 0xf1, 0x4f, 0xc4, 0x35, 0x51, 0x11, 0xf1, 0xdb,
  0x83, 0xf5, 0x06, 0x28, 0x15, 0x10, 0x21, 0x40, 0x23, 0x10, 0x3e, 0x6d,
  0x53, 0x9e, 0xf1, 0x23, 0x0d, 0x4a, 0x4d, 0x2c, 0x44, 0x01, 0x11, 0x31,
  0x98, 0x04, 0xd0, 0xbc, 0xc0, 0x42, 0x11, 0xbf, 0xab, 0xbd, 0xbf, 0x3d,
  0x98, 0x55, 0x29, 0x18, 0x3f, 0xd2, 0xac, 0xc4, 0x13, 0x39, 0x09, 0x21,
  0x4c, 0xc4, 0xf0, 0xb7, 0xd2, 0xf3, 0xfc, 0x2f, 0xb0, 0x50, 0xc4, 0xcf,
  0x42, 0x14, 0x10, 0x11, 0x83, 0x49, 0x00, 0xcd, 0x0b, 0x2c, 0x14, 0xf1,
  0xaf, 0x00, 0x16, 0x22, 0x53, 0x87, 0x48, 0x13, 0xd0, 0x08, 0xc4, 0x3f,
  0x11, 0xd7, 0x44, 0x45, 0xc4, 0x6f, 0x0f, 0x06, 0x19, 0x80, 0xb0, 0xc0,
  0x44, 0x45, 0xc0, 0x44, 0xd8, 0x55, 0x1a, 0x18, 0x3f, 0xd2, 0x70, 0x54,
  0x14, 0x11, 0xcd, 0xf4, 0x45, 0x00, 0x43, 0xac, 0x00, 0x16, 0x22, 0x53,
  0x87, 0x48, 0x13, 0xd0, 0x08, 0xc4, 0x3f, 0x11, 0xd7, 0x44, 0x45, 0xc4,
  0x6f, 0x0f, 0x96, 0x1c, 0x30, 0x78, 0xd7, 0x63, 0x62, 0x4e, 0x49, 0x18,
  0x80, 0x80, 0x7d, 0xb5, 0xde, 0x3a, 0xdf, 0x6d, 0x9b, 0x14, 0x67, 0xfc,
  0x48, 0x83, 0x52, 0xd3, 0x0a, 0x60, 0x21, 0x32, 0x75, 0x88, 0x34, 0x01,
  0x8d, 0x40, 0xfc, 0xae, 0xf6, 0xfe, 0xf6, 0x60, 0x5d, 0x4b, 0x4b, 0x5c,
  0x13, 0x15, 0x11, 0xa5, 0x03, 0x0c, 0x27, 0x90, 0xf8, 0x42, 0x84, 0x4c,
  0xc4, 0x60, 0x10, 0x96, 0x47, 0xb8, 0x26, 0xd2, 0xd8, 0x6e, 0xc0, 0x51,
  0x01, 0x0b, 0x45, 0xf8, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00
};
