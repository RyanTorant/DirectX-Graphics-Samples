#if 0
;
; Note: shader requires additional functionality:
;       Wave level operations
;
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Pipeline Runtime Information: 
;
;
;
; Buffer Definitions:
;
; cbuffer cb
; {
;
;   struct cb
;   {
;
;       struct struct.CalculateMeanVarianceConstantBuffer
;       {
;
;           uint2 textureDim;                         ; Offset:    0
;           uint kernelWidth;                         ; Offset:    8
;           uint kernelRadius;                        ; Offset:   12
;           int doCheckerboardSampling;               ; Offset:   16
;           int areEvenPixelsActive;                  ; Offset:   20
;           uint pixelStepY;                          ; Offset:   24
;           float padding;                            ; Offset:   28
;       
;       } cb                                          ; Offset:    0
;
;   
;   } cb                                              ; Offset:    0 Size:    32
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; cb                                cbuffer      NA          NA     CB0            cb0     1
; g_inValue                         texture     f32          2d      T0             t0     1
; g_outMeanVariance                     UAV     f32          2d      U0             u0     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%"class.Texture2D<float>" = type { float, %"class.Texture2D<float>::mips_type" }
%"class.Texture2D<float>::mips_type" = type { i32 }
%"class.RWTexture2D<vector<float, 2> >" = type { <2 x float> }
%cb = type { %struct.CalculateMeanVarianceConstantBuffer }
%struct.CalculateMeanVarianceConstantBuffer = type { <2 x i32>, i32, i32, i32, i32, i32, float }
%dx.types.Handle = type { i8* }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%"class.RWTexture2D<vector<float, 4> >" = type { <4 x float> }

@"\01?g_inValue@@3V?$Texture2D@M@@A" = external constant %"class.Texture2D<float>", align 4
@"\01?g_outMeanVariance@@3V?$RWTexture2D@V?$vector@M$01@@@@A" = external constant %"class.RWTexture2D<vector<float, 2> >", align 4
@cb = external constant %cb
@"\01?PackedRowResultCache@@3PAY07$$CAIA.1dim" = addrspace(3) global [128 x i32] undef
@"\01?NumValuesCache@@3PAY07$$CAIA.1dim" = addrspace(3) global [128 x i32] undef

define void @main() {
  %g_outMeanVariance_UAV_2d = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %g_inValue_texture_2d = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %cb_cbuffer = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %1 = call i32 @dx.op.groupId.i32(i32 94, i32 1)  ; GroupId(component)
  %2 = call i32 @dx.op.threadIdInGroup.i32(i32 95, i32 0)  ; ThreadIdInGroup(component)
  %3 = call i32 @dx.op.threadIdInGroup.i32(i32 95, i32 1)  ; ThreadIdInGroup(component)
  %4 = call i32 @dx.op.flattenedThreadIdInGroup.i32(i32 96)  ; FlattenedThreadIdInGroup()
  %5 = call i32 @dx.op.threadId.i32(i32 93, i32 0)  ; ThreadId(component)
  %6 = call i32 @dx.op.threadId.i32(i32 93, i32 1)  ; ThreadId(component)
  %7 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %cb_cbuffer, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %8 = extractvalue %dx.types.CBufRet.i32 %7, 2
  %9 = add i32 %8, 7
  %10 = and i32 %4, 15
  %11 = lshr i32 %4, 4
  %.i1 = shl i32 %1, 3
  %12 = extractvalue %dx.types.CBufRet.i32 %7, 3
  %.i1135 = sub i32 %.i1, %12
  %13 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %cb_cbuffer, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %14 = extractvalue %dx.types.CBufRet.i32 %13, 2
  %.i1137 = mul i32 %.i1135, %14
  %WaveGetLaneIndex = call i32 @dx.op.waveGetLaneIndex(i32 111)  ; WaveGetLaneIndex()
  %15 = and i32 %WaveGetLaneIndex, -16
  %16 = icmp ult i32 %11, %9
  br i1 %16, label %17, label %.loopexit

; <label>:17                                      ; preds = %0
  %18 = call i32 @dx.op.groupId.i32(i32 94, i32 0)  ; GroupId(component)
  %.i0 = shl i32 %18, 3
  %.i0134 = sub i32 %.i0, %12
  %.i1139 = mul i32 %14, %11
  %.i0140 = add i32 %.i0134, %10
  %.i1141 = add i32 %.i1139, %.i1137
  %19 = add nsw i32 %.i1141, %.i0140
  %20 = and i32 %19, 1
  %21 = extractvalue %dx.types.CBufRet.i32 %13, 0
  %22 = icmp ne i32 %21, 0
  %23 = extractvalue %dx.types.CBufRet.i32 %13, 1
  %24 = xor i32 %20, 1
  %25 = icmp ne i32 %23, %24
  %26 = and i1 %22, %25
  %.i1143 = zext i1 %26 to i32
  %.i1145 = add i32 %.i1143, %.i1141
  %27 = icmp ult i32 %10, %9
  %28 = extractvalue %dx.types.CBufRet.i32 %7, 0
  %29 = extractvalue %dx.types.CBufRet.i32 %7, 1
  %30 = or i32 %.i1145, %.i0140
  %31 = icmp sgt i32 %30, -1
  %32 = icmp slt i32 %.i0140, %28
  %33 = and i1 %32, %31
  %34 = icmp slt i32 %.i1145, %29
  %35 = and i1 %34, %33
  %36 = and i1 %27, %35
  br i1 %36, label %37, label %39

; <label>:37                                      ; preds = %17
  %TextureLoad100 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %g_inValue_texture_2d, i32 0, i32 %.i0140, i32 %.i1145, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %38 = extractvalue %dx.types.ResRet.f32 %TextureLoad100, 0
  br label %39

; <label>:39                                      ; preds = %37, %17
  %value.i.0.25 = phi float [ %38, %37 ], [ -1.000000e+00, %17 ]
  %40 = icmp ult i32 %10, 8
  %41 = fcmp fast une float %value.i.0.25, -1.000000e+00
  %42 = and i1 %40, %41
  %43 = fmul fast float %value.i.0.25, %value.i.0.25
  %value.i.0..26 = select i1 %42, float %value.i.0.25, float 0.000000e+00
  %..27 = select i1 %42, float %43, float 0.000000e+00
  %.7.28 = zext i1 %42 to i32
  %44 = or i32 %15, 1
  %45 = add nsw i32 %10, -8
  %46 = add i32 %45, %12
  %47 = select i1 %40, i32 %10, i32 %46
  %48 = add i32 %47, %44
  %49 = icmp eq i32 %12, 0
  br i1 %49, label %._crit_edge.40, label %.lr.ph18.39.preheader

.lr.ph18.39.preheader:                            ; preds = %39
  br label %.lr.ph18.39

._crit_edge.40.loopexit:                          ; preds = %72
  br label %._crit_edge.40

._crit_edge.40:                                   ; preds = %._crit_edge.40.loopexit, %39
  %numValues.i.1.lcssa.29 = phi i32 [ %.7.28, %39 ], [ %numValues.i.2.38, %._crit_edge.40.loopexit ]
  %squaredValueSum.i.1.lcssa.30 = phi float [ %..27, %39 ], [ %squaredValueSum.i.2.37, %._crit_edge.40.loopexit ]
  %valueSum.i.1.lcssa.31 = phi float [ %value.i.0..26, %39 ], [ %valueSum.i.26.36, %._crit_edge.40.loopexit ]
  %50 = or i32 %15, %10
  %51 = add i32 %50, 8
  %WaveGetLaneCount97 = call i32 @dx.op.waveGetLaneCount(i32 112)  ; WaveGetLaneCount()
  %52 = add i32 %WaveGetLaneCount97, -1
  %UMin118 = call i32 @dx.op.binary.i32(i32 40, i32 %52, i32 %51)  ; UMin(a,b)
  %WaveReadLaneAt111 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %valueSum.i.1.lcssa.31, i32 %UMin118)  ; WaveReadLaneAt(value,lane)
  %WaveReadLaneAt110 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %squaredValueSum.i.1.lcssa.30, i32 %UMin118)  ; WaveReadLaneAt(value,lane)
  %WaveReadLaneAt117 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %numValues.i.1.lcssa.29, i32 %UMin118)  ; WaveReadLaneAt(value,lane)
  br i1 %40, label %53, label %77

; <label>:53                                      ; preds = %._crit_edge.40
  %54 = add i32 %WaveReadLaneAt117, %numValues.i.1.lcssa.29
  %55 = fadd fast float %WaveReadLaneAt110, %squaredValueSum.i.1.lcssa.30
  %56 = fadd fast float %WaveReadLaneAt111, %valueSum.i.1.lcssa.31
  %LegacyF32ToF16126 = call i32 @dx.op.legacyF32ToF16(i32 130, float %56)  ; LegacyF32ToF16(value)
  %LegacyF32ToF16125 = call i32 @dx.op.legacyF32ToF16(i32 130, float %55)  ; LegacyF32ToF16(value)
  %57 = shl i32 %LegacyF32ToF16125, 16
  %58 = or i32 %57, %LegacyF32ToF16126
  %59 = mul i32 %11, 8
  %60 = add i32 %10, %59
  %61 = getelementptr [128 x i32], [128 x i32] addrspace(3)* @"\01?PackedRowResultCache@@3PAY07$$CAIA.1dim", i32 0, i32 %60
  store i32 %58, i32 addrspace(3)* %61, align 4, !tbaa !37
  %62 = mul i32 %11, 8
  %63 = add i32 %10, %62
  %64 = getelementptr [128 x i32], [128 x i32] addrspace(3)* @"\01?NumValuesCache@@3PAY07$$CAIA.1dim", i32 0, i32 %63
  store i32 %54, i32 addrspace(3)* %64, align 4, !tbaa !37
  br label %77

.lr.ph18.39:                                      ; preds = %72, %.lr.ph18.39.preheader
  %c.i.017.32 = phi i32 [ %73, %72 ], [ 0, %.lr.ph18.39.preheader ]
  %numValues.i.116.33 = phi i32 [ %numValues.i.2.38, %72 ], [ %.7.28, %.lr.ph18.39.preheader ]
  %squaredValueSum.i.115.34 = phi float [ %squaredValueSum.i.2.37, %72 ], [ %..27, %.lr.ph18.39.preheader ]
  %valueSum.i.114.35 = phi float [ %valueSum.i.26.36, %72 ], [ %value.i.0..26, %.lr.ph18.39.preheader ]
  %65 = add i32 %48, %c.i.017.32
  %WaveReadLaneAt109 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %value.i.0.25, i32 %65)  ; WaveReadLaneAt(value,lane)
  %66 = fcmp fast une float %WaveReadLaneAt109, -1.000000e+00
  br i1 %66, label %67, label %72

; <label>:67                                      ; preds = %.lr.ph18.39
  %68 = fadd fast float %WaveReadLaneAt109, %valueSum.i.114.35
  %69 = fmul fast float %WaveReadLaneAt109, %WaveReadLaneAt109
  %70 = fadd fast float %69, %squaredValueSum.i.115.34
  %71 = add i32 %numValues.i.116.33, 1
  br label %72

; <label>:72                                      ; preds = %67, %.lr.ph18.39
  %valueSum.i.26.36 = phi float [ %68, %67 ], [ %valueSum.i.114.35, %.lr.ph18.39 ]
  %squaredValueSum.i.2.37 = phi float [ %70, %67 ], [ %squaredValueSum.i.115.34, %.lr.ph18.39 ]
  %numValues.i.2.38 = phi i32 [ %71, %67 ], [ %numValues.i.116.33, %.lr.ph18.39 ]
  %73 = add i32 %c.i.017.32, 1
  %74 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %cb_cbuffer, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %75 = extractvalue %dx.types.CBufRet.i32 %74, 3
  %76 = icmp ult i32 %73, %75
  br i1 %76, label %.lr.ph18.39, label %._crit_edge.40.loopexit

; <label>:77                                      ; preds = %53, %._crit_edge.40
  %.i1147 = add nuw nsw i32 %11, 4
  %78 = icmp ult i32 %.i1147, %9
  br i1 %78, label %79, label %.loopexit

; <label>:79                                      ; preds = %77
  %80 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %cb_cbuffer, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %81 = extractvalue %dx.types.CBufRet.i32 %80, 2
  %.i1149 = mul i32 %81, %.i1147
  %.i1151 = add i32 %.i1149, %.i1137
  %82 = add nsw i32 %.i1151, %.i0140
  %83 = and i32 %82, 1
  %84 = extractvalue %dx.types.CBufRet.i32 %80, 0
  %85 = icmp ne i32 %84, 0
  %86 = extractvalue %dx.types.CBufRet.i32 %80, 1
  %87 = xor i32 %83, 1
  %88 = icmp ne i32 %86, %87
  %89 = and i1 %85, %88
  %.i1153 = zext i1 %89 to i32
  %.i1155 = add i32 %.i1153, %.i1151
  %90 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %cb_cbuffer, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %91 = extractvalue %dx.types.CBufRet.i32 %90, 0
  %92 = extractvalue %dx.types.CBufRet.i32 %90, 1
  %93 = or i32 %.i1155, %.i0140
  %94 = icmp sgt i32 %93, -1
  %95 = icmp slt i32 %.i0140, %91
  %96 = and i1 %95, %94
  %97 = icmp slt i32 %.i1155, %92
  %98 = and i1 %97, %96
  %99 = and i1 %27, %98
  br i1 %99, label %100, label %._crit_edge.195

; <label>:100                                     ; preds = %79
  %TextureLoad99 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %g_inValue_texture_2d, i32 0, i32 %.i0140, i32 %.i1155, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %101 = extractvalue %dx.types.ResRet.f32 %TextureLoad99, 0
  br label %._crit_edge.195

._crit_edge.195:                                  ; preds = %100, %79
  %value.i.0.42 = phi float [ %101, %100 ], [ -1.000000e+00, %79 ]
  %102 = fcmp fast une float %value.i.0.42, -1.000000e+00
  %103 = and i1 %40, %102
  %104 = fmul fast float %value.i.0.42, %value.i.0.42
  %value.i.0..43 = select i1 %103, float %value.i.0.42, float 0.000000e+00
  %..44 = select i1 %103, float %104, float 0.000000e+00
  %.7.45 = zext i1 %103 to i32
  %.pre = extractvalue %dx.types.CBufRet.i32 %90, 3
  %105 = add nsw i32 %10, -8
  %106 = add i32 %105, %.pre
  %107 = select i1 %40, i32 %10, i32 %106
  %108 = add i32 %107, %44
  %109 = icmp eq i32 %.pre, 0
  br i1 %109, label %._crit_edge.57, label %.lr.ph18.56.preheader

.lr.ph18.56.preheader:                            ; preds = %._crit_edge.195
  br label %.lr.ph18.56

._crit_edge.57.loopexit:                          ; preds = %129
  br label %._crit_edge.57

._crit_edge.57:                                   ; preds = %._crit_edge.57.loopexit, %._crit_edge.195
  %numValues.i.1.lcssa.46 = phi i32 [ %.7.45, %._crit_edge.195 ], [ %numValues.i.2.55, %._crit_edge.57.loopexit ]
  %squaredValueSum.i.1.lcssa.47 = phi float [ %..44, %._crit_edge.195 ], [ %squaredValueSum.i.2.54, %._crit_edge.57.loopexit ]
  %valueSum.i.1.lcssa.48 = phi float [ %value.i.0..43, %._crit_edge.195 ], [ %valueSum.i.26.53, %._crit_edge.57.loopexit ]
  %WaveReadLaneAt108 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %valueSum.i.1.lcssa.48, i32 %UMin118)  ; WaveReadLaneAt(value,lane)
  %WaveReadLaneAt107 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %squaredValueSum.i.1.lcssa.47, i32 %UMin118)  ; WaveReadLaneAt(value,lane)
  %WaveReadLaneAt115 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %numValues.i.1.lcssa.46, i32 %UMin118)  ; WaveReadLaneAt(value,lane)
  br i1 %40, label %110, label %134

; <label>:110                                     ; preds = %._crit_edge.57
  %111 = add i32 %WaveReadLaneAt115, %numValues.i.1.lcssa.46
  %112 = fadd fast float %WaveReadLaneAt107, %squaredValueSum.i.1.lcssa.47
  %113 = fadd fast float %WaveReadLaneAt108, %valueSum.i.1.lcssa.48
  %LegacyF32ToF16124 = call i32 @dx.op.legacyF32ToF16(i32 130, float %113)  ; LegacyF32ToF16(value)
  %LegacyF32ToF16123 = call i32 @dx.op.legacyF32ToF16(i32 130, float %112)  ; LegacyF32ToF16(value)
  %114 = shl i32 %LegacyF32ToF16123, 16
  %115 = or i32 %114, %LegacyF32ToF16124
  %116 = mul i32 %.i1147, 8
  %117 = add i32 %10, %116
  %118 = getelementptr [128 x i32], [128 x i32] addrspace(3)* @"\01?PackedRowResultCache@@3PAY07$$CAIA.1dim", i32 0, i32 %117
  store i32 %115, i32 addrspace(3)* %118, align 4, !tbaa !37
  %119 = mul i32 %.i1147, 8
  %120 = add i32 %10, %119
  %121 = getelementptr [128 x i32], [128 x i32] addrspace(3)* @"\01?NumValuesCache@@3PAY07$$CAIA.1dim", i32 0, i32 %120
  store i32 %111, i32 addrspace(3)* %121, align 4, !tbaa !37
  br label %134

.lr.ph18.56:                                      ; preds = %129, %.lr.ph18.56.preheader
  %c.i.017.49 = phi i32 [ %130, %129 ], [ 0, %.lr.ph18.56.preheader ]
  %numValues.i.116.50 = phi i32 [ %numValues.i.2.55, %129 ], [ %.7.45, %.lr.ph18.56.preheader ]
  %squaredValueSum.i.115.51 = phi float [ %squaredValueSum.i.2.54, %129 ], [ %..44, %.lr.ph18.56.preheader ]
  %valueSum.i.114.52 = phi float [ %valueSum.i.26.53, %129 ], [ %value.i.0..43, %.lr.ph18.56.preheader ]
  %122 = add i32 %108, %c.i.017.49
  %WaveReadLaneAt106 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %value.i.0.42, i32 %122)  ; WaveReadLaneAt(value,lane)
  %123 = fcmp fast une float %WaveReadLaneAt106, -1.000000e+00
  br i1 %123, label %124, label %129

; <label>:124                                     ; preds = %.lr.ph18.56
  %125 = fadd fast float %WaveReadLaneAt106, %valueSum.i.114.52
  %126 = fmul fast float %WaveReadLaneAt106, %WaveReadLaneAt106
  %127 = fadd fast float %126, %squaredValueSum.i.115.51
  %128 = add i32 %numValues.i.116.50, 1
  br label %129

; <label>:129                                     ; preds = %124, %.lr.ph18.56
  %valueSum.i.26.53 = phi float [ %125, %124 ], [ %valueSum.i.114.52, %.lr.ph18.56 ]
  %squaredValueSum.i.2.54 = phi float [ %127, %124 ], [ %squaredValueSum.i.115.51, %.lr.ph18.56 ]
  %numValues.i.2.55 = phi i32 [ %128, %124 ], [ %numValues.i.116.50, %.lr.ph18.56 ]
  %130 = add i32 %c.i.017.49, 1
  %131 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %cb_cbuffer, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %132 = extractvalue %dx.types.CBufRet.i32 %131, 3
  %133 = icmp ult i32 %130, %132
  br i1 %133, label %.lr.ph18.56, label %._crit_edge.57.loopexit

; <label>:134                                     ; preds = %110, %._crit_edge.57
  %.i1157 = add nuw nsw i32 %11, 8
  %135 = icmp ult i32 %.i1157, %9
  br i1 %135, label %136, label %.loopexit

; <label>:136                                     ; preds = %134
  %137 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %cb_cbuffer, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %138 = extractvalue %dx.types.CBufRet.i32 %137, 2
  %.i1159 = mul i32 %138, %.i1157
  %.i1161 = add i32 %.i1159, %.i1137
  %139 = add nsw i32 %.i1161, %.i0140
  %140 = and i32 %139, 1
  %141 = extractvalue %dx.types.CBufRet.i32 %137, 0
  %142 = icmp ne i32 %141, 0
  %143 = extractvalue %dx.types.CBufRet.i32 %137, 1
  %144 = xor i32 %140, 1
  %145 = icmp ne i32 %143, %144
  %146 = and i1 %142, %145
  %.i1163 = zext i1 %146 to i32
  %.i1165 = add i32 %.i1163, %.i1161
  %147 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %cb_cbuffer, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %148 = extractvalue %dx.types.CBufRet.i32 %147, 0
  %149 = extractvalue %dx.types.CBufRet.i32 %147, 1
  %150 = or i32 %.i1165, %.i0140
  %151 = icmp sgt i32 %150, -1
  %152 = icmp slt i32 %.i0140, %148
  %153 = and i1 %152, %151
  %154 = icmp slt i32 %.i1165, %149
  %155 = and i1 %154, %153
  %156 = and i1 %27, %155
  br i1 %156, label %157, label %._crit_edge.194

; <label>:157                                     ; preds = %136
  %TextureLoad98 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %g_inValue_texture_2d, i32 0, i32 %.i0140, i32 %.i1165, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %158 = extractvalue %dx.types.ResRet.f32 %TextureLoad98, 0
  br label %._crit_edge.194

._crit_edge.194:                                  ; preds = %157, %136
  %value.i.0.59 = phi float [ %158, %157 ], [ -1.000000e+00, %136 ]
  %159 = fcmp fast une float %value.i.0.59, -1.000000e+00
  %160 = and i1 %40, %159
  %161 = fmul fast float %value.i.0.59, %value.i.0.59
  %value.i.0..60 = select i1 %160, float %value.i.0.59, float 0.000000e+00
  %..61 = select i1 %160, float %161, float 0.000000e+00
  %.7.62 = zext i1 %160 to i32
  %.pre196 = extractvalue %dx.types.CBufRet.i32 %147, 3
  %162 = add nsw i32 %10, -8
  %163 = add i32 %162, %.pre196
  %164 = select i1 %40, i32 %10, i32 %163
  %165 = add i32 %164, %44
  %166 = icmp eq i32 %.pre196, 0
  br i1 %166, label %._crit_edge.74, label %.lr.ph18.73.preheader

.lr.ph18.73.preheader:                            ; preds = %._crit_edge.194
  br label %.lr.ph18.73

._crit_edge.74.loopexit:                          ; preds = %186
  br label %._crit_edge.74

._crit_edge.74:                                   ; preds = %._crit_edge.74.loopexit, %._crit_edge.194
  %numValues.i.1.lcssa.63 = phi i32 [ %.7.62, %._crit_edge.194 ], [ %numValues.i.2.72, %._crit_edge.74.loopexit ]
  %squaredValueSum.i.1.lcssa.64 = phi float [ %..61, %._crit_edge.194 ], [ %squaredValueSum.i.2.71, %._crit_edge.74.loopexit ]
  %valueSum.i.1.lcssa.65 = phi float [ %value.i.0..60, %._crit_edge.194 ], [ %valueSum.i.26.70, %._crit_edge.74.loopexit ]
  %WaveReadLaneAt105 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %valueSum.i.1.lcssa.65, i32 %UMin118)  ; WaveReadLaneAt(value,lane)
  %WaveReadLaneAt104 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %squaredValueSum.i.1.lcssa.64, i32 %UMin118)  ; WaveReadLaneAt(value,lane)
  %WaveReadLaneAt113 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %numValues.i.1.lcssa.63, i32 %UMin118)  ; WaveReadLaneAt(value,lane)
  br i1 %40, label %167, label %.preheader

; <label>:167                                     ; preds = %._crit_edge.74
  %168 = add i32 %WaveReadLaneAt113, %numValues.i.1.lcssa.63
  %169 = fadd fast float %WaveReadLaneAt104, %squaredValueSum.i.1.lcssa.64
  %170 = fadd fast float %WaveReadLaneAt105, %valueSum.i.1.lcssa.65
  %LegacyF32ToF16122 = call i32 @dx.op.legacyF32ToF16(i32 130, float %170)  ; LegacyF32ToF16(value)
  %LegacyF32ToF16121 = call i32 @dx.op.legacyF32ToF16(i32 130, float %169)  ; LegacyF32ToF16(value)
  %171 = shl i32 %LegacyF32ToF16121, 16
  %172 = or i32 %171, %LegacyF32ToF16122
  %173 = mul i32 %.i1157, 8
  %174 = add i32 %10, %173
  %175 = getelementptr [128 x i32], [128 x i32] addrspace(3)* @"\01?PackedRowResultCache@@3PAY07$$CAIA.1dim", i32 0, i32 %174
  store i32 %172, i32 addrspace(3)* %175, align 4, !tbaa !37
  %176 = mul i32 %.i1157, 8
  %177 = add i32 %10, %176
  %178 = getelementptr [128 x i32], [128 x i32] addrspace(3)* @"\01?NumValuesCache@@3PAY07$$CAIA.1dim", i32 0, i32 %177
  store i32 %168, i32 addrspace(3)* %178, align 4, !tbaa !37
  br label %.preheader

.lr.ph18.73:                                      ; preds = %186, %.lr.ph18.73.preheader
  %c.i.017.66 = phi i32 [ %187, %186 ], [ 0, %.lr.ph18.73.preheader ]
  %numValues.i.116.67 = phi i32 [ %numValues.i.2.72, %186 ], [ %.7.62, %.lr.ph18.73.preheader ]
  %squaredValueSum.i.115.68 = phi float [ %squaredValueSum.i.2.71, %186 ], [ %..61, %.lr.ph18.73.preheader ]
  %valueSum.i.114.69 = phi float [ %valueSum.i.26.70, %186 ], [ %value.i.0..60, %.lr.ph18.73.preheader ]
  %179 = add i32 %165, %c.i.017.66
  %WaveReadLaneAt103 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %value.i.0.59, i32 %179)  ; WaveReadLaneAt(value,lane)
  %180 = fcmp fast une float %WaveReadLaneAt103, -1.000000e+00
  br i1 %180, label %181, label %186

; <label>:181                                     ; preds = %.lr.ph18.73
  %182 = fadd fast float %WaveReadLaneAt103, %valueSum.i.114.69
  %183 = fmul fast float %WaveReadLaneAt103, %WaveReadLaneAt103
  %184 = fadd fast float %183, %squaredValueSum.i.115.68
  %185 = add i32 %numValues.i.116.67, 1
  br label %186

; <label>:186                                     ; preds = %181, %.lr.ph18.73
  %valueSum.i.26.70 = phi float [ %182, %181 ], [ %valueSum.i.114.69, %.lr.ph18.73 ]
  %squaredValueSum.i.2.71 = phi float [ %184, %181 ], [ %squaredValueSum.i.115.68, %.lr.ph18.73 ]
  %numValues.i.2.72 = phi i32 [ %185, %181 ], [ %numValues.i.116.67, %.lr.ph18.73 ]
  %187 = add i32 %c.i.017.66, 1
  %188 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %cb_cbuffer, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %189 = extractvalue %dx.types.CBufRet.i32 %188, 3
  %190 = icmp ult i32 %187, %189
  br i1 %190, label %.lr.ph18.73, label %._crit_edge.74.loopexit

.preheader:                                       ; preds = %167, %._crit_edge.74
  %.i1167 = add nuw nsw i32 %11, 12
  %191 = icmp ult i32 %.i1167, %9
  br i1 %191, label %192, label %.loopexit

; <label>:192                                     ; preds = %.preheader
  %193 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %cb_cbuffer, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %194 = extractvalue %dx.types.CBufRet.i32 %193, 2
  %.i1169 = mul i32 %194, %.i1167
  %.i1171 = add i32 %.i1169, %.i1137
  %195 = add nsw i32 %.i1171, %.i0140
  %196 = and i32 %195, 1
  %197 = extractvalue %dx.types.CBufRet.i32 %193, 0
  %198 = icmp ne i32 %197, 0
  %199 = extractvalue %dx.types.CBufRet.i32 %193, 1
  %200 = xor i32 %196, 1
  %201 = icmp ne i32 %199, %200
  %202 = and i1 %198, %201
  %.i1173 = zext i1 %202 to i32
  %.i1175 = add i32 %.i1173, %.i1171
  %203 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %cb_cbuffer, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %204 = extractvalue %dx.types.CBufRet.i32 %203, 0
  %205 = extractvalue %dx.types.CBufRet.i32 %203, 1
  %206 = or i32 %.i1175, %.i0140
  %207 = icmp sgt i32 %206, -1
  %208 = icmp slt i32 %.i0140, %204
  %209 = and i1 %208, %207
  %210 = icmp slt i32 %.i1175, %205
  %211 = and i1 %210, %209
  %212 = and i1 %27, %211
  br i1 %212, label %213, label %._crit_edge

; <label>:213                                     ; preds = %192
  %TextureLoad = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %g_inValue_texture_2d, i32 0, i32 %.i0140, i32 %.i1175, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %214 = extractvalue %dx.types.ResRet.f32 %TextureLoad, 0
  br label %._crit_edge

._crit_edge:                                      ; preds = %213, %192
  %value.i.0.76 = phi float [ %214, %213 ], [ -1.000000e+00, %192 ]
  %215 = fcmp fast une float %value.i.0.76, -1.000000e+00
  %216 = and i1 %40, %215
  %217 = fmul fast float %value.i.0.76, %value.i.0.76
  %value.i.0..77 = select i1 %216, float %value.i.0.76, float 0.000000e+00
  %..78 = select i1 %216, float %217, float 0.000000e+00
  %.7.79 = zext i1 %216 to i32
  %.pre198 = extractvalue %dx.types.CBufRet.i32 %203, 3
  %218 = add nsw i32 %10, -8
  %219 = add i32 %218, %.pre198
  %220 = select i1 %40, i32 %10, i32 %219
  %221 = add i32 %220, %44
  %222 = icmp eq i32 %.pre198, 0
  br i1 %222, label %._crit_edge.91, label %.lr.ph18.90.preheader

.lr.ph18.90.preheader:                            ; preds = %._crit_edge
  br label %.lr.ph18.90

._crit_edge.91.loopexit:                          ; preds = %242
  br label %._crit_edge.91

._crit_edge.91:                                   ; preds = %._crit_edge.91.loopexit, %._crit_edge
  %numValues.i.1.lcssa.80 = phi i32 [ %.7.79, %._crit_edge ], [ %numValues.i.2.89, %._crit_edge.91.loopexit ]
  %squaredValueSum.i.1.lcssa.81 = phi float [ %..78, %._crit_edge ], [ %squaredValueSum.i.2.88, %._crit_edge.91.loopexit ]
  %valueSum.i.1.lcssa.82 = phi float [ %value.i.0..77, %._crit_edge ], [ %valueSum.i.26.87, %._crit_edge.91.loopexit ]
  %WaveReadLaneAt102 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %valueSum.i.1.lcssa.82, i32 %UMin118)  ; WaveReadLaneAt(value,lane)
  %WaveReadLaneAt101 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %squaredValueSum.i.1.lcssa.81, i32 %UMin118)  ; WaveReadLaneAt(value,lane)
  %WaveReadLaneAt112 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %numValues.i.1.lcssa.80, i32 %UMin118)  ; WaveReadLaneAt(value,lane)
  br i1 %40, label %223, label %"\01?FilterHorizontally@@YAXV?$vector@I$01@@I@Z.exit"

; <label>:223                                     ; preds = %._crit_edge.91
  %224 = add i32 %WaveReadLaneAt112, %numValues.i.1.lcssa.80
  %225 = fadd fast float %WaveReadLaneAt101, %squaredValueSum.i.1.lcssa.81
  %226 = fadd fast float %WaveReadLaneAt102, %valueSum.i.1.lcssa.82
  %LegacyF32ToF16120 = call i32 @dx.op.legacyF32ToF16(i32 130, float %226)  ; LegacyF32ToF16(value)
  %LegacyF32ToF16 = call i32 @dx.op.legacyF32ToF16(i32 130, float %225)  ; LegacyF32ToF16(value)
  %227 = shl i32 %LegacyF32ToF16, 16
  %228 = or i32 %227, %LegacyF32ToF16120
  %229 = mul i32 %.i1167, 8
  %230 = add i32 %10, %229
  %231 = getelementptr [128 x i32], [128 x i32] addrspace(3)* @"\01?PackedRowResultCache@@3PAY07$$CAIA.1dim", i32 0, i32 %230
  store i32 %228, i32 addrspace(3)* %231, align 4, !tbaa !37
  %232 = mul i32 %.i1167, 8
  %233 = add i32 %10, %232
  %234 = getelementptr [128 x i32], [128 x i32] addrspace(3)* @"\01?NumValuesCache@@3PAY07$$CAIA.1dim", i32 0, i32 %233
  store i32 %224, i32 addrspace(3)* %234, align 4, !tbaa !37
  br label %"\01?FilterHorizontally@@YAXV?$vector@I$01@@I@Z.exit"

.lr.ph18.90:                                      ; preds = %242, %.lr.ph18.90.preheader
  %c.i.017.83 = phi i32 [ %243, %242 ], [ 0, %.lr.ph18.90.preheader ]
  %numValues.i.116.84 = phi i32 [ %numValues.i.2.89, %242 ], [ %.7.79, %.lr.ph18.90.preheader ]
  %squaredValueSum.i.115.85 = phi float [ %squaredValueSum.i.2.88, %242 ], [ %..78, %.lr.ph18.90.preheader ]
  %valueSum.i.114.86 = phi float [ %valueSum.i.26.87, %242 ], [ %value.i.0..77, %.lr.ph18.90.preheader ]
  %235 = add i32 %221, %c.i.017.83
  %WaveReadLaneAt = call float @dx.op.waveReadLaneAt.f32(i32 117, float %value.i.0.76, i32 %235)  ; WaveReadLaneAt(value,lane)
  %236 = fcmp fast une float %WaveReadLaneAt, -1.000000e+00
  br i1 %236, label %237, label %242

; <label>:237                                     ; preds = %.lr.ph18.90
  %238 = fadd fast float %WaveReadLaneAt, %valueSum.i.114.86
  %239 = fmul fast float %WaveReadLaneAt, %WaveReadLaneAt
  %240 = fadd fast float %239, %squaredValueSum.i.115.85
  %241 = add i32 %numValues.i.116.84, 1
  br label %242

; <label>:242                                     ; preds = %237, %.lr.ph18.90
  %valueSum.i.26.87 = phi float [ %238, %237 ], [ %valueSum.i.114.86, %.lr.ph18.90 ]
  %squaredValueSum.i.2.88 = phi float [ %240, %237 ], [ %squaredValueSum.i.115.85, %.lr.ph18.90 ]
  %numValues.i.2.89 = phi i32 [ %241, %237 ], [ %numValues.i.116.84, %.lr.ph18.90 ]
  %243 = add i32 %c.i.017.83, 1
  %244 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %cb_cbuffer, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %245 = extractvalue %dx.types.CBufRet.i32 %244, 3
  %246 = icmp ult i32 %243, %245
  br i1 %246, label %.lr.ph18.90, label %._crit_edge.91.loopexit

.loopexit:                                        ; preds = %.preheader, %134, %77, %0
  %.lcssa.i1 = phi i32 [ %11, %0 ], [ %.i1147, %77 ], [ %.i1157, %134 ], [ %.i1167, %.preheader ]
  %247 = icmp ult i32 %10, 8
  br i1 %247, label %248, label %"\01?FilterHorizontally@@YAXV?$vector@I$01@@I@Z.exit"

; <label>:248                                     ; preds = %.loopexit
  %249 = mul i32 %.lcssa.i1, 8
  %250 = add i32 %10, %249
  %251 = getelementptr [128 x i32], [128 x i32] addrspace(3)* @"\01?NumValuesCache@@3PAY07$$CAIA.1dim", i32 0, i32 %250
  store i32 0, i32 addrspace(3)* %251, align 4, !tbaa !37
  br label %"\01?FilterHorizontally@@YAXV?$vector@I$01@@I@Z.exit"

"\01?FilterHorizontally@@YAXV?$vector@I$01@@I@Z.exit": ; preds = %248, %.loopexit, %223, %._crit_edge.91
  call void @dx.op.barrier(i32 80, i32 9)  ; Barrier(barrierMode)
  %252 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %cb_cbuffer, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %253 = extractvalue %dx.types.CBufRet.i32 %252, 2
  %254 = mul i32 %253, %6
  %255 = add nsw i32 %254, %5
  %256 = and i32 %255, 1
  %257 = extractvalue %dx.types.CBufRet.i32 %252, 0
  %258 = icmp ne i32 %257, 0
  %259 = extractvalue %dx.types.CBufRet.i32 %252, 1
  %260 = xor i32 %256, 1
  %261 = icmp ne i32 %259, %260
  %262 = and i1 %258, %261
  %.i1177 = zext i1 %262 to i32
  %.i1179 = add i32 %.i1177, %254
  %263 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %cb_cbuffer, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %264 = extractvalue %dx.types.CBufRet.i32 %263, 2
  %265 = icmp eq i32 %264, 0
  br i1 %265, label %"\01?FilterVertically@@YAXV?$vector@I$01@@0@Z.exit", label %.lr.ph.preheader

.lr.ph.preheader:                                 ; preds = %"\01?FilterHorizontally@@YAXV?$vector@I$01@@I@Z.exit"
  br label %.lr.ph

.lr.ph:                                           ; preds = %281, %.lr.ph.preheader
  %valueSum.i.2.011 = phi float [ %valueSum.i.2.1, %281 ], [ 0.000000e+00, %.lr.ph.preheader ]
  %squaredValueSum.i.3.010 = phi float [ %squaredValueSum.i.3.1, %281 ], [ 0.000000e+00, %.lr.ph.preheader ]
  %numValues.i.4.09 = phi i32 [ %numValues.i.4.1, %281 ], [ 0, %.lr.ph.preheader ]
  %r.i.08 = phi i32 [ %282, %281 ], [ 0, %.lr.ph.preheader ]
  %266 = add i32 %r.i.08, %3
  %267 = mul i32 %266, 8
  %268 = add i32 %2, %267
  %269 = getelementptr [128 x i32], [128 x i32] addrspace(3)* @"\01?NumValuesCache@@3PAY07$$CAIA.1dim", i32 0, i32 %268
  %270 = load i32, i32 addrspace(3)* %269, align 4, !tbaa !37
  %271 = icmp eq i32 %270, 0
  br i1 %271, label %281, label %272

; <label>:272                                     ; preds = %.lr.ph
  %273 = mul i32 %266, 8
  %274 = add i32 %2, %273
  %275 = getelementptr [128 x i32], [128 x i32] addrspace(3)* @"\01?PackedRowResultCache@@3PAY07$$CAIA.1dim", i32 0, i32 %274
  %276 = load i32, i32 addrspace(3)* %275, align 4, !tbaa !37
  %LegacyF16ToF32127 = call float @dx.op.legacyF16ToF32(i32 131, i32 %276)  ; LegacyF16ToF32(value)
  %277 = lshr i32 %276, 16
  %LegacyF16ToF32 = call float @dx.op.legacyF16ToF32(i32 131, i32 %277)  ; LegacyF16ToF32(value)
  %278 = fadd fast float %LegacyF16ToF32127, %valueSum.i.2.011
  %279 = fadd fast float %LegacyF16ToF32, %squaredValueSum.i.3.010
  %280 = add i32 %270, %numValues.i.4.09
  br label %281

; <label>:281                                     ; preds = %272, %.lr.ph
  %numValues.i.4.1 = phi i32 [ %280, %272 ], [ %numValues.i.4.09, %.lr.ph ]
  %squaredValueSum.i.3.1 = phi float [ %279, %272 ], [ %squaredValueSum.i.3.010, %.lr.ph ]
  %valueSum.i.2.1 = phi float [ %278, %272 ], [ %valueSum.i.2.011, %.lr.ph ]
  %282 = add i32 %r.i.08, 1
  %283 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %cb_cbuffer, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %284 = extractvalue %dx.types.CBufRet.i32 %283, 2
  %285 = icmp ult i32 %282, %284
  br i1 %285, label %.lr.ph, label %"\01?FilterVertically@@YAXV?$vector@I$01@@0@Z.exit.loopexit"

"\01?FilterVertically@@YAXV?$vector@I$01@@0@Z.exit.loopexit": ; preds = %281
  br label %"\01?FilterVertically@@YAXV?$vector@I$01@@0@Z.exit"

"\01?FilterVertically@@YAXV?$vector@I$01@@0@Z.exit": ; preds = %"\01?FilterVertically@@YAXV?$vector@I$01@@0@Z.exit.loopexit", %"\01?FilterHorizontally@@YAXV?$vector@I$01@@I@Z.exit"
  %valueSum.i.2.0.lcssa = phi float [ 0.000000e+00, %"\01?FilterHorizontally@@YAXV?$vector@I$01@@I@Z.exit" ], [ %valueSum.i.2.1, %"\01?FilterVertically@@YAXV?$vector@I$01@@0@Z.exit.loopexit" ]
  %squaredValueSum.i.3.0.lcssa = phi float [ 0.000000e+00, %"\01?FilterHorizontally@@YAXV?$vector@I$01@@I@Z.exit" ], [ %squaredValueSum.i.3.1, %"\01?FilterVertically@@YAXV?$vector@I$01@@0@Z.exit.loopexit" ]
  %numValues.i.4.0.lcssa = phi i32 [ 0, %"\01?FilterHorizontally@@YAXV?$vector@I$01@@I@Z.exit" ], [ %numValues.i.4.1, %"\01?FilterVertically@@YAXV?$vector@I$01@@0@Z.exit.loopexit" ]
  %UMax119 = call i32 @dx.op.binary.i32(i32 39, i32 %numValues.i.4.0.lcssa, i32 1)  ; UMax(a,b)
  %286 = uitofp i32 %UMax119 to float
  %287 = fdiv fast float 1.000000e+00, %286
  %288 = fmul fast float %287, %valueSum.i.2.0.lcssa
  %289 = uitofp i32 %numValues.i.4.0.lcssa to float
  %UMax = call i32 @dx.op.binary.i32(i32 39, i32 %numValues.i.4.0.lcssa, i32 2)  ; UMax(a,b)
  %290 = add i32 %UMax, -1
  %291 = uitofp i32 %290 to float
  %292 = fdiv fast float %289, %291
  %293 = fmul fast float %287, %squaredValueSum.i.3.0.lcssa
  %294 = fmul fast float %288, %288
  %295 = fsub fast float %293, %294
  %296 = fmul fast float %295, %292
  %FMax = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %296)  ; FMax(a,b)
  %297 = icmp ne i32 %numValues.i.4.0.lcssa, 0
  %.i0180 = select i1 %297, float %288, float -1.000000e+00
  %.i1181 = select i1 %297, float %FMax, float -1.000000e+00
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %g_outMeanVariance_UAV_2d, i32 %5, i32 %.i1179, i32 undef, float %.i0180, float %.i1181, float %.i0180, float %.i0180, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.groupId.i32(i32, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadIdInGroup.i32(i32, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.flattenedThreadIdInGroup.i32(i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadId.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #1

; Function Attrs: noduplicate nounwind
declare void @dx.op.barrier(i32, i32) #2

; Function Attrs: nounwind readnone
declare i32 @dx.op.waveGetLaneCount(i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.waveGetLaneIndex(i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind
declare float @dx.op.waveReadLaneAt.f32(i32, float, i32) #3

; Function Attrs: nounwind
declare i32 @dx.op.waveReadLaneAt.i32(i32, i32, i32) #3

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.legacyF32ToF16(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind
declare void @dx.op.textureStore.f32(i32, %dx.types.Handle, i32, i32, i32, float, float, float, float, i8) #3

; Function Attrs: nounwind readnone
declare float @dx.op.legacyF16ToF32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #1

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind readonly }
attributes #2 = { noduplicate nounwind }
attributes #3 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.typeAnnotations = !{!12, !30}
!dx.entryPoints = !{!34}

!0 = !{!"dxc 1.2"}
!1 = !{i32 1, i32 3}
!2 = !{i32 1, i32 4}
!3 = !{!"cs", i32 6, i32 3}
!4 = !{!5, !8, !10, null}
!5 = !{!6}
!6 = !{i32 0, %"class.Texture2D<float>"* undef, !"g_inValue", i32 0, i32 0, i32 1, i32 2, i32 0, !7}
!7 = !{i32 0, i32 9}
!8 = !{!9}
!9 = !{i32 0, %"class.RWTexture2D<vector<float, 2> >"* undef, !"g_outMeanVariance", i32 0, i32 0, i32 1, i32 2, i1 false, i1 false, i1 false, !7}
!10 = !{!11}
!11 = !{i32 0, %cb* undef, !"cb", i32 0, i32 0, i32 1, i32 32, null}
!12 = !{i32 0, %"class.Texture2D<float>" undef, !13, %"class.Texture2D<float>::mips_type" undef, !16, %"class.RWTexture2D<vector<float, 2> >" undef, !18, %"class.RWTexture2D<vector<float, 4> >" undef, !19, %struct.CalculateMeanVarianceConstantBuffer undef, !20, %cb undef, !28}
!13 = !{i32 8, !14, !15}
!14 = !{i32 6, !"h", i32 3, i32 0, i32 7, i32 9}
!15 = !{i32 6, !"mips", i32 3, i32 4}
!16 = !{i32 4, !17}
!17 = !{i32 6, !"handle", i32 3, i32 0, i32 7, i32 5}
!18 = !{i32 8, !14}
!19 = !{i32 16, !14}
!20 = !{i32 32, !21, !22, !23, !24, !25, !26, !27}
!21 = !{i32 6, !"textureDim", i32 3, i32 0, i32 7, i32 5}
!22 = !{i32 6, !"kernelWidth", i32 3, i32 8, i32 7, i32 5}
!23 = !{i32 6, !"kernelRadius", i32 3, i32 12, i32 7, i32 5}
!24 = !{i32 6, !"doCheckerboardSampling", i32 3, i32 16, i32 7, i32 4}
!25 = !{i32 6, !"areEvenPixelsActive", i32 3, i32 20, i32 7, i32 4}
!26 = !{i32 6, !"pixelStepY", i32 3, i32 24, i32 7, i32 5}
!27 = !{i32 6, !"padding", i32 3, i32 28, i32 7, i32 9}
!28 = !{i32 32, !29}
!29 = !{i32 6, !"cb", i32 3, i32 0}
!30 = !{i32 1, void ()* @main, !31}
!31 = !{!32}
!32 = !{i32 0, !33, !33}
!33 = !{}
!34 = !{void ()* @main, !"main", null, !4, !35}
!35 = !{i32 0, i64 524288, i32 4, !36}
!36 = !{i32 8, i32 8, i32 1}
!37 = !{!38, !38, i64 0}
!38 = !{!"int", !39, i64 0}
!39 = !{!"omnipotent char", !40, i64 0}
!40 = !{!"Simple C/C++ TBAA"}

#endif

const unsigned char g_pCalculateMeanVariance_SeparableFilterCS_CheckerboardSampling_AnyToAnyWaveReadLaneAt[] = {
  0x44, 0x58, 0x42, 0x43, 0x38, 0xce, 0x78, 0x90, 0xe6, 0xf0, 0xd7, 0x1f,
  0xc4, 0xf0, 0x0d, 0x27, 0x02, 0x36, 0x23, 0x74, 0x01, 0x00, 0x00, 0x00,
  0x60, 0x1f, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00,
  0x44, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00,
  0xd8, 0x00, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x4f, 0x53, 0x47, 0x31, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x50, 0x53, 0x56, 0x30, 0x6c, 0x00, 0x00, 0x00,
  0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x44, 0x58, 0x49, 0x4c, 0x80, 0x1e, 0x00, 0x00, 0x63, 0x00, 0x05, 0x00,
  0xa0, 0x07, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4c, 0x03, 0x01, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x68, 0x1e, 0x00, 0x00, 0x42, 0x43, 0xc0, 0xde,
  0x21, 0x0c, 0x00, 0x00, 0x97, 0x07, 0x00, 0x00, 0x0b, 0x82, 0x20, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91,
  0x41, 0xc8, 0x04, 0x49, 0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0c,
  0x25, 0x05, 0x08, 0x19, 0x1e, 0x04, 0x8b, 0x62, 0x80, 0x18, 0x45, 0x02,
  0x42, 0x92, 0x0b, 0x42, 0xc4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4b,
  0x0a, 0x32, 0x62, 0x88, 0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xa5,
  0x00, 0x19, 0x32, 0x42, 0xe4, 0x48, 0x0e, 0x90, 0x11, 0x23, 0xc4, 0x50,
  0x41, 0x51, 0x81, 0x8c, 0xe1, 0x83, 0xe5, 0x8a, 0x04, 0x31, 0x46, 0x06,
  0x51, 0x18, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x1b, 0x8c, 0xe0, 0xff,
  0xff, 0xff, 0xff, 0x07, 0x40, 0x02, 0xa8, 0x0d, 0x86, 0xf0, 0xff, 0xff,
  0xff, 0xff, 0x03, 0x20, 0x01, 0xd5, 0x06, 0x63, 0xf8, 0xff, 0xff, 0xff,
  0xff, 0x01, 0x60, 0x00, 0x69, 0x03, 0x41, 0xfc, 0xff, 0xff, 0xff, 0xff,
  0x00, 0x48, 0x00, 0x00, 0x49, 0x18, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x13, 0x82, 0x60, 0x42, 0x20, 0x4c, 0x08, 0x86, 0x09, 0x01, 0x01, 0x00,
  0x89, 0x20, 0x00, 0x00, 0x75, 0x00, 0x00, 0x00, 0x32, 0x22, 0x88, 0x09,
  0x20, 0x64, 0x85, 0x04, 0x13, 0x23, 0xa4, 0x84, 0x04, 0x13, 0x23, 0xe3,
  0x84, 0xa1, 0x90, 0x14, 0x12, 0x4c, 0x8c, 0x8c, 0x0b, 0x84, 0xc4, 0x4c,
  0x10, 0xd4, 0xc1, 0x0c, 0xc0, 0x1c, 0x01, 0x18, 0xcc, 0x14, 0x06, 0xe3,
  0xc0, 0x0e, 0xe1, 0x30, 0x0f, 0xf3, 0xe0, 0x06, 0xb4, 0x50, 0x0e, 0xf8,
  0x40, 0x0f, 0xf5, 0x20, 0x0f, 0xe5, 0x20, 0x07, 0xa4, 0xc0, 0x07, 0xe6,
  0xc0, 0x0e, 0xef, 0x10, 0x0e, 0xf4, 0xe0, 0x07, 0x7a, 0xa0, 0x07, 0xed,
  0x90, 0x0e, 0xf0, 0x30, 0x0f, 0xbf, 0x40, 0x0f, 0xf9, 0x00, 0x0f, 0xe5,
  0x80, 0x82, 0x60, 0x26, 0x6b, 0x1c, 0xd8, 0x21, 0x1c, 0xe6, 0x61, 0x1e,
  0xdc, 0x80, 0x16, 0xca, 0x01, 0x1f, 0xe8, 0xa1, 0x1e, 0xe4, 0xa1, 0x1c,
  0xe4, 0x80, 0x14, 0xf8, 0xc0, 0x1c, 0xd8, 0xe1, 0x1d, 0xc2, 0x81, 0x1e,
  0xfc, 0x00, 0x09, 0x80, 0x40, 0xc3, 0x30, 0x82, 0x00, 0xcc, 0x44, 0x06,
  0xe3, 0xc0, 0x0e, 0xe1, 0x30, 0x0f, 0xf3, 0xe0, 0x06, 0xb2, 0x70, 0x0b,
  0xb4, 0x50, 0x0e, 0xf8, 0x40, 0x0f, 0xf5, 0x20, 0x0f, 0xe5, 0x20, 0x07,
  0xa4, 0xc0, 0x07, 0xf6, 0x50, 0x0e, 0xe3, 0x40, 0x0f, 0xef, 0x20, 0x0f,
  0x7c, 0x60, 0x0e, 0xec, 0xf0, 0x0e, 0xe1, 0x40, 0x0f, 0x6c, 0x00, 0x06,
  0x72, 0xe0, 0x07, 0x60, 0xe0, 0x07, 0x28, 0x28, 0xc8, 0x18, 0x46, 0x10,
  0x82, 0x53, 0x03, 0x69, 0x8a, 0x28, 0x61, 0xf2, 0x39, 0x60, 0x11, 0xa8,
  0x05, 0x98, 0x08, 0x93, 0x00, 0x9a, 0x17, 0x88, 0x10, 0xa0, 0x11, 0x08,
  0xce, 0x69, 0xa4, 0x09, 0x68, 0xa6, 0x8d, 0x2a, 0x0a, 0x22, 0x42, 0x07,
  0x12, 0x04, 0x41, 0x10, 0x00, 0x27, 0x08, 0x01, 0x0a, 0x12, 0x52, 0x12,
  0x30, 0x20, 0x18, 0x44, 0x60, 0x86, 0x11, 0x80, 0x12, 0x38, 0xf4, 0x94,
  0x21, 0x08, 0x02, 0x8a, 0x8a, 0x10, 0x04, 0x34, 0x1d, 0x35, 0x5c, 0xfe,
  0x84, 0x3d, 0x84, 0xe4, 0x73, 0x1b, 0x55, 0xac, 0xc4, 0xe4, 0x23, 0xb7,
  0x8d, 0x88, 0x20, 0x08, 0x82, 0x39, 0x02, 0x84, 0xac, 0x7b, 0x86, 0xcb,
  0x9f, 0xb0, 0x87, 0x90, 0xfc, 0x10, 0x68, 0x86, 0x85, 0x40, 0xc1, 0x55,
  0x88, 0x2a, 0xc0, 0x02, 0xca, 0xca, 0xe0, 0x04, 0x01, 0x6d, 0x37, 0x0d,
  0x97, 0x3f, 0x61, 0x0f, 0x21, 0xf9, 0x2b, 0x21, 0xad, 0xc4, 0xe4, 0x17,
  0xb7, 0x8d, 0x0a, 0x00, 0x00, 0x80, 0xa0, 0x28, 0x5d, 0x80, 0x05, 0x41,
  0x10, 0x04, 0x41, 0x40, 0x5e, 0x21, 0x80, 0x00, 0x08, 0x08, 0x2c, 0x44,
  0x10, 0x04, 0x01, 0x89, 0x65, 0x08, 0x02, 0x80, 0xc8, 0x42, 0x00, 0x01,
  0x00, 0x90, 0x59, 0x16, 0x27, 0xc0, 0x82, 0x20, 0x00, 0x00, 0x00, 0xb0,
  0x08, 0x2d, 0x03, 0x10, 0x04, 0xa4, 0xce, 0x11, 0x04, 0xc5, 0xc0, 0x02,
  0x2b, 0x08, 0x58, 0x6a, 0x07, 0x02, 0x86, 0x11, 0x08, 0x60, 0x26, 0x32,
  0x18, 0x07, 0x76, 0x08, 0x87, 0x79, 0x98, 0x07, 0x37, 0x90, 0x85, 0x5b,
  0xa0, 0x85, 0x72, 0xc0, 0x07, 0x7a, 0xa8, 0x07, 0x79, 0x28, 0x07, 0x39,
  0x20, 0x05, 0x3e, 0xb0, 0x87, 0x72, 0x18, 0x07, 0x7a, 0x78, 0x07, 0x79,
  0xe0, 0x03, 0x73, 0x60, 0x87, 0x77, 0x08, 0x07, 0x7a, 0x60, 0x03, 0x30,
  0xa0, 0x03, 0x3f, 0x00, 0x03, 0x3f, 0x40, 0x01, 0x3c, 0x47, 0x00, 0x0a,
  0x53, 0x00, 0x83, 0x08, 0xc1, 0x00, 0x00, 0x00, 0x13, 0x14, 0x72, 0xc0,
  0x87, 0x74, 0x60, 0x87, 0x36, 0x68, 0x87, 0x79, 0x68, 0x03, 0x72, 0xc0,
  0x87, 0x0d, 0xaf, 0x50, 0x0e, 0x6d, 0xd0, 0x0e, 0x7a, 0x50, 0x0e, 0x6d,
  0x00, 0x0f, 0x7a, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d,
  0x90, 0x0e, 0x71, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x78,
  0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x71, 0x60, 0x07, 0x7a,
  0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x73,
  0x20, 0x07, 0x6d, 0x90, 0x0e, 0x76, 0x40, 0x07, 0x7a, 0x60, 0x07, 0x74,
  0xd0, 0x06, 0xe6, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d,
  0x60, 0x0e, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe6,
  0x60, 0x07, 0x74, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x6d, 0xe0, 0x0e, 0x78,
  0xa0, 0x07, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x76,
  0x40, 0x07, 0x3a, 0x0f, 0x84, 0x90, 0x21, 0x23, 0x45, 0x44, 0x00, 0xce,
  0x00, 0x80, 0x69, 0x03, 0x00, 0xa6, 0x0e, 0x00, 0x80, 0xec, 0xc0, 0x01,
  0x80, 0xec, 0xc0, 0x01, 0x60, 0xc8, 0xf3, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x90, 0x27, 0x02, 0x02, 0x20, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x21, 0x4f, 0x04, 0x04, 0x40,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x9e, 0x09, 0x08,
  0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x11,
  0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x79,
  0x32, 0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18,
  0xf2, 0x6c, 0x40, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x30, 0xe4, 0x99, 0x80, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x60, 0xc8, 0x33, 0x01, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xc0, 0x90, 0xc7, 0x03, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x80, 0x21, 0x0f, 0x18, 0x00, 0x01, 0x40, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x90, 0x47, 0x0c, 0x80, 0x00, 0x20,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0x23, 0x06, 0x40,
  0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xe4, 0x21,
  0x03, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18,
  0xf2, 0x98, 0x01, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0c, 0x79, 0xd0, 0x00, 0x08, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x86, 0x3c, 0x6a, 0x00, 0x04, 0x40, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x9e, 0x36, 0x00, 0x02, 0x40, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x2c, 0x10, 0x00, 0x00, 0x00,
  0x15, 0x00, 0x00, 0x00, 0x32, 0x1e, 0x98, 0x18, 0x19, 0x11, 0x4c, 0x90,
  0x8c, 0x09, 0x26, 0x47, 0xc6, 0x04, 0x43, 0x0a, 0x4a, 0xa0, 0x0c, 0x0a,
  0xa1, 0x18, 0x46, 0x00, 0x8a, 0xa0, 0x24, 0x0a, 0xa8, 0x20, 0xca, 0xa1,
  0x14, 0x0a, 0xa4, 0x30, 0x0a, 0xa5, 0x60, 0x0a, 0x87, 0xe4, 0x11, 0x80,
  0x02, 0x04, 0x04, 0x22, 0x76, 0x04, 0x80, 0x8c, 0x19, 0x00, 0x3a, 0x66,
  0x00, 0x28, 0x99, 0x01, 0x20, 0x65, 0x06, 0x80, 0x96, 0x19, 0x00, 0x62,
  0x66, 0x00, 0x88, 0x98, 0x01, 0xa0, 0x78, 0x06, 0x80, 0x86, 0x19, 0x00,
  0x12, 0x66, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0xaf, 0x00, 0x00, 0x00,
  0x1a, 0x03, 0x4c, 0x90, 0x46, 0x02, 0x13, 0xc4, 0x83, 0x0c, 0x6f, 0x0c,
  0x24, 0xc6, 0x45, 0x66, 0x43, 0x10, 0x4c, 0x10, 0x82, 0x6b, 0x82, 0x10,
  0x60, 0x1b, 0x84, 0x81, 0x98, 0x20, 0x04, 0xd9, 0x06, 0x61, 0x30, 0x28,
  0x8c, 0xcd, 0x4d, 0x10, 0x02, 0x6d, 0xc3, 0x80, 0x24, 0xc4, 0x04, 0x21,
  0xd8, 0x26, 0x08, 0x04, 0x1c, 0x30, 0x39, 0xfb, 0x4a, 0x73, 0xb3, 0x0a,
  0x63, 0xab, 0x2b, 0x9b, 0x20, 0x04, 0xdc, 0x04, 0x21, 0xe8, 0x36, 0x08,
  0xcb, 0xb3, 0x21, 0x59, 0x98, 0x66, 0x59, 0x06, 0x67, 0x81, 0x36, 0x04,
  0xd1, 0x04, 0xe1, 0x58, 0x03, 0x46, 0x67, 0x5f, 0x6f, 0x75, 0x74, 0x4d,
  0x65, 0x61, 0x6e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x13,
  0x04, 0x36, 0x48, 0x83, 0x0d, 0xcb, 0x32, 0x51, 0xcb, 0x32, 0x38, 0x55,
  0x55, 0x41, 0x1b, 0x02, 0x6b, 0x82, 0xb0, 0xb8, 0x01, 0x85, 0x31, 0xb1,
  0x09, 0x42, 0xe0, 0x6d, 0x40, 0x16, 0x2c, 0x5b, 0x96, 0x41, 0x03, 0x36,
  0x04, 0xdb, 0x06, 0x42, 0xba, 0x38, 0x60, 0x82, 0x30, 0xc8, 0xc1, 0x04,
  0x21, 0xf8, 0x18, 0xa0, 0x4d, 0x10, 0x02, 0x30, 0xd8, 0x60, 0x24, 0x60,
  0x40, 0x2c, 0x61, 0xf0, 0x90, 0x68, 0x4b, 0x83, 0x9b, 0xdb, 0x40, 0x24,
  0x63, 0x40, 0x18, 0x1b, 0x86, 0x4f, 0x0c, 0xc8, 0x60, 0x82, 0x20, 0xcc,
  0x01, 0x0d, 0xb4, 0x30, 0x37, 0x32, 0xb6, 0xb2, 0x09, 0x42, 0x10, 0x06,
  0x1b, 0x8c, 0xe4, 0x0c, 0x88, 0x25, 0x0c, 0xd0, 0x60, 0x83, 0x60, 0xa4,
  0xc1, 0x04, 0xc1, 0x50, 0x83, 0x0d, 0xc2, 0x27, 0x06, 0x13, 0x84, 0x38,
  0x88, 0x83, 0x09, 0x42, 0x20, 0x06, 0x1b, 0x04, 0x37, 0x10, 0x83, 0x09,
  0x42, 0xc2, 0x06, 0x54, 0xe8, 0xca, 0xf0, 0xe8, 0xea, 0xe4, 0xca, 0x88,
  0xd2, 0xda, 0x36, 0x18, 0x49, 0x1c, 0x10, 0x4b, 0x18, 0xa0, 0x01, 0x97,
  0xb5, 0x32, 0x39, 0xb7, 0x32, 0xb6, 0xab, 0x34, 0x32, 0x3a, 0xb4, 0x0d,
  0x46, 0x32, 0x07, 0xc4, 0x17, 0x06, 0x68, 0x40, 0x66, 0xad, 0x4c, 0xce,
  0xad, 0x8c, 0x4d, 0x2a, 0x8c, 0x2c, 0xad, 0x6e, 0x6e, 0x82, 0x10, 0x8c,
  0xc1, 0x06, 0x23, 0xa9, 0x03, 0xc2, 0x0e, 0xc2, 0x00, 0x0d, 0x68, 0x91,
  0xbd, 0x0d, 0xa1, 0x95, 0x8d, 0xad, 0x95, 0xc9, 0x89, 0xbd, 0x85, 0xc9,
  0x91, 0x4d, 0x85, 0xb5, 0xc1, 0xb1, 0xa5, 0xb9, 0x9d, 0x6d, 0x30, 0x12,
  0x3c, 0x20, 0xdc, 0x20, 0x0c, 0x0c, 0x4e, 0x61, 0x72, 0x65, 0x45, 0x76,
  0x65, 0x6e, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x73, 0x41, 0x63, 0x74, 0x69,
  0x76, 0x65, 0x13, 0x84, 0x80, 0x0c, 0x36, 0x18, 0x89, 0x1e, 0x10, 0x7b,
  0x10, 0x06, 0x06, 0x15, 0xb8, 0x34, 0xbc, 0x32, 0xb6, 0x29, 0xba, 0x32,
  0xb8, 0xac, 0x09, 0x42, 0x50, 0x06, 0x1b, 0x8c, 0xa4, 0x0f, 0x08, 0x3f,
  0x08, 0x03, 0x34, 0xe0, 0x01, 0x17, 0x46, 0x46, 0x96, 0xe6, 0x76, 0x36,
  0x41, 0x08, 0xcc, 0x60, 0x83, 0x91, 0x80, 0x02, 0x11, 0x0a, 0x61, 0xf0,
  0x6c, 0x40, 0x34, 0x39, 0xa0, 0x83, 0x3b, 0xc8, 0x03, 0x3e, 0xf8, 0x03,
  0x51, 0x98, 0x20, 0x28, 0x6d, 0xb0, 0x81, 0x48, 0x32, 0x62, 0xd9, 0x20,
  0x68, 0xa5, 0xb0, 0xa1, 0x59, 0xbc, 0x32, 0x30, 0x03, 0x35, 0x58, 0x03,
  0x36, 0x68, 0x83, 0x37, 0x80, 0x83, 0x51, 0x20, 0x05, 0x53, 0x98, 0x20,
  0x40, 0xc5, 0x06, 0x60, 0xc3, 0xb0, 0xa4, 0x42, 0x2a, 0x6c, 0x08, 0x54,
  0x61, 0xc3, 0x30, 0xa0, 0xc2, 0x2a, 0x90, 0x68, 0x0b, 0x4b, 0x73, 0x9b,
  0x20, 0xc8, 0x01, 0x1a, 0x6c, 0x18, 0xbe, 0x6f, 0xd8, 0x40, 0x2c, 0xae,
  0x60, 0xbc, 0xc2, 0x86, 0x02, 0x15, 0x5a, 0x01, 0xe8, 0x60, 0x81, 0x43,
  0x9a, 0x1b, 0x1d, 0x9f, 0xb7, 0x36, 0xb7, 0x34, 0xb8, 0x37, 0xba, 0x32,
  0x37, 0x3a, 0x90, 0x31, 0xb4, 0x30, 0x39, 0x46, 0x53, 0x69, 0x6d, 0x70,
  0x6c, 0x65, 0x20, 0x43, 0x2f, 0x43, 0x2b, 0x2b, 0x20, 0x54, 0x42, 0x41,
  0x41, 0x1b, 0x02, 0x5a, 0x98, 0x20, 0xc8, 0xc1, 0x19, 0x6c, 0x18, 0x66,
  0xa1, 0x16, 0x6c, 0x61, 0xc3, 0x20, 0x0b, 0xb7, 0x60, 0x0b, 0x1b, 0x06,
  0x5c, 0xc0, 0x05, 0x5b, 0xa8, 0xc2, 0xc6, 0x66, 0xd7, 0xe6, 0x92, 0x46,
  0x56, 0xe6, 0x46, 0x37, 0x25, 0x08, 0xaa, 0x90, 0xe1, 0xb9, 0xd8, 0x95,
  0xc9, 0xcd, 0xa5, 0xbd, 0xb9, 0x4d, 0x09, 0x88, 0x26, 0x64, 0x78, 0x2e,
  0x76, 0x61, 0x6c, 0x76, 0x65, 0x72, 0x53, 0x02, 0xa3, 0x0e, 0x19, 0x9e,
  0xcb, 0x1c, 0x5a, 0x18, 0x59, 0x99, 0x5c, 0xd3, 0x1b, 0x59, 0x19, 0xdb,
  0x94, 0x20, 0x29, 0x43, 0x86, 0xe7, 0x22, 0x57, 0x36, 0xf7, 0x56, 0x27,
  0x37, 0x56, 0x36, 0x37, 0x25, 0xe0, 0x2a, 0x91, 0xe1, 0xb9, 0xd0, 0xe5,
  0xc1, 0x95, 0x05, 0xb9, 0xb9, 0xbd, 0xd1, 0x85, 0xd1, 0xa5, 0xbd, 0xb9,
  0xcd, 0x4d, 0x11, 0x4c, 0x61, 0x15, 0xea, 0x90, 0xe1, 0xb9, 0x94, 0xb9,
  0xd1, 0xc9, 0xe5, 0x41, 0xbd, 0xa5, 0xb9, 0xd1, 0xcd, 0x4d, 0x09, 0x60,
  0x01, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00,
  0x33, 0x08, 0x80, 0x1c, 0xc4, 0xe1, 0x1c, 0x66, 0x14, 0x01, 0x3d, 0x88,
  0x43, 0x38, 0x84, 0xc3, 0x8c, 0x42, 0x80, 0x07, 0x79, 0x78, 0x07, 0x73,
  0x98, 0x71, 0x0c, 0xe6, 0x00, 0x0f, 0xed, 0x10, 0x0e, 0xf4, 0x80, 0x0e,
  0x33, 0x0c, 0x42, 0x1e, 0xc2, 0xc1, 0x1d, 0xce, 0xa1, 0x1c, 0x66, 0x30,
  0x05, 0x3d, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1b, 0xcc, 0x03, 0x3d, 0xc8,
  0x43, 0x3d, 0x8c, 0x03, 0x3d, 0xcc, 0x78, 0x8c, 0x74, 0x70, 0x07, 0x7b,
  0x08, 0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07, 0x7a, 0x70, 0x03, 0x76,
  0x78, 0x87, 0x70, 0x20, 0x87, 0x19, 0xcc, 0x11, 0x0e, 0xec, 0x90, 0x0e,
  0xe1, 0x30, 0x0f, 0x6e, 0x30, 0x0f, 0xe3, 0xf0, 0x0e, 0xf0, 0x50, 0x0e,
  0x33, 0x10, 0xc4, 0x1d, 0xde, 0x21, 0x1c, 0xd8, 0x21, 0x1d, 0xc2, 0x61,
  0x1e, 0x66, 0x30, 0x89, 0x3b, 0xbc, 0x83, 0x3b, 0xd0, 0x43, 0x39, 0xb4,
  0x03, 0x3c, 0xbc, 0x83, 0x3c, 0x84, 0x03, 0x3b, 0xcc, 0xf0, 0x14, 0x76,
  0x60, 0x07, 0x7b, 0x68, 0x07, 0x37, 0x68, 0x87, 0x72, 0x68, 0x07, 0x37,
  0x80, 0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07, 0x76, 0x28, 0x07, 0x76,
  0xf8, 0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87, 0x5f, 0x08, 0x87, 0x71,
  0x18, 0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81, 0x2c, 0xee, 0xf0, 0x0e,
  0xee, 0xe0, 0x0e, 0xf5, 0xc0, 0x0e, 0xec, 0x30, 0x03, 0x62, 0xc8, 0xa1,
  0x1c, 0xe4, 0xa1, 0x1c, 0xcc, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xdc, 0x61,
  0x1c, 0xca, 0x21, 0x1c, 0xc4, 0x81, 0x1d, 0xca, 0x61, 0x06, 0xd6, 0x90,
  0x43, 0x39, 0xc8, 0x43, 0x39, 0x98, 0x43, 0x39, 0xc8, 0x43, 0x39, 0xb8,
  0xc3, 0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3b, 0x94, 0xc3, 0x2f, 0xbc,
  0x83, 0x3c, 0xfc, 0x82, 0x3b, 0xd4, 0x03, 0x3b, 0xb0, 0xc3, 0x0c, 0xc5,
  0x61, 0x07, 0x76, 0xb0, 0x87, 0x76, 0x70, 0x03, 0x76, 0x78, 0x87, 0x77,
  0x80, 0x87, 0x19, 0xd9, 0x43, 0x0e, 0xf8, 0xe0, 0x06, 0xe8, 0xc0, 0x0e,
  0x6e, 0x20, 0x0f, 0xe5, 0x30, 0x0f, 0xef, 0x50, 0x0f, 0xf2, 0x30, 0x0e,
  0xe5, 0xe0, 0x06, 0xe1, 0x40, 0x0f, 0xf4, 0x20, 0x0f, 0xe9, 0x20, 0x0e,
  0xf5, 0x40, 0x0f, 0xe5, 0x00, 0x00, 0x00, 0x00, 0x71, 0x20, 0x00, 0x00,
  0x76, 0x00, 0x00, 0x00, 0xd6, 0x60, 0x0d, 0x97, 0xef, 0x3c, 0xbe, 0x05,
  0x54, 0x04, 0x48, 0x4c, 0x25, 0xd0, 0x10, 0x62, 0x33, 0x10, 0x57, 0x05,
  0xe0, 0x41, 0xe0, 0x77, 0xfe, 0xbe, 0xeb, 0xf4, 0x66, 0x39, 0xec, 0xb6,
  0x86, 0xe5, 0xe9, 0xb0, 0x7b, 0x5c, 0x06, 0x02, 0x67, 0xd6, 0x1f, 0x49,
  0x7a, 0xa5, 0x96, 0xf1, 0xf4, 0xba, 0xbc, 0x2c, 0x23, 0x02, 0xad, 0x3f,
  0x92, 0xbd, 0x3c, 0xa6, 0xbf, 0xe5, 0xc0, 0x26, 0x09, 0x16, 0x03, 0x02,
  0x81, 0xc0, 0xa0, 0x29, 0x6c, 0xc3, 0xe5, 0x3b, 0x8f, 0x2f, 0x04, 0x54,
  0x51, 0x10, 0x51, 0xe9, 0x00, 0x43, 0x49, 0x18, 0x80, 0x80, 0xf9, 0xc8,
  0x6d, 0xd7, 0x40, 0x1a, 0x04, 0x7e, 0xd0, 0xf0, 0x78, 0x5d, 0x26, 0x4b,
  0xdf, 0x77, 0x69, 0x79, 0x5e, 0x67, 0xd3, 0x87, 0xe1, 0x31, 0xba, 0x0c,
  0x04, 0xce, 0xa0, 0xc1, 0x2c, 0xec, 0x46, 0x22, 0x0d, 0x83, 0xc9, 0xa0,
  0x2b, 0x46, 0x4e, 0xb7, 0x8d, 0xc2, 0x1a, 0x2e, 0xdf, 0x79, 0xfc, 0x89,
  0xb8, 0x26, 0x2a, 0x22, 0xd8, 0xc9, 0x89, 0x08, 0xbf, 0xb8, 0x6d, 0x43,
  0x10, 0x83, 0xe1, 0xf2, 0x9d, 0xc7, 0x2f, 0x16, 0x60, 0x9a, 0x88, 0x86,
  0x18, 0xda, 0x23, 0x22, 0x80, 0x41, 0x1c, 0xc4, 0x06, 0x8c, 0x1c, 0xea,
  0xf1, 0x91, 0xdb, 0x36, 0x06, 0x6b, 0xb8, 0x7c, 0xe7, 0xf1, 0x2d, 0xa0,
  0x22, 0x40, 0x62, 0x2a, 0x81, 0x86, 0xe0, 0x1c, 0xaa, 0x99, 0xcc, 0x42,
  0x1a, 0x2e, 0xdf, 0x79, 0x7c, 0x21, 0x22, 0x80, 0x89, 0x08, 0x81, 0x66,
  0x58, 0x88, 0x02, 0xf8, 0x02, 0xbf, 0xf3, 0x37, 0xed, 0xb6, 0x86, 0xd9,
  0xf5, 0x32, 0x10, 0x38, 0xb3, 0xfe, 0x48, 0xd4, 0x32, 0x9e, 0x5e, 0x97,
  0x97, 0x65, 0x44, 0x60, 0x13, 0x08, 0x0c, 0x5a, 0x82, 0x34, 0x5c, 0xbe,
  0xf3, 0xf8, 0xd3, 0x11, 0x11, 0xc0, 0x20, 0x0e, 0x3e, 0x72, 0xdb, 0xb6,
  0xd0, 0x0c, 0x97, 0xef, 0x3c, 0x7e, 0x00, 0x44, 0x11, 0x42, 0x44, 0xe6,
  0x50, 0x0d, 0x97, 0xef, 0x3c, 0xfe, 0x44, 0x5c, 0x13, 0x15, 0x11, 0xa5,
  0x03, 0x0c, 0x7e, 0x71, 0xdb, 0x56, 0x40, 0x30, 0x00, 0xd2, 0x98, 0x80,
  0x20, 0x04, 0x26, 0x41, 0x0d, 0x97, 0xef, 0x3c, 0xfe, 0x42, 0x18, 0x80,
  0x80, 0x7d, 0xb7, 0xdd, 0x3a, 0x5f, 0xad, 0x5b, 0x05, 0x35, 0x5c, 0xbe,
  0xf3, 0xf8, 0x0b, 0x61, 0x00, 0x02, 0xf6, 0xd5, 0x7a, 0xeb, 0x7c, 0xb7,
  0x5d, 0x04, 0x63, 0x10, 0xf8, 0x39, 0xeb, 0x6d, 0x6b, 0x98, 0x5d, 0x2f,
  0xcf, 0x87, 0xe1, 0x31, 0xba, 0x0c, 0x04, 0xce, 0xa0, 0xc1, 0x2c, 0xec,
  0x46, 0x22, 0x0d, 0x83, 0xc9, 0xa0, 0x2b, 0x46, 0x4e, 0xb7, 0xcd, 0x20,
  0x1a, 0x2e, 0xdf, 0x79, 0x7c, 0x23, 0x72, 0xa8, 0x47, 0x1c, 0x7c, 0xe4,
  0xb6, 0xed, 0x01, 0x1b, 0x2e, 0xdf, 0x79, 0x7c, 0x0b, 0xa8, 0x88, 0x95,
  0x00, 0x86, 0x12, 0x68, 0x08, 0x6d, 0xf2, 0x8b, 0xdb, 0xb6, 0x09, 0x68,
  0xb8, 0x7c, 0xe7, 0xf1, 0x03, 0xa4, 0x01, 0x22, 0xcc, 0x2f, 0x6e, 0xdb,
  0x20, 0xb0, 0xe1, 0xf2, 0x9d, 0xc7, 0xb7, 0x80, 0x8a, 0x58, 0x09, 0x60,
  0x28, 0x81, 0x86, 0xd0, 0x26, 0x1f, 0xb9, 0x6d, 0x8b, 0x80, 0x86, 0xcb,
  0x77, 0x1e, 0x3f, 0x40, 0x1a, 0x20, 0xc2, 0x7c, 0xe4, 0xb6, 0xed, 0x20,
  0x1b, 0x2e, 0xdf, 0x79, 0xfc, 0xe9, 0x88, 0x08, 0x60, 0x10, 0x07, 0xb1,
  0x01, 0x23, 0x87, 0x7a, 0x7c, 0xe4, 0xb6, 0x01, 0x61, 0x20, 0x00, 0x00,
  0xfd, 0x04, 0x00, 0x00, 0x13, 0x04, 0x75, 0x10, 0x0b, 0x04, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x64, 0x95, 0x47, 0x11, 0x8c, 0x00, 0x50, 0x30,
  0x03, 0x50, 0xea, 0x01, 0x65, 0x57, 0x84, 0x02, 0x35, 0x50, 0x84, 0x01,
  0x15, 0x51, 0x72, 0xc5, 0x1b, 0x50, 0xbe, 0x01, 0xa5, 0x1b, 0x50, 0x86,
  0x02, 0xe5, 0x54, 0xc0, 0x01, 0xe5, 0x51, 0xde, 0x01, 0x15, 0x52, 0xe0,
  0x01, 0x05, 0x55, 0xa0, 0x01, 0x65, 0x54, 0x86, 0x01, 0x64, 0x95, 0x00,
  0x01, 0x63, 0x04, 0x20, 0x08, 0x82, 0xf8, 0x37, 0x02, 0x30, 0x46, 0x00,
  0x82, 0x20, 0x88, 0xff, 0x02, 0x00, 0x00, 0x00, 0x23, 0x06, 0x09, 0x00,
  0x82, 0x60, 0xd0, 0x06, 0x7b, 0x30, 0x11, 0x76, 0x60, 0x07, 0x68, 0x30,
  0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x6d, 0xc0, 0x07, 0x14, 0x77, 0x07,
  0x77, 0x90, 0x06, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0xd0, 0x06, 0x7d,
  0x50, 0x79, 0x78, 0x80, 0x07, 0x6a, 0x30, 0x62, 0x60, 0x00, 0x20, 0x08,
  0x06, 0x91, 0x2b, 0x54, 0x7d, 0x30, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06,
  0x91, 0x2b, 0x54, 0x7a, 0x30, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0xd1,
  0x2b, 0x58, 0x7f, 0x30, 0x62, 0x50, 0x00, 0x20, 0x08, 0x06, 0xd3, 0x2b,
  0x4c, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0x10, 0xbd, 0xc2, 0xd5, 0x07,
  0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0x10, 0xc1, 0x02, 0x26, 0x0a, 0x23,
  0x06, 0x07, 0x00, 0x82, 0x60, 0x90, 0xc1, 0x42, 0x18, 0x1c, 0x7f, 0x30,
  0x9a, 0x10, 0x08, 0x15, 0xf0, 0x01, 0x94, 0x81, 0x69, 0x1d, 0xa5, 0x80,
  0xb5, 0x9c, 0xc2, 0x8d, 0x26, 0x18, 0x43, 0x09, 0x41, 0x8c, 0x18, 0x1c,
  0x00, 0x08, 0x82, 0x41, 0x86, 0x0b, 0x69, 0xf0, 0xac, 0xc2, 0x68, 0x42,
  0x20, 0xd4, 0x10, 0xc8, 0x88, 0x41, 0x01, 0x80, 0x20, 0x18, 0x4c, 0xb8,
  0xf0, 0x55, 0xf0, 0xe9, 0x70, 0x43, 0xb2, 0x90, 0xc1, 0x2c, 0x43, 0xc0,
  0x06, 0xc1, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x44, 0xe2, 0x90, 0x06,
  0xad, 0x50, 0x41, 0x2c, 0x5c, 0x05, 0x4a, 0x14, 0xd2, 0x48, 0x09, 0x0f,
  0x94, 0x90, 0x80, 0x05, 0x02, 0x08, 0x2a, 0xc0, 0x05, 0x1d, 0x4d, 0x70,
  0x80, 0xe1, 0x86, 0xc0, 0x16, 0xc2, 0x60, 0x34, 0x01, 0x0a, 0x8a, 0xe0,
  0x05, 0x1e, 0x6e, 0x10, 0x82, 0x30, 0x28, 0x22, 0xd0, 0x0b, 0x82, 0xa8,
  0x40, 0x81, 0xe1, 0x86, 0x8d, 0x23, 0x83, 0xd1, 0x84, 0x0f, 0x18, 0x4d,
  0x00, 0x83, 0xa0, 0x88, 0x67, 0x87, 0x1b, 0x82, 0x50, 0x30, 0x83, 0xe1,
  0x86, 0x88, 0x40, 0x83, 0x0a, 0x04, 0x1d, 0x6e, 0x40, 0x0a, 0x34, 0xa8,
  0x40, 0xd0, 0x4a, 0x02, 0x9d, 0x65, 0x10, 0x86, 0x60, 0xc4, 0xa0, 0x01,
  0x40, 0x10, 0x0c, 0x3c, 0x7a, 0x30, 0x05, 0x38, 0x38, 0x07, 0x6b, 0x59,
  0x85, 0x55, 0x58, 0x85, 0x55, 0x18, 0x4d, 0x08, 0x80, 0x59, 0x82, 0x61,
  0xa0, 0x02, 0x10, 0x04, 0x74, 0x08, 0x86, 0x1b, 0xd0, 0xc0, 0x1c, 0xc8,
  0x60, 0x38, 0x42, 0xb0, 0x03, 0xe7, 0x2b, 0x21, 0x50, 0x23, 0x08, 0xf9,
  0x4c, 0x37, 0x14, 0x7a, 0x20, 0x4c, 0x37, 0x08, 0x7b, 0x30, 0x1c, 0x11,
  0x44, 0x99, 0x41, 0x3d, 0xac, 0xc1, 0x01, 0x2c, 0x80, 0xa0, 0x02, 0x37,
  0x80, 0xe9, 0x06, 0x39, 0x08, 0x94, 0x0a, 0x08, 0x18, 0x6e, 0x88, 0x03,
  0x7b, 0x00, 0x83, 0x59, 0x06, 0x83, 0x08, 0x66, 0x09, 0x90, 0x59, 0x02,
  0x63, 0xa0, 0x22, 0x70, 0x86, 0x55, 0x28, 0x06, 0x2a, 0x00, 0x69, 0x38,
  0x85, 0x62, 0xa0, 0x02, 0xb0, 0x86, 0x51, 0x28, 0xea, 0x0d, 0xf0, 0x60,
  0x2b, 0xb8, 0x07, 0x18, 0x31, 0x28, 0x00, 0x10, 0x04, 0x83, 0x69, 0x25,
  0x5e, 0xa1, 0x82, 0x5e, 0x80, 0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0x10,
  0x03, 0x94, 0x80, 0x85, 0x60, 0x18, 0x31, 0x38, 0x00, 0x10, 0x04, 0x03,
  0x30, 0x58, 0x09, 0x71, 0x30, 0x82, 0x11, 0x83, 0x03, 0x00, 0x41, 0x30,
  0x00, 0x03, 0x96, 0x18, 0x07, 0x44, 0x18, 0x31, 0x38, 0x00, 0x10, 0x04,
  0x03, 0x31, 0x60, 0x09, 0x72, 0x50, 0x86, 0x59, 0x86, 0x63, 0xc1, 0x2a,
  0x58, 0xc0, 0x86, 0x05, 0x3e, 0x56, 0x2c, 0xf0, 0x19, 0x31, 0x30, 0x00,
  0x10, 0x04, 0x03, 0x32, 0x70, 0x09, 0x73, 0x08, 0x46, 0x0c, 0x0c, 0x00,
  0x04, 0xc1, 0x80, 0x0c, 0x5e, 0xe2, 0x1c, 0x86, 0x0a, 0x40, 0xe2, 0x2a,
  0x18, 0xb6, 0x4c, 0xa1, 0x24, 0xa4, 0x50, 0x21, 0x80, 0xc5, 0x0c, 0x63,
  0xb1, 0x12, 0xc1, 0xb0, 0x01, 0x11, 0x10, 0x03, 0x50, 0xa9, 0x80, 0x12,
  0x52, 0xab, 0x10, 0xc0, 0x62, 0x86, 0xb2, 0x70, 0x89, 0x60, 0xd8, 0x80,
  0x08, 0x9a, 0x01, 0x98, 0x25, 0x58, 0x06, 0x2a, 0x82, 0x4e, 0xf1, 0x11,
  0x62, 0xa0, 0x22, 0xc8, 0x14, 0x50, 0x20, 0x06, 0x2a, 0x80, 0x4a, 0x21,
  0x05, 0x62, 0xa0, 0x02, 0x88, 0x14, 0x54, 0x20, 0xca, 0x23, 0x60, 0xc4,
  0xe0, 0x00, 0x40, 0x10, 0x0c, 0xc0, 0x00, 0x2c, 0xee, 0x61, 0x0d, 0x82,
  0xe1, 0x88, 0x00, 0x1c, 0x9c, 0x6f, 0x96, 0x21, 0x51, 0x02, 0x13, 0x08,
  0xf8, 0xd8, 0x30, 0xc8, 0xc7, 0x82, 0x03, 0x3e, 0x95, 0xf4, 0x04, 0xcc,
  0x12, 0x28, 0x03, 0x15, 0x00, 0x92, 0x40, 0xc8, 0x40, 0x05, 0x60, 0x24,
  0x14, 0x32, 0x50, 0x11, 0x18, 0x09, 0x86, 0x94, 0x13, 0x16, 0x30, 0x62,
  0x70, 0x00, 0x20, 0x08, 0x06, 0xd9, 0x5b, 0x80, 0x84, 0x39, 0xf8, 0xc4,
  0x68, 0x42, 0x30, 0x0c, 0x37, 0x0c, 0x01, 0x19, 0xcc, 0x32, 0x20, 0x45,
  0x60, 0xbe, 0x30, 0x16, 0x30, 0x18, 0x6e, 0x08, 0xc2, 0x81, 0x0c, 0x66,
  0x19, 0x18, 0x36, 0x08, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0x20, 0xa3,
  0x8b, 0x92, 0x58, 0x87, 0xb3, 0x18, 0x4d, 0x08, 0x84, 0x0a, 0x08, 0xa9,
  0xa0, 0x17, 0xc0, 0x02, 0x5b, 0x00, 0x41, 0x05, 0x6c, 0xa1, 0xa3, 0x09,
  0x06, 0x30, 0xdc, 0x10, 0xa8, 0x45, 0x18, 0x8c, 0x26, 0x20, 0x41, 0x11,
  0x70, 0xc1, 0xc3, 0x0d, 0x42, 0x10, 0x06, 0x45, 0x04, 0x7a, 0x41, 0x10,
  0x15, 0x28, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x99, 0x68, 0xcc,
  0x44, 0x3e, 0xc4, 0xc5, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0x41, 0x11,
  0xe3, 0xb0, 0xc3, 0x0d, 0x41, 0x4d, 0x98, 0xc1, 0x70, 0x43, 0x39, 0x10,
  0x68, 0x50, 0x81, 0xa0, 0xc3, 0x0d, 0x48, 0x81, 0x06, 0x15, 0x08, 0x5a,
  0xbd, 0x10, 0xe8, 0x2c, 0x43, 0xe3, 0x04, 0x23, 0x06, 0x0d, 0x00, 0x82,
  0x60, 0xe0, 0xa1, 0x86, 0x4e, 0x90, 0xc4, 0x5e, 0xa8, 0xc3, 0xf2, 0x13,
  0x3f, 0xf1, 0x13, 0x3f, 0x31, 0x9a, 0x10, 0x00, 0xb3, 0x04, 0xce, 0x40,
  0x05, 0x20, 0x34, 0x30, 0xc2, 0x0c, 0x47, 0x04, 0x29, 0xe1, 0x7c, 0x55,
  0x0b, 0x81, 0xda, 0x30, 0xc8, 0x67, 0xba, 0x81, 0x68, 0x09, 0x61, 0xba,
  0x41, 0x70, 0x89, 0xe1, 0x88, 0x20, 0x46, 0x13, 0xa6, 0xc1, 0x46, 0x62,
  0x2c, 0x40, 0x50, 0x81, 0x00, 0xd3, 0x0d, 0x25, 0x11, 0xf4, 0x42, 0x05,
  0xb7, 0x00, 0xc3, 0x0d, 0x45, 0x6a, 0x80, 0xc1, 0x2c, 0x43, 0xf4, 0x04,
  0xb3, 0x04, 0xd3, 0x2c, 0x41, 0x34, 0x50, 0x11, 0x38, 0x4e, 0x28, 0x40,
  0x03, 0x15, 0x80, 0xe4, 0xf4, 0x01, 0x34, 0x50, 0x01, 0x58, 0x4e, 0x1e,
  0x40, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x00, 0x06, 0xb9, 0x01, 0x17,
  0xc1, 0x2b, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0x01, 0x18, 0xe8, 0x46,
  0x5c, 0x0c, 0xb0, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x62, 0xa0,
  0x1b, 0x72, 0x51, 0xc4, 0xc2, 0x2c, 0x83, 0x64, 0x99, 0x43, 0x05, 0x06,
  0xd8, 0x60, 0xc0, 0xc7, 0x0a, 0x03, 0x3e, 0x23, 0x06, 0x06, 0x00, 0x82,
  0x60, 0x40, 0x06, 0xbc, 0x41, 0x17, 0xc1, 0x88, 0x81, 0x01, 0x80, 0x20,
  0x18, 0x90, 0x41, 0x6f, 0xd4, 0xc5, 0x50, 0x81, 0x6b, 0x5c, 0x05, 0xc3,
  0x96, 0x1d, 0xcc, 0x86, 0x94, 0x4d, 0x04, 0xb0, 0x98, 0x21, 0x3e, 0x72,
  0x23, 0x18, 0x36, 0x20, 0x02, 0x62, 0x00, 0x2a, 0x0f, 0x6c, 0x43, 0x2a,
  0x27, 0x02, 0x58, 0xcc, 0x30, 0x1f, 0xbc, 0x11, 0x0c, 0x1b, 0x10, 0x41,
  0x33, 0x00, 0xb3, 0x04, 0xd6, 0x40, 0x45, 0xd0, 0x55, 0x7a, 0xf3, 0x0c,
  0x54, 0x04, 0x59, 0x65, 0x07, 0xcf, 0x40, 0x05, 0x50, 0x55, 0x7a, 0xf0,
  0x0c, 0x54, 0x00, 0x51, 0xe5, 0x07, 0x4f, 0x65, 0x04, 0x8c, 0x18, 0x1c,
  0x00, 0x08, 0x82, 0x01, 0x18, 0xb8, 0x47, 0x69, 0x94, 0x41, 0x30, 0x1c,
  0x11, 0xb8, 0x85, 0xf3, 0xcd, 0x32, 0x50, 0x55, 0x60, 0x02, 0x01, 0x1f,
  0x1b, 0x06, 0xf9, 0x58, 0x70, 0xc0, 0xa7, 0x92, 0xf5, 0x80, 0x59, 0x82,
  0x6a, 0xa0, 0x02, 0x40, 0x28, 0x68, 0x1a, 0xa8, 0x00, 0x0c, 0x8a, 0x9a,
  0x06, 0x2a, 0x02, 0x83, 0xc2, 0xa6, 0x72, 0xde, 0x03, 0x46, 0x0c, 0x0e,
  0x00, 0x04, 0xc1, 0x20, 0xeb, 0x0f, 0xd7, 0xa0, 0x0b, 0xf6, 0x18, 0x4d,
  0x08, 0x86, 0xe1, 0x86, 0x21, 0x20, 0x83, 0x59, 0x86, 0x09, 0x0a, 0x8c,
  0x2d, 0xd6, 0x03, 0x06, 0xc3, 0x0d, 0xc1, 0x5b, 0x90, 0xc1, 0x2c, 0xc3,
  0xc5, 0x06, 0xc1, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x64, 0x22, 0x32,
  0x1b, 0x79, 0x51, 0x1f, 0xa3, 0x09, 0x81, 0x50, 0x01, 0x21, 0x15, 0xac,
  0x05, 0x58, 0x40, 0x16, 0x20, 0xa8, 0x40, 0x3f, 0x74, 0x34, 0xc1, 0x00,
  0x86, 0x1b, 0x02, 0xfc, 0x08, 0x83, 0xd1, 0x04, 0x24, 0x28, 0xc2, 0x3f,
  0x78, 0xb8, 0x41, 0x08, 0xc2, 0xa0, 0x88, 0x40, 0x2f, 0x08, 0xa2, 0x02,
  0x05, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0x20, 0x83, 0x91, 0xf0, 0x38,
  0x8d, 0xff, 0x18, 0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21, 0x28, 0x22, 0x2e,
  0x76, 0xb8, 0x21, 0x18, 0x0f, 0x33, 0x18, 0x6e, 0x98, 0x0b, 0x02, 0x0d,
  0x2a, 0x10, 0x74, 0xb8, 0x01, 0x29, 0xd0, 0xa0, 0x02, 0x41, 0x6b, 0x2d,
  0x02, 0x9d, 0x65, 0xc0, 0xb2, 0x60, 0xc4, 0xa0, 0x01, 0x40, 0x10, 0x0c,
  0x3c, 0x1b, 0x41, 0x0f, 0xd9, 0x48, 0x11, 0xbc, 0x58, 0xda, 0xa3, 0x3d,
  0xda, 0xa3, 0x3d, 0x46, 0x13, 0x02, 0x60, 0x96, 0x20, 0x1b, 0xa8, 0x00,
  0x04, 0x8c, 0x6d, 0xae, 0xe1, 0x88, 0xe0, 0x36, 0x9c, 0xaf, 0xc6, 0x22,
  0x50, 0x1b, 0x06, 0xf9, 0x4c, 0x37, 0x10, 0xbb, 0x21, 0x4c, 0x37, 0x08,
  0xbc, 0x31, 0x1c, 0x11, 0xc4, 0x68, 0xc2, 0x34, 0x58, 0x6c, 0xc4, 0x07,
  0x08, 0x2a, 0x10, 0x60, 0xba, 0x61, 0x36, 0x82, 0xb5, 0xa8, 0xa0, 0x2c,
  0x60, 0xb8, 0xa1, 0xb8, 0x11, 0x30, 0x98, 0x65, 0xe0, 0xb4, 0x60, 0x96,
  0xc0, 0x9b, 0x25, 0xe0, 0x06, 0x2a, 0x02, 0x27, 0x0b, 0x85, 0x6d, 0xa0,
  0x02, 0x90, 0xb2, 0x3e, 0xd8, 0x06, 0x2a, 0x00, 0x2b, 0xcb, 0x83, 0x6d,
  0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0xc0, 0xe0, 0x4c, 0xfc, 0x23, 0xe8,
  0x89, 0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0x00, 0x03, 0x34, 0xf9, 0x8f,
  0xc1, 0x27, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0x40, 0x0c, 0xd0, 0x04,
  0x44, 0x8a, 0x9f, 0x98, 0x65, 0xe8, 0xc2, 0x80, 0x2e, 0x2a, 0x30, 0xc0,
  0x06, 0x03, 0x3e, 0x56, 0x18, 0xf0, 0x19, 0x31, 0x30, 0x00, 0x10, 0x04,
  0x03, 0x32, 0x50, 0x13, 0x11, 0x09, 0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1,
  0x80, 0x0c, 0xd6, 0x64, 0x44, 0x86, 0x0a, 0x78, 0xe4, 0x2a, 0x18, 0xb6,
  0xec, 0x20, 0x4c, 0xa4, 0xc8, 0x23, 0x80, 0xc5, 0x0c, 0x7f, 0x72, 0x26,
  0xc1, 0xb0, 0x01, 0x11, 0x10, 0x03, 0x50, 0x79, 0x40, 0x26, 0x52, 0xe7,
  0x11, 0xc0, 0x62, 0x86, 0x50, 0x51, 0x93, 0x60, 0xd8, 0x80, 0x08, 0x9a,
  0x01, 0x98, 0x25, 0x08, 0x83, 0x81, 0x8a, 0xa0, 0x03, 0x03, 0x5b, 0xd2,
  0x06, 0x2a, 0x82, 0x0c, 0x0c, 0xec, 0x40, 0x1b, 0xa8, 0x00, 0x2a, 0x30,
  0xd0, 0x03, 0x6d, 0xa0, 0x02, 0x88, 0xc0, 0xc0, 0x0f, 0xb4, 0xca, 0x08,
  0x18, 0x31, 0x38, 0x00, 0x10, 0x04, 0x03, 0x30, 0xe0, 0x93, 0x19, 0x29,
  0x83, 0x60, 0x38, 0x22, 0xe0, 0x0f, 0xe7, 0x9b, 0x65, 0xf8, 0xc0, 0x20,
  0x30, 0x81, 0x80, 0x8f, 0x0d, 0x83, 0x7c, 0x2c, 0x38, 0xe0, 0x53, 0x49,
  0x9e, 0xc0, 0x2c, 0x01, 0x18, 0x0c, 0x54, 0x00, 0xc8, 0x07, 0x79, 0x03,
  0x15, 0x80, 0xf1, 0x51, 0xde, 0x40, 0x45, 0x60, 0x7c, 0x98, 0x57, 0x4e,
  0x9f, 0xc0, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x64, 0xab, 0xc2, 0x23,
  0x22, 0xa2, 0x27, 0xa3, 0x09, 0xc1, 0x30, 0xdc, 0x30, 0x04, 0x64, 0x30,
  0xcb, 0xe0, 0x6d, 0x81, 0xe9, 0x47, 0x9d, 0xc0, 0x60, 0xb8, 0x21, 0xe8,
  0x0f, 0x32, 0x98, 0x65, 0x10, 0x03, 0x36, 0x08, 0x46, 0x0c, 0x0e, 0x00,
  0x04, 0xc1, 0x20, 0x83, 0x95, 0x30, 0x39, 0x91, 0x51, 0x19, 0x4d, 0x08,
  0x84, 0x0a, 0x08, 0xa9, 0x20, 0x3f, 0xc0, 0x02, 0xf9, 0x00, 0x41, 0x05,
  0xa8, 0xa2, 0xa3, 0x09, 0x06, 0x30, 0xdc, 0x10, 0x98, 0x4a, 0x18, 0x8c,
  0x26, 0x20, 0x41, 0x11, 0xac, 0xc2, 0xc3, 0x0d, 0x42, 0x10, 0x06, 0x45,
  0x04, 0x7a, 0x41, 0x10, 0x15, 0x28, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08,
  0x06, 0x99, 0xaf, 0xbc, 0x49, 0x8d, 0xb4, 0xca, 0x68, 0x42, 0x00, 0x8c,
  0x26, 0x08, 0x41, 0x11, 0xff, 0xb1, 0xc3, 0x0d, 0x41, 0x9c, 0x98, 0xc1,
  0x70, 0x43, 0x88, 0x10, 0x68, 0x50, 0x81, 0xa0, 0xc3, 0x0d, 0x48, 0x81,
  0x06, 0x15, 0x08, 0x5a, 0xf9, 0x11, 0xe8, 0x2c, 0xc3, 0x18, 0x90, 0x41,
  0x30, 0x62, 0xd0, 0x00, 0x20, 0x08, 0x06, 0x1e, 0xb9, 0xd8, 0x09, 0x98,
  0xdc, 0x8a, 0x89, 0x2c, 0x7b, 0xb2, 0x27, 0x7b, 0xb2, 0x27, 0xa3, 0x09,
  0x01, 0x30, 0x4b, 0x40, 0x06, 0x03, 0x15, 0x80, 0x30, 0x06, 0xa8, 0x24,
  0x06, 0xc3, 0x11, 0x41, 0x99, 0x38, 0x5f, 0xc5, 0x47, 0xa0, 0x36, 0x0c,
  0xf2, 0x99, 0x6e, 0x20, 0xd2, 0x44, 0x98, 0x6e, 0x10, 0xd4, 0x64, 0x38,
  0x22, 0x88, 0xd1, 0x84, 0x69, 0xb0, 0x1f, 0xf9, 0x13, 0x10, 0x54, 0x20,
  0xc0, 0x74, 0x43, 0x98, 0x04, 0xf9, 0x51, 0xc1, 0x7c, 0xc0, 0x70, 0x43,
  0x51, 0x2e, 0x60, 0x30, 0xcb, 0x70, 0x06, 0x65, 0x10, 0xcc, 0x12, 0xa4,
  0xc1, 0x2c, 0xc1, 0x19, 0x0c, 0x54, 0x04, 0x0e, 0x19, 0x84, 0x82, 0x19,
  0x0c, 0x54, 0x00, 0x12, 0x19, 0xf4, 0x81, 0x19, 0x0c, 0x54, 0x00, 0x16,
  0x19, 0xe4, 0x81, 0x19, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0x01, 0x18,
  0xd4, 0x0b, 0xab, 0x04, 0xeb, 0x31, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06,
  0x60, 0x60, 0x2f, 0xad, 0x32, 0xb0, 0xc7, 0x88, 0xc1, 0x01, 0x80, 0x20,
  0x18, 0x88, 0x81, 0xbd, 0xb8, 0x4a, 0xd1, 0x1e, 0xb3, 0x0c, 0x68, 0xe0,
  0x06, 0x22, 0x52, 0x81, 0x01, 0x36, 0x18, 0xf0, 0xb1, 0xc2, 0x80, 0xcf,
  0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x90, 0x01, 0xbe, 0xc0, 0x4a, 0x30,
  0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0x64, 0x90, 0x2f, 0xb1, 0x32, 0x54,
  0xa0, 0x2e, 0x57, 0xc1, 0xb0, 0x65, 0x07, 0xef, 0x22, 0x25, 0x27, 0x01,
  0x2c, 0x66, 0x68, 0x99, 0x7a, 0x09, 0x86, 0x0d, 0x88, 0x80, 0x18, 0x80,
  0xca, 0x03, 0x79, 0x91, 0xaa, 0x93, 0x00, 0x16, 0x33, 0xbc, 0x0c, 0xbe,
  0x04, 0xc3, 0x06, 0x44, 0xd0, 0x0c, 0xc0, 0x2c, 0x81, 0x1b, 0x0c, 0x54,
  0x04, 0xdd, 0x1a, 0xc8, 0x57, 0x19, 0x0c, 0x54, 0x04, 0xd9, 0x1a, 0xd8,
  0x41, 0x19, 0x0c, 0x54, 0x00, 0xd5, 0x1a, 0xe8, 0x41, 0x19, 0x0c, 0x54,
  0x00, 0xd1, 0x1a, 0xf8, 0x41, 0x19, 0x54, 0x46, 0xc0, 0x88, 0xc1, 0x01,
  0x80, 0x20, 0x18, 0x80, 0x81, 0xca, 0x84, 0x4b, 0x19, 0x04, 0xc3, 0x11,
  0x81, 0xaa, 0x38, 0xdf, 0x2c, 0x83, 0x1a, 0xac, 0x41, 0x60, 0x02, 0x01,
  0x1f, 0x1b, 0x06, 0xf9, 0x58, 0x70, 0xc0, 0xa7, 0x92, 0x93, 0x81, 0x59,
  0x82, 0x35, 0x18, 0xa8, 0x00, 0x10, 0x35, 0x80, 0xd2, 0x60, 0xa0, 0x02,
  0x30, 0xd4, 0x80, 0x4a, 0x83, 0x81, 0x8a, 0xc0, 0x50, 0x03, 0x2c, 0x0d,
  0xca, 0x59, 0x19, 0x18, 0x31, 0x38, 0x00, 0x10, 0x04, 0x83, 0x2c, 0x67,
  0xd4, 0x05, 0x56, 0x50, 0x66, 0x34, 0x21, 0x18, 0x86, 0x1b, 0x86, 0x80,
  0x0c, 0x66, 0x19, 0xd2, 0xc0, 0x0c, 0x82, 0x81, 0x92, 0x00, 0xa6, 0x00,
  0xda, 0x59, 0xf0, 0xc4, 0xe2, 0x89, 0x30, 0x18, 0x6e, 0x50, 0x15, 0x94,
  0x21, 0x83, 0x59, 0x86, 0x36, 0x70, 0x83, 0xa0, 0x84, 0x94, 0x91, 0x62,
  0x95, 0x00, 0x16, 0x33, 0x98, 0xcd, 0xcb, 0x04, 0xc3, 0x06, 0x44, 0x00,
  0x33, 0x03, 0x30, 0x4b, 0xe0, 0x06, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60,
  0xb0, 0x81, 0x4d, 0xb8, 0xb8, 0xcc, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18,
  0x64, 0x61, 0x23, 0x2f, 0xb8, 0x42, 0x33, 0xa3, 0x09, 0x81, 0x50, 0x01,
  0xad, 0x88, 0x05, 0xb6, 0x02, 0x82, 0x0a, 0x70, 0x46, 0x47, 0x13, 0x0a,
  0x60, 0xb8, 0x21, 0xb0, 0x99, 0x30, 0x18, 0x4d, 0x38, 0x82, 0x22, 0x78,
  0x86, 0x87, 0x1b, 0x84, 0x20, 0x0c, 0x8a, 0x08, 0xf4, 0x82, 0x20, 0x2a,
  0x50, 0x60, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0x32, 0xb7, 0xf9, 0x97,
  0x72, 0xe9, 0x99, 0xd1, 0x84, 0x40, 0x18, 0x6e, 0x08, 0x7e, 0x06, 0x0c,
  0x66, 0x19, 0xe8, 0xe0, 0x0d, 0x82, 0x59, 0x02, 0x38, 0x18, 0xa8, 0x00,
  0xda, 0x40, 0x0e, 0x70, 0xeb, 0x0d, 0x06, 0x2a, 0x80, 0x34, 0x90, 0x03,
  0xdd, 0x7a, 0x83, 0x81, 0x8a, 0xa0, 0x0c, 0xe4, 0x80, 0xd4, 0xde, 0x60,
  0xa0, 0x22, 0x48, 0x03, 0x39, 0x30, 0xb5, 0x37, 0xa8, 0x20, 0x5d, 0xa0,
  0x82, 0xb0, 0x91, 0x62, 0x97, 0x00, 0x16, 0x33, 0xf8, 0xcd, 0xd9, 0x04,
  0x14, 0x04, 0x63, 0xb8, 0x21, 0x48, 0x1b, 0x30, 0x98, 0x65, 0x90, 0x83,
  0x38, 0x08, 0xca, 0x30, 0x1b, 0xa9, 0x78, 0x09, 0x60, 0x31, 0x03, 0xe9,
  0xb0, 0x4d, 0x40, 0x41, 0x30, 0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0x40,
  0x0d, 0xe8, 0xe6, 0x64, 0x82, 0x12, 0xd0, 0x06, 0x47, 0x0c, 0x0c, 0x00,
  0x04, 0xc1, 0x40, 0x0d, 0xec, 0x26, 0x65, 0x02, 0x1b, 0x22, 0xf8, 0x98,
  0x10, 0xc1, 0xa7, 0x96, 0x08, 0x66, 0x09, 0xe4, 0x60, 0xa0, 0x22, 0x10,
  0xe2, 0x80, 0x0c, 0xe0, 0x60, 0xa0, 0x02, 0x30, 0xe2, 0x00, 0x0d, 0xe0,
  0x60, 0xa0, 0x02, 0x50, 0xe2, 0x80, 0x0d, 0xe0, 0xa0, 0xa8, 0xbd, 0x81,
  0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0xc8, 0x52, 0x47, 0x67, 0x40, 0x06,
  0x6f, 0x46, 0x13, 0x02, 0x61, 0xb8, 0x61, 0x08, 0xc8, 0x60, 0x96, 0x01,
  0x0e, 0xe6, 0x20, 0x98, 0x25, 0xa0, 0x83, 0x81, 0x0a, 0xc0, 0xc5, 0xdc,
  0x40, 0x99, 0x83, 0x81, 0x0a, 0x00, 0xc6, 0xdc, 0xc0, 0x99, 0x83, 0x81,
  0x8a, 0x40, 0xdf, 0xdc, 0x40, 0x9a, 0x83, 0x11, 0x83, 0x03, 0x00, 0x41,
  0x30, 0x10, 0x03, 0xd4, 0xb1, 0x99, 0x40, 0x74, 0x2e, 0x00, 0xca, 0x5a,
  0x26, 0xa0, 0x8f, 0x05, 0x86, 0x7c, 0xae, 0x00, 0x6a, 0xc4, 0xe0, 0x00,
  0x40, 0x10, 0x0c, 0xc4, 0xa0, 0x75, 0x76, 0xc6, 0x10, 0x9d, 0x0a, 0xc8,
  0x06, 0x2e, 0x00, 0xca, 0x88, 0x80, 0x3e, 0x76, 0x2c, 0xf2, 0xb1, 0xe3,
  0x90, 0x8f, 0x09, 0x41, 0x7c, 0x2c, 0x20, 0xe4, 0x33, 0x62, 0x70, 0x00,
  0x20, 0x08, 0x06, 0x66, 0x30, 0x3b, 0x3b, 0x73, 0x33, 0xc1, 0x70, 0xc3,
  0xc3, 0x3a, 0x61, 0x30, 0xdd, 0xc0, 0xe0, 0x4c, 0x30, 0xdd, 0x30, 0xe4,
  0x8c, 0x30, 0x62, 0xe0, 0x00, 0x20, 0x08, 0x06, 0x68, 0x60, 0x3b, 0x3e,
  0x93, 0x33, 0x32, 0x33, 0x07, 0x73, 0x23, 0x04, 0x82, 0x60, 0x37, 0x18,
  0x0e, 0x04, 0x00, 0x00, 0x46, 0x02, 0x00, 0x00, 0xf6, 0x28, 0x60, 0xf8,
  0x48, 0x5d, 0xeb, 0xb5, 0xf9, 0x0e, 0x18, 0x91, 0x8f, 0xf8, 0x34, 0x6f,
  0x98, 0x02, 0x86, 0x8f, 0xd4, 0xb5, 0x7e, 0x9b, 0xbe, 0x40, 0xe1, 0xef,
  0xfe, 0xde, 0x5b, 0x77, 0x00, 0xe1, 0xfb, 0x38, 0x6e, 0x99, 0x02, 0x86,
  0x8f, 0xd4, 0xb5, 0x9e, 0x1b, 0xb6, 0x80, 0xe1, 0x23, 0x75, 0xad, 0xef,
  0xc6, 0x2d, 0x60, 0xf8, 0x48, 0x5d, 0xeb, 0x3d, 0x69, 0x06, 0x0f, 0x02,
  0x7e, 0x8c, 0xd2, 0xd8, 0xe8, 0xca, 0xe4, 0xac, 0xca, 0xe4, 0xe8, 0xd2,
  0xc6, 0xc2, 0xd8, 0xd8, 0xf2, 0x80, 0x80, 0xb2, 0x82, 0xb0, 0xac, 0x7e,
  0x48, 0xec, 0xca, 0xc6, 0xe8, 0xde, 0xe4, 0x80, 0x92, 0x48, 0x60, 0x62,
  0x80, 0x80, 0x60, 0x80, 0xb4, 0x5c, 0xca, 0xf0, 0xd2, 0xe8, 0x5c, 0xd8,
  0xde, 0xde, 0xe0, 0xca, 0xf0, 0xd2, 0xe8, 0x2c, 0x59, 0x20, 0xaa, 0x80,
  0x85, 0x22, 0x58, 0x8a, 0xf1, 0x11, 0xbf, 0xae, 0x71, 0x5f, 0xef, 0x2d,
  0x79, 0x20, 0x2a, 0x09, 0x03, 0x10, 0xb0, 0xaf, 0xd6, 0x5b, 0xe7, 0xbb,
  0xed, 0xda, 0xde, 0xcd, 0x7c, 0x80, 0xf8, 0x4c, 0xe0, 0x3a, 0x88, 0xcb,
  0xff, 0x85, 0x08, 0x99, 0x7e, 0x62, 0x30, 0x08, 0x3f, 0xdf, 0xfd, 0xc5,
  0x71, 0x1e, 0xe2, 0x42, 0x26, 0x2b, 0x14, 0x80, 0x1a, 0x8a, 0x79, 0x81,
  0x85, 0x22, 0x24, 0x1f, 0xf1, 0x6d, 0x3f, 0xcf, 0x6d, 0x35, 0x40, 0x6a,
  0x28, 0xe6, 0x05, 0x16, 0x8a, 0x90, 0x7c, 0xc4, 0xaf, 0x6b, 0xdd, 0xbf,
  0x6f, 0x9b, 0x15, 0xb0, 0x1a, 0x8a, 0x79, 0x81, 0x85, 0x22, 0x24, 0x1f,
  0xf1, 0x6b, 0x7f, 0x11, 0x24, 0x09, 0xf0, 0xf5, 0xdb, 0x32, 0x03, 0x0e,
  0xd7, 0x44, 0x9a, 0xba, 0xe6, 0x4d, 0x55, 0xa0, 0xa9, 0x80, 0x85, 0x22,
  0x7c, 0xc4, 0xa7, 0x7d, 0x5f, 0xa7, 0x0f, 0xc6, 0xf0, 0x97, 0xc8, 0x7f,
  0x0e, 0x53, 0x0d, 0x50, 0x04, 0x1f, 0xf1, 0xe9, 0x7a, 0xf7, 0x6f, 0xdb,
  0x9e, 0x07, 0x9e, 0x86, 0x62, 0x5e, 0x60, 0xa1, 0x08, 0xc9, 0x47, 0x7c,
  0xdc, 0xaf, 0x0d, 0x7a, 0xa0, 0x92, 0x20, 0x0a, 0x88, 0x88, 0xe1, 0x05,
  0x16, 0x8a, 0x60, 0x29, 0xc6, 0x47, 0xfc, 0xdb, 0xaf, 0xad, 0x5b, 0xc0,
  0xf0, 0x91, 0xba, 0xde, 0x6b, 0x33, 0x17, 0x30, 0x7c, 0xa4, 0xae, 0xf7,
  0xdb, 0xce, 0x05, 0x0c, 0x1f, 0xa9, 0xeb, 0x3d, 0x37, 0xec, 0x00, 0xa6,
  0x02, 0x16, 0x8a, 0xf0, 0x11, 0x9f, 0xf6, 0x71, 0xdb, 0xce, 0x03, 0xaa,
  0x0a, 0x58, 0x28, 0x82, 0xa5, 0x18, 0x1f, 0xf1, 0x6b, 0x7f, 0x11, 0x24,
  0x09, 0xf0, 0x71, 0xde, 0x6c, 0x07, 0x0c, 0x1f, 0xa9, 0xeb, 0x7d, 0xb7,
  0xdb, 0x01, 0xc3, 0x47, 0xea, 0x7a, 0xef, 0xef, 0xc4, 0xf1, 0x7f, 0x21,
  0x42, 0xa6, 0x9f, 0x18, 0x0c, 0xc2, 0xef, 0x6b, 0x33, 0x1d, 0x48, 0xfc,
  0x45, 0x90, 0x24, 0xc0, 0x47, 0xea, 0xdb, 0xb8, 0xfc, 0x5f, 0x88, 0x90,
  0xe9, 0x27, 0x06, 0x83, 0xf0, 0x77, 0xdc, 0x5f, 0x1c, 0xe7, 0x21, 0x2e,
  0x64, 0xba, 0x17, 0xc8, 0x5f, 0x22, 0xff, 0x39, 0xfc, 0x27, 0x22, 0x0e,
  0x02, 0x18, 0x88, 0xc8, 0x7a, 0x07, 0xa0, 0x86, 0x62, 0x5e, 0x60, 0xa1,
  0x08, 0xc9, 0x47, 0x7c, 0xdc, 0xa7, 0x7b, 0x8b, 0x1e, 0x70, 0x2a, 0x60,
  0xa1, 0x08, 0x96, 0x62, 0x7c, 0xc4, 0xb7, 0xfd, 0xfa, 0x3c, 0x16, 0x7f,
  0x89, 0xfc, 0xe7, 0xa8, 0x79, 0x7f, 0xbf, 0x4d, 0x5a, 0xc0, 0x92, 0x20,
  0x0a, 0x88, 0x88, 0xe1, 0x05, 0x16, 0x8a, 0x60, 0x29, 0xc6, 0x47, 0x7c,
  0xdb, 0xdf, 0x6b, 0xab, 0x0d, 0x80, 0x2a, 0x60, 0xa1, 0x08, 0x96, 0x62,
  0x7c, 0xc4, 0xb7, 0x75, 0xff, 0xd6, 0x8d, 0x56, 0x80, 0x93, 0x20, 0x0a,
  0x88, 0x88, 0xe1, 0x05, 0x16, 0x8a, 0x60, 0x29, 0xc6, 0x47, 0xfc, 0xda,
  0x5f, 0x04, 0x49, 0x02, 0x7c, 0x1d, 0x37, 0xfc, 0x00, 0x45, 0xf0, 0x11,
  0x9f, 0xae, 0x77, 0x1f, 0xef, 0x0d, 0x5f, 0xa0, 0xa9, 0x80, 0x85, 0x22,
  0x7c, 0xc4, 0xa7, 0x7d, 0x7f, 0xdf, 0x4d, 0xcd, 0xf0, 0x11, 0xba, 0xbe,
  0x71, 0x23, 0x15, 0x68, 0x5a, 0xe2, 0x9a, 0xa8, 0x88, 0x28, 0x1d, 0x60,
  0xe8, 0x79, 0xb3, 0x0e, 0x68, 0x5a, 0xe2, 0x9a, 0xa8, 0x88, 0x28, 0x1d,
  0x60, 0xe8, 0x7b, 0x5b, 0x15, 0x20, 0x7c, 0x5f, 0xaf, 0x2d, 0x7d, 0xc0,
  0xf0, 0x91, 0xba, 0xe6, 0x6b, 0xbb, 0x1c, 0x88, 0x2a, 0x60, 0xa1, 0x08,
  0x96, 0x62, 0x7c, 0xc4, 0xaf, 0x6b, 0xdc, 0xe7, 0x75, 0x92, 0x4b, 0x1c,
  0x04, 0xfc, 0x18, 0xa5, 0xb1, 0xd1, 0x95, 0xc9, 0x21, 0xbd, 0xc9, 0xa5,
  0xe9, 0xbd, 0xb9, 0xd1, 0x85, 0xb1, 0xb1, 0xe5, 0x01, 0x01, 0x65, 0x05,
  0x61, 0x59, 0xfd, 0x90, 0xd8, 0x95, 0x8d, 0xd1, 0xbd, 0xc9, 0x01, 0x25,
  0x91, 0xc0, 0xc4, 0x00, 0x01, 0x25, 0x01, 0x69, 0xb9, 0x94, 0xe1, 0xa5,
  0xd1, 0x9d, 0xc9, 0xe5, 0xff, 0x42, 0x84, 0x4c, 0x3f, 0x31, 0x18, 0x84,
  0xdf, 0xd7, 0xfe, 0xe2, 0x38, 0x0f, 0x71, 0x21, 0x93, 0x99, 0x0a, 0x30,
  0x15, 0xb0, 0x50, 0x84, 0x8f, 0xf8, 0xb4, 0x9f, 0xf7, 0x36, 0x2d, 0x00,
  0x35, 0x14, 0xf3, 0x02, 0x0b, 0x45, 0x48, 0x3e, 0xe2, 0xdb, 0xfe, 0x6e,
  0x5b, 0x7e, 0x80, 0xd4, 0x50, 0xcc, 0x0b, 0x2c, 0x14, 0x21, 0xf9, 0x88,
  0x5f, 0xd7, 0xba, 0x9f, 0xd3, 0x16, 0x38, 0x60, 0x35, 0x14, 0xf3, 0x02,
  0x0b, 0x45, 0x48, 0x3e, 0xe2, 0xd7, 0xfe, 0x22, 0x48, 0x12, 0xe0, 0xf3,
  0xb4, 0xb1, 0x06, 0x60, 0x12, 0x44, 0x01, 0x11, 0x31, 0xbc, 0xc0, 0x42,
  0x11, 0x2c, 0xc5, 0xf8, 0x88, 0x5f, 0xd7, 0xb9, 0x7f, 0xe3, 0xc6, 0x66,
  0xf8, 0x08, 0x5d, 0xe3, 0xb4, 0x2d, 0x06, 0x14, 0xfe, 0xee, 0xdb, 0xbc,
  0x81, 0x0e, 0x58, 0x12, 0x44, 0x01, 0x11, 0x31, 0xbc, 0xc0, 0x42, 0x11,
  0x2c, 0xc5, 0xf8, 0x88, 0x6f, 0xfb, 0x3c, 0x6f, 0x99, 0x03, 0x0e, 0x0c,
  0x54, 0xc4, 0x4a, 0x00, 0x43, 0x09, 0x34, 0x84, 0x36, 0x59, 0xad, 0x40,
  0x55, 0x01, 0x0b, 0x45, 0xb0, 0x14, 0xe3, 0x23, 0x7e, 0xed, 0x2f, 0x82,
  0x24, 0x01, 0xbe, 0x9e, 0x5b, 0xda, 0xe0, 0x23, 0xb4, 0x7d, 0x0d, 0x3e,
  0x52, 0xdb, 0xee, 0x00, 0x54, 0x01, 0x0b, 0x45, 0xb0, 0x14, 0xe3, 0x23,
  0xbe, 0xed, 0xd3, 0x75, 0x6d, 0xf9, 0x02, 0x84, 0xef, 0xef, 0xbc, 0xc9,
  0x0b, 0x2c, 0x2d, 0x71, 0x4d, 0x54, 0x44, 0x94, 0x0e, 0x30, 0x5c, 0xca,
  0xe2, 0x2f, 0x91, 0xff, 0x1c, 0x35, 0xef, 0xf7, 0xb4, 0x0d, 0x0a, 0x40,
  0x15, 0xb0, 0x50, 0x04, 0x4b, 0x31, 0x3e, 0xe2, 0xdb, 0xba, 0x9f, 0xdf,
  0x16, 0x3a, 0x00, 0x35, 0x14, 0xf3, 0x02, 0x0b, 0x45, 0x48, 0x3e, 0xe2,
  0xdb, 0x3e, 0xdf, 0xdb, 0xb1, 0x80, 0xd4, 0x50, 0xcc, 0x0b, 0x2c, 0x14,
  0x21, 0xf9, 0x88, 0x5f, 0xd7, 0xba, 0xaf, 0xef, 0x26, 0x38, 0xc0, 0x49,
  0x10, 0x05, 0x44, 0xc4, 0xf0, 0x02, 0x0b, 0x45, 0xb0, 0x14, 0xe3, 0x23,
  0x7e, 0xed, 0x2f, 0x82, 0x24, 0x01, 0x3e, 0x5f, 0x9b, 0xb1, 0x80, 0x22,
  0xf8, 0x88, 0x4f, 0xd7, 0xbb, 0xaf, 0xeb, 0x67, 0xe0, 0xf8, 0xbf, 0x10,
  0x21, 0xd3, 0x4f, 0x0c, 0x06, 0xe1, 0xe3, 0xb4, 0x95, 0x41, 0x30, 0x50,
  0x11, 0x20, 0x31, 0x95, 0x40, 0x43, 0x88, 0xcd, 0x40, 0x5c, 0x46, 0x2f,
  0xc0, 0x54, 0xc0, 0x42, 0x11, 0x3e, 0xe2, 0xd3, 0xfe, 0xae, 0x5f, 0x49,
  0xe5, 0x2f, 0x91, 0xff, 0x1c, 0x35, 0xef, 0xf7, 0xb4, 0xff, 0x44, 0xc4,
  0x41, 0x00, 0x03, 0x11, 0x9d, 0x46, 0xe5, 0x2f, 0x91, 0xff, 0x1c, 0x35,
  0xef, 0xef, 0xb7, 0xff, 0x44, 0xc4, 0x41, 0x00, 0x03, 0x11, 0xdd, 0x43,
  0xe5, 0x2f, 0x91, 0xff, 0x1c, 0x35, 0xef, 0xe7, 0xba, 0xff, 0x44, 0xc4,
  0x41, 0x00, 0x03, 0x11, 0x1d, 0x41, 0xe5, 0x2f, 0x91, 0xff, 0x1c, 0x35,
  0xef, 0xdf, 0xbd, 0xff, 0x44, 0xc4, 0x41, 0x00, 0x03, 0x11, 0x99, 0x64,
  0x80, 0xd5, 0x50, 0xcc, 0x0b, 0x2c, 0x14, 0x21, 0xf9, 0x88, 0x5f, 0xfb,
  0x8b, 0x20, 0x49, 0x80, 0x6f, 0xf7, 0x96, 0x18, 0xd0, 0x54, 0xc0, 0x42,
  0x11, 0x3e, 0xe2, 0xd3, 0xbe, 0x6f, 0xeb, 0xa6, 0x1f, 0x80, 0x49, 0x10,
  0x05, 0x44, 0xc4, 0xf0, 0x02, 0x0b, 0x45, 0xb0, 0x14, 0xe3, 0x23, 0x7e,
  0x5d, 0xe7, 0x7e, 0x5e, 0x1b, 0xf6, 0x40, 0xd5, 0x50, 0xcc, 0x0b, 0x2c,
  0x14, 0x21, 0xf9, 0x88, 0x8f, 0xfb, 0xb4, 0xbf, 0x08, 0x92, 0x04, 0x98,
  0x77, 0x40, 0xe1, 0xef, 0x3e, 0x9e, 0x5f, 0x88, 0xe2, 0x3f, 0x11, 0x71,
  0x10, 0xc0, 0x40, 0x44, 0x26, 0x45, 0x19, 0x3f, 0xd2, 0xbc, 0xc0, 0x42,
  0x11, 0xff, 0x44, 0x5c, 0x13, 0x15, 0x11, 0xbf, 0x3d, 0x58, 0x98, 0xe1,
  0x23, 0x75, 0x7d, 0xe7, 0x26, 0x18, 0xe0, 0xb4, 0xc4, 0x35, 0x51, 0x11,
  0x51, 0x3a, 0xc0, 0x50, 0xd3, 0xb4, 0x91, 0x19, 0x3e, 0x52, 0xd7, 0xf7,
  0x6e, 0xad, 0x01, 0x51, 0x05, 0x2c, 0x14, 0xc1, 0x52, 0x8c, 0x8f, 0xf8,
  0x75, 0x8d, 0xfb, 0x77, 0x6e, 0x6b, 0x86, 0x8f, 0xd4, 0xf5, 0xdd, 0xdb,
  0xe0, 0x40, 0x55, 0x01, 0x0b, 0x45, 0xb0, 0x14, 0xe3, 0x23, 0x7e, 0xed,
  0x2f, 0x82, 0x24, 0x01, 0x3e, 0x6f, 0x1b, 0xef, 0xc0, 0x25, 0x41, 0x14,
  0x10, 0x11, 0xc3, 0x0b, 0x2c, 0x14, 0xc1, 0x52, 0x8c, 0x8f, 0xf8, 0xb7,
  0x4f, 0xd7, 0xb4, 0x59, 0x0f, 0x50, 0x15, 0xb0, 0x50, 0x04, 0x4b, 0x31,
  0x3e, 0xe2, 0xdb, 0x3e, 0xed, 0x2f, 0x82, 0x24, 0x01, 0x17, 0xe1, 0xf8,
  0xbf, 0x10, 0x21, 0xd3, 0x4f, 0x0c, 0x06, 0xe1, 0xe7, 0xbb, 0x2d, 0x0e,
  0x38, 0x25, 0x61, 0x00, 0x02, 0xf6, 0xdd, 0x76, 0xeb, 0x7c, 0xb5, 0x6e,
  0xd1, 0x02, 0x50, 0x05, 0x2c, 0x14, 0xc1, 0x52, 0x8c, 0x8f, 0xf8, 0xb6,
  0xee, 0xef, 0xf4, 0x21, 0x2c, 0xfe, 0x12, 0xf9, 0xcf, 0x51, 0xf3, 0xfe,
  0xdd, 0x9b, 0x6d, 0x80, 0x25, 0x41, 0x14, 0x10, 0x11, 0xc3, 0x0b, 0x2c,
  0x14, 0xc1, 0x52, 0x8c, 0x8f, 0xf8, 0xb6, 0x7f, 0xef, 0x46, 0x38, 0x10,
  0xc1, 0x40, 0x45, 0xac, 0x04, 0x30, 0x94, 0x40, 0x43, 0x68, 0x53, 0x4d,
  0xdb, 0xb6, 0x2c, 0x10, 0xc1, 0x40, 0x45, 0xac, 0x04, 0x30, 0x94, 0x40,
  0x43, 0x68, 0x53, 0x4d, 0xdf, 0x76, 0x2b, 0x10, 0xc1, 0x40, 0x45, 0xac,
  0x04, 0x30, 0x94, 0x40, 0x43, 0x68, 0x53, 0x4d, 0xe3, 0x66, 0x2b, 0x10,
  0xc1, 0x40, 0x45, 0xac, 0x04, 0x30, 0x94, 0x40, 0x43, 0x68, 0x53, 0x4d,
  0xe7, 0xd6, 0x1f, 0x10, 0xc1, 0x40, 0x45, 0xac, 0x04, 0x30, 0x94, 0x40,
  0x43, 0x68, 0x53, 0x4d, 0xeb, 0x96, 0x1e, 0x10, 0xc1, 0x40, 0x45, 0xac,
  0x04, 0x30, 0x94, 0x40, 0x43, 0x68, 0x53, 0x4d, 0xef, 0x86, 0x1e, 0x10,
  0xc1, 0x40, 0x45, 0xac, 0x04, 0x30, 0x94, 0x40, 0x43, 0x68, 0x53, 0x4d,
  0xf3, 0xf6, 0x1a, 0x10, 0xc1, 0x40, 0x45, 0xac, 0x04, 0x30, 0x94, 0x40,
  0x43, 0x68, 0x53, 0x4d, 0xf7, 0xd6, 0x66, 0xf8, 0x48, 0x5d, 0xe3, 0xb5,
  0xd9, 0x19, 0x3e, 0x52, 0xd7, 0xf8, 0x7d, 0x0e, 0x8f, 0xff, 0x0b, 0x11,
  0x32, 0xfd, 0xc4, 0x60, 0x10, 0x7e, 0xdd, 0xe7, 0x76, 0x67, 0xf8, 0x48,
  0x5d, 0xe3, 0xb9, 0x29, 0x0e, 0x44, 0x25, 0x61, 0x00, 0x02, 0xf6, 0xdd,
  0x76, 0xeb, 0x7c, 0xb5, 0x5e, 0xdb, 0xb4, 0xf1, 0x06, 0x18, 0x3e, 0x52,
  0xd7, 0xf8, 0x6e, 0x8a, 0x01, 0x84, 0xef, 0xdb, 0xbb, 0x01, 0x07, 0x18,
  0x3e, 0x52, 0xd7, 0x78, 0x6f, 0xee, 0x01, 0x51, 0x49, 0x18, 0x80, 0x80,
  0x7d, 0xb7, 0xdd, 0x3a, 0x5f, 0xad, 0xd7, 0x36, 0x6e, 0xa1, 0x01, 0x51,
  0x49, 0x18, 0x80, 0x80, 0x7d, 0xb7, 0xdd, 0x3a, 0x5f, 0xad, 0xd7, 0x76,
  0x6e, 0xa0, 0x01, 0x51, 0x49, 0x18, 0x80, 0x80, 0x7d, 0xb7, 0xdd, 0x3a,
  0x5f, 0xad, 0xd7, 0xb6, 0x6e, 0xbd, 0x02, 0x51, 0x49, 0x18, 0x80, 0x80,
  0x7d, 0xb7, 0xdd, 0x3a, 0x5f, 0xad, 0xd7, 0x76, 0x6d, 0xbc, 0x02, 0x51,
  0x49, 0x18, 0x80, 0x80, 0x7d, 0xb7, 0xdd, 0x3a, 0x5f, 0xad, 0xd7, 0xb6,
  0x6d, 0xef, 0x01, 0x51, 0x49, 0x18, 0x80, 0x80, 0x7d, 0xb7, 0xdd, 0x3a,
  0x5f, 0xad, 0xd7, 0xf6, 0x4d, 0xa2, 0x79, 0x83, 0x80, 0x1f, 0xa3, 0x34,
  0x36, 0xba, 0x32, 0x39, 0xab, 0x32, 0x39, 0xba, 0xb4, 0xb1, 0x30, 0x36,
  0xb6, 0x3c, 0x20, 0xa0, 0xac, 0x20, 0x2c, 0xab, 0x1f, 0x12, 0xbb, 0xb2,
  0x31, 0xba, 0x37, 0x39, 0xa0, 0x24, 0x12, 0x98, 0x18, 0x20, 0x20, 0x18,
  0x20, 0x2d, 0x97, 0x32, 0xbc, 0x34, 0xba, 0xcb, 0x78, 0xfc, 0x5f, 0x88,
  0x90, 0xe9, 0x27, 0x06, 0x83, 0xf0, 0xeb, 0x1e, 0xb7, 0xdb, 0x00, 0xa8,
  0xa1, 0x98, 0x17, 0x58, 0x28, 0x42, 0xf2, 0x11, 0xdf, 0xf6, 0x6f, 0xfe,
  0x58, 0x12, 0x7f, 0x71, 0x9c, 0x87, 0xb8, 0x90, 0xc9, 0x26, 0x03, 0x38,
  0x09, 0xa2, 0x80, 0x88, 0x18, 0x5e, 0x60, 0xa1, 0x08, 0x96, 0x62, 0x7c,
  0xc4, 0xaf, 0xfd, 0x45, 0x90, 0x24, 0xc0, 0xbf, 0x69, 0x2b, 0x0f, 0xb0,
  0x1a, 0x8a, 0x79, 0x81, 0x85, 0x22, 0x24, 0x1f, 0xf1, 0x6b, 0x7f, 0x11,
  0x24, 0x09, 0xf0, 0x71, 0xdd, 0x90, 0x05, 0x30, 0x09, 0xa2, 0x80, 0x88,
  0x18, 0x5e, 0x60, 0xa1, 0x08, 0x96, 0x62, 0x7c, 0xc4, 0xaf, 0xeb, 0xdc,
  0xd7, 0x79, 0xe3, 0x0e, 0x68, 0x2a, 0x60, 0xa1, 0x08, 0x1f, 0xf1, 0x69,
  0xdf, 0xc7, 0x6f, 0xdb, 0x0c, 0x88, 0x60, 0xa0, 0x22, 0x56, 0x02, 0x18,
  0x4a, 0xa0, 0x21, 0xb4, 0xa9, 0xae, 0x69, 0xd3, 0x0c, 0x88, 0x60, 0xa0,
  0x22, 0x56, 0x02, 0x18, 0x4a, 0xa0, 0x21, 0xb4, 0xa9, 0xae, 0x6b, 0x6b,
  0x15, 0x38, 0xfc, 0x27, 0x22, 0xea, 0x5e, 0x37, 0x5c, 0x81, 0x08, 0x06,
  0x2a, 0x62, 0x25, 0x80, 0xa1, 0x04, 0x1a, 0x42, 0x9b, 0xea, 0xfa, 0xb6,
  0x7d, 0x81, 0xc3, 0x7f, 0x22, 0xa2, 0xee, 0x79, 0x53, 0x0f, 0x88, 0x60,
  0xa0, 0x22, 0x56, 0x02, 0x18, 0x4a, 0xa0, 0x21, 0xb4, 0xa9, 0xae, 0x73,
  0x63, 0x15, 0x28, 0xfc, 0xdd, 0xd7, 0x6d, 0xe3, 0x0c, 0x88, 0x60, 0xa0,
  0x22, 0x56, 0x02, 0x18, 0x4a, 0xa0, 0x21, 0xb4, 0xa9, 0xae, 0x77, 0x33,
  0x1c, 0x88, 0x60, 0xa0, 0x22, 0x56, 0x02, 0x18, 0x4a, 0xa0, 0x21, 0xb4,
  0xa9, 0xae, 0x6d, 0x0b, 0x0e, 0x30, 0x7c, 0xa4, 0xae, 0xf3, 0xda, 0xb2,
  0x07, 0x0e, 0xd7, 0x04, 0xae, 0xba, 0xee, 0x6d, 0x4a, 0x11, 0x82, 0x5f,
  0x08, 0xa8, 0xa2, 0x20, 0x22, 0x53, 0x0e, 0x30, 0x7c, 0xa4, 0xae, 0xf3,
  0xdb, 0x96, 0x03, 0x0c, 0x1f, 0xa9, 0xeb, 0x3c, 0xb7, 0xca, 0x01, 0xa9,
  0xa1, 0x98, 0x17, 0x58, 0x28, 0x42, 0xf2, 0x11, 0xbf, 0xae, 0x75, 0x9f,
  0xc7, 0x6d, 0x3f, 0x20, 0xaa, 0x80, 0x85, 0x22, 0x58, 0x8a, 0xf1, 0x11,
  0xbf, 0xae, 0x71, 0x3f, 0xb7, 0x4d, 0x51, 0xc0, 0xf0, 0x91, 0xba, 0xce,
  0x77, 0x23, 0x0c, 0x60, 0x2a, 0x60, 0xa1, 0x08, 0x1f, 0xf1, 0x69, 0xdf,
  0xce, 0x2d, 0x0a, 0x33, 0x7e, 0x87, 0x9a, 0x4c, 0x02, 0x68, 0x5e, 0x20,
  0x42, 0x80, 0x46, 0x20, 0x7e, 0x57, 0x7b, 0x7f, 0x7b, 0xb8, 0x82, 0xcb,
  0xff, 0x85, 0x08, 0x99, 0x7e, 0x62, 0x30, 0x08, 0x1f, 0xa7, 0xfd, 0xc5,
  0x71, 0x1e, 0xe2, 0x42, 0x26, 0xfb, 0x1c, 0x80, 0x2a, 0x60, 0xa1, 0x08,
  0x96, 0x62, 0x7c, 0xc4, 0xb7, 0x75, 0x9f, 0xdf, 0x8f, 0xc3, 0xf1, 0x7f,
  0x21, 0x42, 0xa6, 0x9f, 0x18, 0x0c, 0xc2, 0xdf, 0x71, 0xbb, 0x0c, 0x90,
  0x60, 0xa0, 0x22, 0x40, 0x62, 0x2a, 0x81, 0x86, 0xe0, 0x1c, 0xaa, 0x99,
  0xfa, 0xfd, 0x48, 0x16, 0xff, 0x17, 0x22, 0x64, 0xfa, 0x89, 0xc1, 0x20,
  0x8c, 0x72, 0x40, 0x11, 0x7c, 0xc4, 0xa7, 0xeb, 0xdd, 0xe7, 0x6f, 0x73,
  0x14, 0x30, 0x7c, 0xa4, 0xae, 0xf3, 0xde, 0xbc, 0x07, 0x08, 0xd7, 0x04,
  0x2e, 0x5b, 0x1e, 0x70, 0x4a, 0xc2, 0x00, 0x04, 0xec, 0xab, 0xf5, 0xd6,
  0xf9, 0x6e, 0xfb, 0x26, 0x16, 0x7f, 0x89, 0xfc, 0xe7, 0xa8, 0x79, 0x3f,
  0xd7, 0xed, 0x3b, 0x80, 0xf0, 0x9f, 0x88, 0x30, 0x42, 0x01, 0x4b, 0x82,
  0x28, 0x20, 0x22, 0x86, 0x17, 0x58, 0x28, 0x82, 0xa5, 0x18, 0x1f, 0xf1,
  0x6d, 0x3f, 0xc7, 0xad, 0x70, 0x20, 0x82, 0x81, 0x8a, 0x58, 0x09, 0x60,
  0x28, 0x81, 0x86, 0xd0, 0xa6, 0x9a, 0xae, 0xcd, 0x3c, 0x80, 0x93, 0x20,
  0x0a, 0x88, 0x88, 0xe1, 0x05, 0x16, 0x8a, 0x60, 0x29, 0xc6, 0x47, 0xfc,
  0xda, 0x5f, 0x04, 0x49, 0x02, 0x7c, 0x7c, 0x37, 0xf4, 0x01, 0xc3, 0x47,
  0xe8, 0x9a, 0xa7, 0xed, 0x7a, 0x60, 0x93, 0x20, 0x0a, 0x88, 0x88, 0xe1,
  0x05, 0x16, 0x8a, 0x60, 0x29, 0xc6, 0x47, 0xfc, 0xdb, 0xa7, 0xfd, 0x45,
  0x90, 0x24, 0xc0, 0x28, 0x03, 0xaa, 0x0a, 0x58, 0x28, 0x82, 0xa5, 0x18,
  0x1f, 0xf1, 0x6b, 0x7f, 0x11, 0x24, 0x09, 0xf0, 0xef, 0xda, 0x2c, 0x07,
  0x30, 0x09, 0xa2, 0x80, 0x88, 0x18, 0x5e, 0x60, 0xa1, 0x08, 0x96, 0x62,
  0x7c, 0xc4, 0xaf, 0xeb, 0xdc, 0xe7, 0x73, 0x00, 0x01, 0x31, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x5b, 0x86, 0x5e, 0x08, 0x70, 0x61, 0xcb, 0x10,
  0x0e, 0x01, 0x2e, 0x6c, 0x19, 0xf0, 0x22, 0xc0, 0x85, 0x2d, 0x03, 0x5f,
  0x04, 0xb8, 0xb0, 0x65, 0x98, 0x91, 0x00, 0x17, 0xb6, 0x0c, 0x37, 0x12,
  0xe0, 0xc2, 0x96, 0xc1, 0x5d, 0x02, 0x5c, 0xd8, 0x32, 0xc8, 0x4b, 0x80,
  0x0b, 0x5b, 0x86, 0x97, 0x09, 0x70, 0x61, 0xcb, 0xc0, 0x36, 0x01, 0x2e,
  0x6c, 0x19, 0xe4, 0x26, 0xc0, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00
};
